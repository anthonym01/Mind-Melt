
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programnonassocIS_LESS_THANIS_GREATER_THANIS_EQUAL_TOIS_NOT_EQUAL_TOGREATER_THAN_OR_EQUAL_TOLESS_THAN_OR_EQUAL_TOleftPLUSMINUSleftTIMESDIVIDErightPOWERAND CHARACTER COMMA COMMENT DECREASE DIVIDE DO ELSE END EQUAL FALSE FOR FUNCTION GREATER_THAN_OR_EQUAL_TO IDENTIFIER IF IN INCREASE INTEGER IS_EQUAL_TO IS_GREATER_THAN IS_LESS_THAN IS_NOT_EQUAL_TO JOIN LBRACE LBRACKET LESS_THAN_OR_EQUAL_TO LET LETTER LPAREN MINUS NOT NUMBER OR PLUS POWER RBRACE RBRACKET REAL RETURN RISK RPAREN SAVE SHOW STRING_LITERAL THEN TIMES TRUE WHILE\n    program : statements\n            | expression\n    \n    statements : statements statement\n               | statement\n    \n    statement : assignment\n              | conditional\n              | loop\n              | function\n              | function_call\n              | display\n              | input\n    \n    assignment : LET IDENTIFIER EQUAL expression\n    \n    comment : COMMENT\n    conditional : IF condition THEN statements else_statements_opt END\n    else_statements_opt : ELSE statements\n                        | empty\n    condition : expression IS_LESS_THAN expression\n                 | expression IS_EQUAL_TO expression\n                 | expression IS_GREATER_THAN expression\n                 | expression IS_NOT_EQUAL_TO expression\n                 | expression GREATER_THAN_OR_EQUAL_TO expression\n                 | expression LESS_THAN_OR_EQUAL_TO expression\n    expression : expression PLUS term\n               | expression MINUS term\n               | term\n               | expression POWER term\n               | NOT expression\n               | LPAREN expression RPAREN\n               | NUMBER MINUS term\n               | REAL MINUS term\n               | CHARACTER PLUS term\n               | STRING_LITERAL\n               | list\n    term : term TIMES factor\n            | term DIVIDE factor\n            | IDENTIFIER\n            | factor\n    factor : NUMBER\n              | LPAREN expression RPAREN\n    input : LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN\n    display : SHOW expression\n            | SHOW STRING_LITERAL\n            | SHOW IDENTIFIER\n            | SHOW NUMBER\n            | SHOW REAL\n            | SHOW CHARACTER\n            | SHOW list\n            | SHOW function\n            | SHOW conditional\n            | SHOW loop\n            | SHOW input\n            | SHOW comment\n            | SHOW program\n            | SHOW statements\n            | SHOW expression_list\n            | SHOW assignment\n            | SHOW display\n    loop : FOR IDENTIFIER IN list DO statements\n            | WHILE condition DO statementslist : LBRACKET expression_list RBRACKET\n            | emptyexpression_list : expression\n                       | expression_list COMMA expressionfunc_args : expression\n                 | func_args COMMA expression\n    function_call : IDENTIFIER LPAREN func_args RPARENfunction : FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements return_statement_opt RBRACE\n        parameters : IDENTIFIER\n                    | parameters COMMA IDENTIFIER\n                    | empty\n    \n    return_statement_opt : RETURN expression\n                         | empty\n    \n        empty : \n    '
    
_lr_action_items = {'NOT':([0,6,7,22,25,27,29,43,73,85,86,88,89,90,91,92,93,100,116,136,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'LPAREN':([0,6,7,21,22,25,27,29,31,32,33,34,35,36,40,41,42,43,51,54,73,85,86,88,89,90,91,92,93,100,116,119,136,],[7,7,7,43,7,7,7,7,43,73,73,73,73,73,73,73,73,7,96,43,7,7,7,7,7,7,7,7,7,7,7,126,7,]),'NUMBER':([0,6,7,22,25,27,29,32,33,34,35,36,40,41,42,43,73,85,86,88,89,90,91,92,93,100,116,136,],[8,8,8,8,8,8,55,72,72,72,72,72,72,72,72,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'REAL':([0,6,7,22,25,27,29,43,73,85,86,88,89,90,91,92,93,100,116,136,],[9,9,9,9,9,9,56,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'CHARACTER':([0,6,7,22,25,27,29,43,73,85,86,88,89,90,91,92,93,100,116,136,],[10,10,10,10,10,10,57,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'STRING_LITERAL':([0,6,7,22,25,27,29,43,73,85,86,88,89,90,91,92,93,100,116,126,136,],[11,11,11,11,11,11,53,11,11,11,11,11,11,11,11,11,11,11,11,132,11,]),'IDENTIFIER':([0,2,4,5,6,7,8,11,12,13,14,15,16,17,18,19,20,22,23,24,25,26,27,28,29,30,32,33,34,37,38,40,41,42,43,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,84,85,86,87,88,89,90,91,92,93,95,96,99,100,101,102,103,104,112,116,117,121,123,125,127,128,129,130,133,134,136,138,],[21,31,-4,-25,38,38,-38,-32,-33,-5,-6,-7,-8,-9,-10,-11,-37,38,-61,46,38,49,38,51,54,-3,38,38,38,-27,-36,38,38,38,38,-2,-32,-36,-38,-45,-46,-33,-8,-6,-7,-11,-52,-53,31,-55,-5,-10,97,-13,-23,-38,38,-24,-26,-34,-35,-28,-29,-30,-31,-60,38,38,31,38,38,38,38,38,38,31,113,-66,38,-63,-12,119,31,31,38,-39,31,31,131,-14,31,31,31,31,-40,38,-67,]),'LBRACKET':([0,6,7,22,25,27,29,43,73,85,86,88,89,90,91,92,93,94,100,116,136,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'LET':([0,2,4,5,6,8,11,12,13,14,15,16,17,18,19,20,23,29,30,37,38,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,74,75,76,77,78,79,80,81,84,85,86,87,95,99,101,102,104,112,116,117,121,123,127,128,129,130,133,134,138,],[24,24,-4,-25,-73,-38,-32,-33,-5,-6,-7,-8,-9,-10,-11,-37,-61,69,-3,-27,-36,-2,-32,-36,-38,-45,-46,-33,-8,-6,-7,-11,-52,-53,24,-55,-5,-10,-13,-23,-38,-24,-26,-34,-35,-28,-29,-30,-31,-60,-73,-73,24,24,-66,-63,-12,24,24,-73,-39,24,24,-14,24,24,24,24,-40,-67,]),'IF':([0,2,4,5,6,8,11,12,13,14,15,16,17,18,19,20,23,29,30,37,38,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,74,75,76,77,78,79,80,81,84,85,86,87,95,99,101,102,104,112,116,117,121,123,127,128,129,130,133,134,138,],[25,25,-4,-25,-73,-38,-32,-33,-5,-6,-7,-8,-9,-10,-11,-37,-61,25,-3,-27,-36,-2,-32,-36,-38,-45,-46,-33,-8,-6,-7,-11,-52,-53,25,-55,-5,-10,-13,-23,-38,-24,-26,-34,-35,-28,-29,-30,-31,-60,-73,-73,25,25,-66,-63,-12,25,25,-73,-39,25,25,-14,25,25,25,25,-40,-67,]),'FOR':([0,2,4,5,6,8,11,12,13,14,15,16,17,18,19,20,23,29,30,37,38,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,74,75,76,77,78,79,80,81,84,85,86,87,95,99,101,102,104,112,116,117,121,123,127,128,129,130,133,134,138,],[26,26,-4,-25,-73,-38,-32,-33,-5,-6,-7,-8,-9,-10,-11,-37,-61,26,-3,-27,-36,-2,-32,-36,-38,-45,-46,-33,-8,-6,-7,-11,-52,-53,26,-55,-5,-10,-13,-23,-38,-24,-26,-34,-35,-28,-29,-30,-31,-60,-73,-73,26,26,-66,-63,-12,26,26,-73,-39,26,26,-14,26,26,26,26,-40,-67,]),'WHILE':([0,2,4,5,6,8,11,12,13,14,15,16,17,18,19,20,23,29,30,37,38,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,74,75,76,77,78,79,80,81,84,85,86,87,95,99,101,102,104,112,116,117,121,123,127,128,129,130,133,134,138,],[27,27,-4,-25,-73,-38,-32,-33,-5,-6,-7,-8,-9,-10,-11,-37,-61,27,-3,-27,-36,-2,-32,-36,-38,-45,-46,-33,-8,-6,-7,-11,-52,-53,27,-55,-5,-10,-13,-23,-38,-24,-26,-34,-35,-28,-29,-30,-31,-60,-73,-73,27,27,-66,-63,-12,27,27,-73,-39,27,27,-14,27,27,27,27,-40,-67,]),'FUNCTION':([0,2,4,5,6,8,11,12,13,14,15,16,17,18,19,20,23,29,30,37,38,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,74,75,76,77,78,79,80,81,84,85,86,87,95,99,101,102,104,112,116,117,121,123,127,128,129,130,133,134,138,],[28,28,-4,-25,-73,-38,-32,-33,-5,-6,-7,-8,-9,-10,-11,-37,-61,28,-3,-27,-36,-2,-32,-36,-38,-45,-46,-33,-8,-6,-7,-11,-52,-53,28,-55,-5,-10,-13,-23,-38,-24,-26,-34,-35,-28,-29,-30,-31,-60,-73,-73,28,28,-66,-63,-12,28,28,-73,-39,28,28,-14,28,28,28,28,-40,-67,]),'SHOW':([0,2,4,5,6,8,11,12,13,14,15,16,17,18,19,20,23,29,30,37,38,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,74,75,76,77,78,79,80,81,84,85,86,87,95,99,101,102,104,112,116,117,121,123,127,128,129,130,133,134,138,],[29,29,-4,-25,-73,-38,-32,-33,-5,-6,-7,-8,-9,-10,-11,-37,-61,29,-3,-27,-36,-2,-32,-36,-38,-45,-46,-33,-8,-6,-7,-11,-52,-53,29,-55,-5,-10,-13,-23,-38,-24,-26,-34,-35,-28,-29,-30,-31,-60,-73,103,29,29,-66,-63,-12,29,29,103,-39,29,29,-14,29,29,29,29,-40,-67,]),'PLUS':([0,3,5,6,7,8,10,11,12,20,21,22,23,25,27,29,37,38,39,43,45,48,52,53,54,55,57,58,71,72,73,74,75,76,77,78,79,80,81,83,84,85,86,88,89,90,91,92,93,98,100,101,102,105,106,107,108,109,110,116,117,118,136,139,],[-73,32,-25,-73,-73,-38,42,-32,-33,-37,-36,-73,-61,-73,-73,-73,32,-36,32,-73,32,32,32,-32,-36,-38,42,-33,-23,-38,-73,-24,-26,-34,-35,-28,-29,-30,-31,32,-60,-73,-73,-73,-73,-73,-73,-73,-73,32,-73,32,32,32,32,32,32,32,32,-73,-39,32,-73,32,]),'MINUS':([0,3,5,6,7,8,9,11,12,20,21,22,23,25,27,29,37,38,39,43,45,48,52,53,54,55,56,58,71,72,73,74,75,76,77,78,79,80,81,83,84,85,86,88,89,90,91,92,93,98,100,101,102,105,106,107,108,109,110,116,117,118,136,139,],[-73,33,-25,-73,-73,40,41,-32,-33,-37,-36,-73,-61,-73,-73,-73,33,-36,33,-73,33,33,33,-32,-36,40,41,-33,-23,-38,-73,-24,-26,-34,-35,-28,-29,-30,-31,33,-60,-73,-73,-73,-73,-73,-73,-73,-73,33,-73,33,33,33,33,33,33,33,33,-73,-39,33,-73,33,]),'POWER':([0,3,5,6,7,8,11,12,20,21,22,23,25,27,29,37,38,39,43,45,48,52,53,54,55,58,71,72,73,74,75,76,77,78,79,80,81,83,84,85,86,88,89,90,91,92,93,98,100,101,102,105,106,107,108,109,110,116,117,118,136,139,],[-73,34,-25,-73,-73,-38,-32,-33,-37,-36,-73,-61,-73,-73,-73,34,-36,34,-73,34,34,34,-32,-36,-38,-33,-23,-38,-73,-24,-26,-34,-35,-28,-29,-30,-31,34,-60,-73,-73,-73,-73,-73,-73,-73,-73,34,-73,34,34,34,34,34,34,34,34,-73,-39,34,-73,34,]),'$end':([0,1,2,3,4,5,6,8,11,12,13,14,15,16,17,18,19,20,21,23,29,30,37,38,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,74,75,76,77,78,79,80,81,84,85,86,99,101,102,112,116,117,127,129,134,138,],[-73,0,-1,-2,-4,-25,-73,-38,-32,-33,-5,-6,-7,-8,-9,-10,-11,-37,-36,-61,-73,-3,-27,-36,-2,-32,-36,-38,-45,-46,-33,-8,-6,-7,-11,-52,-53,-1,-55,-5,-10,-13,-23,-38,-24,-26,-34,-35,-28,-29,-30,-31,-60,-73,-73,-66,-63,-12,-59,-73,-39,-14,-58,-40,-67,]),'ELSE':([4,5,6,8,11,12,13,14,15,16,17,18,19,20,23,29,30,37,38,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,74,75,76,77,78,79,80,81,84,85,86,99,101,102,104,112,116,117,127,129,134,138,],[-4,-25,-73,-38,-32,-33,-5,-6,-7,-8,-9,-10,-11,-37,-61,-73,-3,-27,-36,-2,-32,-36,-38,-45,-46,-33,-8,-6,-7,-11,-52,-53,-1,-55,-5,-10,-13,-23,-38,-24,-26,-34,-35,-28,-29,-30,-31,-60,-73,-73,-66,-63,-12,121,-59,-73,-39,-14,-58,-40,-67,]),'END':([4,5,6,8,11,12,13,14,15,16,17,18,19,20,23,29,30,37,38,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,74,75,76,77,78,79,80,81,84,85,86,99,101,102,104,112,116,117,120,122,127,128,129,134,138,],[-4,-25,-73,-38,-32,-33,-5,-6,-7,-8,-9,-10,-11,-37,-61,-73,-3,-27,-36,-2,-32,-36,-38,-45,-46,-33,-8,-6,-7,-11,-52,-53,-1,-55,-5,-10,-13,-23,-38,-24,-26,-34,-35,-28,-29,-30,-31,-60,-73,-73,-66,-63,-12,-73,-59,-73,-39,127,-16,-14,-15,-58,-40,-67,]),'RETURN':([4,5,6,8,11,12,13,14,15,16,17,18,19,20,23,29,30,37,38,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,74,75,76,77,78,79,80,81,84,85,86,99,101,102,112,116,117,127,129,133,134,138,],[-4,-25,-73,-38,-32,-33,-5,-6,-7,-8,-9,-10,-11,-37,-61,-73,-3,-27,-36,-2,-32,-36,-38,-45,-46,-33,-8,-6,-7,-11,-52,-53,-1,-55,-5,-10,-13,-23,-38,-24,-26,-34,-35,-28,-29,-30,-31,-60,-73,-73,-66,-63,-12,-59,-73,-39,-14,-58,136,-40,-67,]),'RBRACE':([4,5,6,8,11,12,13,14,15,16,17,18,19,20,23,29,30,37,38,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,74,75,76,77,78,79,80,81,84,85,86,99,101,102,112,116,117,127,129,133,134,135,136,137,138,139,],[-4,-25,-73,-38,-32,-33,-5,-6,-7,-8,-9,-10,-11,-37,-61,-73,-3,-27,-36,-2,-32,-36,-38,-45,-46,-33,-8,-6,-7,-11,-52,-53,-1,-55,-5,-10,-13,-23,-38,-24,-26,-34,-35,-28,-29,-30,-31,-60,-73,-73,-66,-63,-12,-59,-73,-39,-14,-58,-73,-40,138,-73,-72,-67,-71,]),'RPAREN':([5,6,7,8,11,12,20,23,37,38,39,43,71,72,73,74,75,76,77,78,79,80,81,82,83,84,96,98,100,113,114,115,117,118,131,132,],[-25,-73,-73,-38,-32,-33,-37,-61,-27,-36,78,-73,-23,-38,-73,-24,-26,-34,-35,-28,-29,-30,-31,99,-64,-60,-73,117,-73,-68,124,-70,-39,-65,-69,134,]),'RBRACKET':([5,6,8,11,12,20,22,23,37,38,44,45,71,72,74,75,76,77,78,79,80,81,84,85,101,117,],[-25,-73,-38,-32,-33,-37,-73,-61,-27,-36,84,-62,-23,-38,-24,-26,-34,-35,-28,-29,-30,-31,-60,-73,-63,-39,]),'COMMA':([5,6,8,11,12,20,22,23,29,37,38,43,44,45,52,53,54,55,58,66,71,72,74,75,76,77,78,79,80,81,82,83,84,85,96,100,101,113,114,115,117,118,131,],[-25,-73,-38,-32,-33,-37,-73,-61,-73,-27,-36,-73,85,-62,-62,-32,-36,-38,-33,85,-23,-38,-24,-26,-34,-35,-28,-29,-30,-31,100,-64,-60,-73,-73,-73,-63,-68,125,-70,-39,-65,-69,]),'IS_LESS_THAN':([5,6,8,11,12,20,23,25,27,37,38,48,71,72,74,75,76,77,78,79,80,81,84,117,],[-25,-73,-38,-32,-33,-37,-61,-73,-73,-27,-36,88,-23,-38,-24,-26,-34,-35,-28,-29,-30,-31,-60,-39,]),'IS_EQUAL_TO':([5,6,8,11,12,20,23,25,27,37,38,48,71,72,74,75,76,77,78,79,80,81,84,117,],[-25,-73,-38,-32,-33,-37,-61,-73,-73,-27,-36,89,-23,-38,-24,-26,-34,-35,-28,-29,-30,-31,-60,-39,]),'IS_GREATER_THAN':([5,6,8,11,12,20,23,25,27,37,38,48,71,72,74,75,76,77,78,79,80,81,84,117,],[-25,-73,-38,-32,-33,-37,-61,-73,-73,-27,-36,90,-23,-38,-24,-26,-34,-35,-28,-29,-30,-31,-60,-39,]),'IS_NOT_EQUAL_TO':([5,6,8,11,12,20,23,25,27,37,38,48,71,72,74,75,76,77,78,79,80,81,84,117,],[-25,-73,-38,-32,-33,-37,-61,-73,-73,-27,-36,91,-23,-38,-24,-26,-34,-35,-28,-29,-30,-31,-60,-39,]),'GREATER_THAN_OR_EQUAL_TO':([5,6,8,11,12,20,23,25,27,37,38,48,71,72,74,75,76,77,78,79,80,81,84,117,],[-25,-73,-38,-32,-33,-37,-61,-73,-73,-27,-36,92,-23,-38,-24,-26,-34,-35,-28,-29,-30,-31,-60,-39,]),'LESS_THAN_OR_EQUAL_TO':([5,6,8,11,12,20,23,25,27,37,38,48,71,72,74,75,76,77,78,79,80,81,84,117,],[-25,-73,-38,-32,-33,-37,-61,-73,-73,-27,-36,93,-23,-38,-24,-26,-34,-35,-28,-29,-30,-31,-60,-39,]),'THEN':([5,6,8,11,12,20,23,37,38,47,71,72,74,75,76,77,78,79,80,81,84,88,89,90,91,92,93,105,106,107,108,109,110,117,],[-25,-73,-38,-32,-33,-37,-61,-27,-36,87,-23,-38,-24,-26,-34,-35,-28,-29,-30,-31,-60,-73,-73,-73,-73,-73,-73,-17,-18,-19,-20,-21,-22,-39,]),'DO':([5,6,8,11,12,20,23,37,38,50,71,72,74,75,76,77,78,79,80,81,84,88,89,90,91,92,93,94,105,106,107,108,109,110,111,117,],[-25,-73,-38,-32,-33,-37,-61,-27,-36,95,-23,-38,-24,-26,-34,-35,-28,-29,-30,-31,-60,-73,-73,-73,-73,-73,-73,-73,-17,-18,-19,-20,-21,-22,123,-39,]),'TIMES':([5,8,20,21,38,54,55,71,72,74,75,76,77,78,79,80,81,117,],[35,-38,-37,-36,-36,-36,-38,35,-38,35,35,-34,-35,-39,35,35,35,-39,]),'DIVIDE':([5,8,20,21,38,54,55,71,72,74,75,76,77,78,79,80,81,117,],[36,-38,-37,-36,-36,-36,-38,36,-38,36,36,-34,-35,-39,36,36,36,-39,]),'COMMENT':([29,],[70,]),'EQUAL':([46,97,],[86,116,]),'IN':([49,],[94,]),'LBRACE':([124,],[130,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,29,],[1,64,]),'statements':([0,29,87,95,121,123,130,],[2,65,104,112,128,129,133,]),'expression':([0,6,7,22,25,27,29,43,73,85,86,88,89,90,91,92,93,100,116,136,],[3,37,39,45,48,48,52,83,98,101,102,105,106,107,108,109,110,118,102,139,]),'statement':([0,2,29,65,87,95,104,112,121,123,128,129,130,133,],[4,30,4,30,4,4,30,30,4,4,30,30,4,30,]),'term':([0,6,7,22,25,27,29,32,33,34,40,41,42,43,73,85,86,88,89,90,91,92,93,100,116,136,],[5,5,5,5,5,5,5,71,74,75,79,80,81,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'list':([0,6,7,22,25,27,29,43,73,85,86,88,89,90,91,92,93,94,100,116,136,],[12,12,12,12,12,12,58,12,12,12,12,12,12,12,12,12,12,111,12,12,12,]),'assignment':([0,2,29,65,87,95,104,112,121,123,128,129,130,133,],[13,13,67,13,13,13,13,13,13,13,13,13,13,13,]),'conditional':([0,2,29,65,87,95,104,112,121,123,128,129,130,133,],[14,14,60,14,14,14,14,14,14,14,14,14,14,14,]),'loop':([0,2,29,65,87,95,104,112,121,123,128,129,130,133,],[15,15,61,15,15,15,15,15,15,15,15,15,15,15,]),'function':([0,2,29,65,87,95,104,112,121,123,128,129,130,133,],[16,16,59,16,16,16,16,16,16,16,16,16,16,16,]),'function_call':([0,2,29,65,87,95,104,112,121,123,128,129,130,133,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'display':([0,2,29,65,87,95,104,112,121,123,128,129,130,133,],[18,18,68,18,18,18,18,18,18,18,18,18,18,18,]),'input':([0,2,29,65,87,95,104,112,121,123,128,129,130,133,],[19,19,62,19,19,19,19,19,19,19,19,19,19,19,]),'factor':([0,6,7,22,25,27,29,32,33,34,35,36,40,41,42,43,73,85,86,88,89,90,91,92,93,100,116,136,],[20,20,20,20,20,20,20,20,20,20,76,77,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'empty':([0,6,7,22,25,27,29,43,73,85,86,88,89,90,91,92,93,94,96,100,104,116,133,136,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,115,23,122,23,137,23,]),'expression_list':([22,29,],[44,66,]),'condition':([25,27,],[47,50,]),'comment':([29,],[63,]),'func_args':([43,],[82,]),'parameters':([96,],[114,]),'else_statements_opt':([104,],[120,]),'return_statement_opt':([133,],[135,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','yacc.py',20),
  ('program -> expression','program',1,'p_program','yacc.py',21),
  ('statements -> statements statement','statements',2,'p_statements','yacc.py',27),
  ('statements -> statement','statements',1,'p_statements','yacc.py',28),
  ('statement -> assignment','statement',1,'p_statement','yacc.py',40),
  ('statement -> conditional','statement',1,'p_statement','yacc.py',41),
  ('statement -> loop','statement',1,'p_statement','yacc.py',42),
  ('statement -> function','statement',1,'p_statement','yacc.py',43),
  ('statement -> function_call','statement',1,'p_statement','yacc.py',44),
  ('statement -> display','statement',1,'p_statement','yacc.py',45),
  ('statement -> input','statement',1,'p_statement','yacc.py',46),
  ('assignment -> LET IDENTIFIER EQUAL expression','assignment',4,'p_assignment','yacc.py',53),
  ('comment -> COMMENT','comment',1,'p_comment','yacc.py',60),
  ('conditional -> IF condition THEN statements else_statements_opt END','conditional',6,'p_conditional','yacc.py',65),
  ('else_statements_opt -> ELSE statements','else_statements_opt',2,'p_else_statements_opt','yacc.py',70),
  ('else_statements_opt -> empty','else_statements_opt',1,'p_else_statements_opt','yacc.py',71),
  ('condition -> expression IS_LESS_THAN expression','condition',3,'p_condition','yacc.py',78),
  ('condition -> expression IS_EQUAL_TO expression','condition',3,'p_condition','yacc.py',79),
  ('condition -> expression IS_GREATER_THAN expression','condition',3,'p_condition','yacc.py',80),
  ('condition -> expression IS_NOT_EQUAL_TO expression','condition',3,'p_condition','yacc.py',81),
  ('condition -> expression GREATER_THAN_OR_EQUAL_TO expression','condition',3,'p_condition','yacc.py',82),
  ('condition -> expression LESS_THAN_OR_EQUAL_TO expression','condition',3,'p_condition','yacc.py',83),
  ('expression -> expression PLUS term','expression',3,'p_expression','yacc.py',121),
  ('expression -> expression MINUS term','expression',3,'p_expression','yacc.py',122),
  ('expression -> term','expression',1,'p_expression','yacc.py',123),
  ('expression -> expression POWER term','expression',3,'p_expression','yacc.py',124),
  ('expression -> NOT expression','expression',2,'p_expression','yacc.py',125),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','yacc.py',126),
  ('expression -> NUMBER MINUS term','expression',3,'p_expression','yacc.py',127),
  ('expression -> REAL MINUS term','expression',3,'p_expression','yacc.py',128),
  ('expression -> CHARACTER PLUS term','expression',3,'p_expression','yacc.py',129),
  ('expression -> STRING_LITERAL','expression',1,'p_expression','yacc.py',130),
  ('expression -> list','expression',1,'p_expression','yacc.py',131),
  ('term -> term TIMES factor','term',3,'p_term','yacc.py',152),
  ('term -> term DIVIDE factor','term',3,'p_term','yacc.py',153),
  ('term -> IDENTIFIER','term',1,'p_term','yacc.py',154),
  ('term -> factor','term',1,'p_term','yacc.py',155),
  ('factor -> NUMBER','factor',1,'p_factor','yacc.py',166),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','yacc.py',167),
  ('input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN','input',8,'p_input','yacc.py',175),
  ('display -> SHOW expression','display',2,'p_display','yacc.py',180),
  ('display -> SHOW STRING_LITERAL','display',2,'p_display','yacc.py',181),
  ('display -> SHOW IDENTIFIER','display',2,'p_display','yacc.py',182),
  ('display -> SHOW NUMBER','display',2,'p_display','yacc.py',183),
  ('display -> SHOW REAL','display',2,'p_display','yacc.py',184),
  ('display -> SHOW CHARACTER','display',2,'p_display','yacc.py',185),
  ('display -> SHOW list','display',2,'p_display','yacc.py',186),
  ('display -> SHOW function','display',2,'p_display','yacc.py',187),
  ('display -> SHOW conditional','display',2,'p_display','yacc.py',188),
  ('display -> SHOW loop','display',2,'p_display','yacc.py',189),
  ('display -> SHOW input','display',2,'p_display','yacc.py',190),
  ('display -> SHOW comment','display',2,'p_display','yacc.py',191),
  ('display -> SHOW program','display',2,'p_display','yacc.py',192),
  ('display -> SHOW statements','display',2,'p_display','yacc.py',193),
  ('display -> SHOW expression_list','display',2,'p_display','yacc.py',194),
  ('display -> SHOW assignment','display',2,'p_display','yacc.py',195),
  ('display -> SHOW display','display',2,'p_display','yacc.py',196),
  ('loop -> FOR IDENTIFIER IN list DO statements','loop',6,'p_loop','yacc.py',201),
  ('loop -> WHILE condition DO statements','loop',4,'p_loop','yacc.py',202),
  ('list -> LBRACKET expression_list RBRACKET','list',3,'p_list','yacc.py',207),
  ('list -> empty','list',1,'p_list','yacc.py',208),
  ('expression_list -> expression','expression_list',1,'p_expression_list','yacc.py',214),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','yacc.py',215),
  ('func_args -> expression','func_args',1,'p_func_args','yacc.py',222),
  ('func_args -> func_args COMMA expression','func_args',3,'p_func_args','yacc.py',223),
  ('function_call -> IDENTIFIER LPAREN func_args RPAREN','function_call',4,'p_function_call','yacc.py',231),
  ('function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements return_statement_opt RBRACE','function',9,'p_function','yacc.py',235),
  ('parameters -> IDENTIFIER','parameters',1,'p_parameters','yacc.py',240),
  ('parameters -> parameters COMMA IDENTIFIER','parameters',3,'p_parameters','yacc.py',241),
  ('parameters -> empty','parameters',1,'p_parameters','yacc.py',242),
  ('return_statement_opt -> RETURN expression','return_statement_opt',2,'p_return_statement_opt','yacc.py',251),
  ('return_statement_opt -> empty','return_statement_opt',1,'p_return_statement_opt','yacc.py',252),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',260),
]
