
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programnonassocIS_LESS_THANIS_GREATER_THANIS_EQUAL_TOIS_NOT_EQUAL_TOleftPLUSMINUSleftTIMESDIVIDErightPOWERAND BE BE CHARACTER COMMA COMMENT DECREASE DIVIDE DO DO ELSE EQUAL EQUAL FOR FOR FUNCTION FUNCTION IDENTIFIER IF IF IN IN INCREASE INPUT INPUT INTEGER IS_EQUAL_TO IS_GREATER_THAN IS_LESS_THAN IS_NOT_EQUAL_TO JOIN JOIN LBRACE LBRACKET LET LET LETTER LPAREN MINUS NOT NUMBER OR PLUS POWER RBRACE RBRACKET REAL RETURN RETURN RISK RISK RPAREN SAVE SAVE SHOW SHOW STRING_LITERAL THEN THEN TIMES TO TO WHILE WHILEprogram : statements\n                | expressionstatements : statements statement\n                | statementstatement : assignment\n                | conditional\n                | loop\n                | function\n                | display\n                | input\n                | COMMENTassignment : LET IDENTIFIER BE EQUAL TO expressionconditional : IF condition THEN statements else_statements_optelse_statements_opt : ELSE statements\n                        | emptycondition : expression IS_LESS_THAN expression\n                | expression IS_EQUAL_TO expression\n                | expression IS_GREATER_THAN expression\n                | expression IS_NOT_EQUAL_TO expressionexpression : expression PLUS term\n                | expression MINUS term\n                | termterm : term TIMES factor\n            | term DIVIDE factor\n            | factorfactor : NUMBER\n            | LPAREN expression RPARENinput : LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPARENdisplay : SHOW expressionloop : FOR IDENTIFIER IN list DO statements\n            | WHILE condition DO statementslist : LBRACKET expression_list RBRACKET\n            | emptyexpression_list : expression\n                        | expression_list COMMA expressionfunction : FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACEparameters : IDENTIFIER\n                | parameters COMMA IDENTIFIERreturn_statement_opt : RETURN expression\n                            | emptyempty : '
    
_lr_action_items = {'COMMENT':([0,2,4,5,6,7,8,9,10,11,12,13,21,22,34,35,36,37,38,40,46,48,50,58,62,63,64,65,70,72,73,76,80,87,88,],[12,12,-4,-22,-5,-6,-7,-8,-9,-10,-11,-25,-26,-3,-29,-20,-21,-23,-24,12,12,-27,12,12,-13,12,-15,12,-12,12,12,12,12,-28,-36,]),'LET':([0,2,4,5,6,7,8,9,10,11,12,13,21,22,34,35,36,37,38,40,46,48,50,58,62,63,64,65,70,72,73,76,80,87,88,],[14,14,-4,-22,-5,-6,-7,-8,-9,-10,-11,-25,-26,-3,-29,-20,-21,-23,-24,14,14,-27,14,14,-13,14,-15,14,-12,14,14,14,14,-28,-36,]),'IF':([0,2,4,5,6,7,8,9,10,11,12,13,21,22,34,35,36,37,38,40,46,48,50,58,62,63,64,65,70,72,73,76,80,87,88,],[15,15,-4,-22,-5,-6,-7,-8,-9,-10,-11,-25,-26,-3,-29,-20,-21,-23,-24,15,15,-27,15,15,-13,15,-15,15,-12,15,15,15,15,-28,-36,]),'FOR':([0,2,4,5,6,7,8,9,10,11,12,13,21,22,34,35,36,37,38,40,46,48,50,58,62,63,64,65,70,72,73,76,80,87,88,],[16,16,-4,-22,-5,-6,-7,-8,-9,-10,-11,-25,-26,-3,-29,-20,-21,-23,-24,16,16,-27,16,16,-13,16,-15,16,-12,16,16,16,16,-28,-36,]),'WHILE':([0,2,4,5,6,7,8,9,10,11,12,13,21,22,34,35,36,37,38,40,46,48,50,58,62,63,64,65,70,72,73,76,80,87,88,],[17,17,-4,-22,-5,-6,-7,-8,-9,-10,-11,-25,-26,-3,-29,-20,-21,-23,-24,17,17,-27,17,17,-13,17,-15,17,-12,17,17,17,17,-28,-36,]),'FUNCTION':([0,2,4,5,6,7,8,9,10,11,12,13,21,22,34,35,36,37,38,40,46,48,50,58,62,63,64,65,70,72,73,76,80,87,88,],[18,18,-4,-22,-5,-6,-7,-8,-9,-10,-11,-25,-26,-3,-29,-20,-21,-23,-24,18,18,-27,18,18,-13,18,-15,18,-12,18,18,18,18,-28,-36,]),'SHOW':([0,2,4,5,6,7,8,9,10,11,12,13,21,22,34,35,36,37,38,40,46,48,50,58,61,62,63,64,65,70,72,73,76,80,87,88,],[20,20,-4,-22,-5,-6,-7,-8,-9,-10,-11,-25,-26,-3,-29,-20,-21,-23,-24,20,20,-27,20,20,71,-13,20,-15,20,-12,20,20,20,20,-28,-36,]),'NUMBER':([0,15,17,19,20,23,24,25,26,41,42,43,44,56,61,75,85,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'LPAREN':([0,15,17,19,20,23,24,25,26,32,41,42,43,44,56,61,75,78,85,],[19,19,19,19,19,19,19,19,19,47,19,19,19,19,19,19,19,81,19,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,21,22,34,35,36,37,38,48,50,58,62,64,70,72,73,87,88,],[0,-1,-2,-4,-22,-5,-6,-7,-8,-9,-10,-11,-25,-26,-3,-29,-20,-21,-23,-24,-27,-41,-31,-13,-15,-12,-14,-30,-28,-36,]),'PLUS':([3,5,13,21,29,33,34,35,36,37,38,48,51,52,53,54,67,70,79,89,],[23,-22,-25,-26,23,23,23,-20,-21,-23,-24,-27,23,23,23,23,23,23,23,23,]),'MINUS':([3,5,13,21,29,33,34,35,36,37,38,48,51,52,53,54,67,70,79,89,],[24,-22,-25,-26,24,24,24,-20,-21,-23,-24,-27,24,24,24,24,24,24,24,24,]),'ELSE':([4,5,6,7,8,9,10,11,12,13,21,22,34,35,36,37,38,48,50,58,62,64,70,72,73,87,88,],[-4,-22,-5,-6,-7,-8,-9,-10,-11,-25,-26,-3,-29,-20,-21,-23,-24,-27,63,-31,-13,-15,-12,-14,-30,-28,-36,]),'RBRACE':([4,5,6,7,8,9,10,11,12,13,21,22,34,35,36,37,38,48,50,58,62,64,70,72,73,80,82,84,86,87,88,89,],[-4,-22,-5,-6,-7,-8,-9,-10,-11,-25,-26,-3,-29,-20,-21,-23,-24,-27,-41,-31,-13,-15,-12,-14,-30,82,-41,88,-40,-28,-36,-39,]),'IS_LESS_THAN':([5,13,21,29,35,36,37,38,48,],[-22,-25,-26,41,-20,-21,-23,-24,-27,]),'IS_EQUAL_TO':([5,13,21,29,35,36,37,38,48,],[-22,-25,-26,42,-20,-21,-23,-24,-27,]),'IS_GREATER_THAN':([5,13,21,29,35,36,37,38,48,],[-22,-25,-26,43,-20,-21,-23,-24,-27,]),'IS_NOT_EQUAL_TO':([5,13,21,29,35,36,37,38,48,],[-22,-25,-26,44,-20,-21,-23,-24,-27,]),'RPAREN':([5,13,21,33,35,36,37,38,48,59,60,77,83,],[-22,-25,-26,48,-20,-21,-23,-24,-27,-37,68,-38,87,]),'THEN':([5,13,21,28,35,36,37,38,48,51,52,53,54,],[-22,-25,-26,40,-20,-21,-23,-24,-27,-16,-17,-18,-19,]),'DO':([5,13,21,31,35,36,37,38,45,48,51,52,53,54,55,57,74,],[-22,-25,-26,46,-20,-21,-23,-24,-41,-27,-16,-17,-18,-19,65,-33,-32,]),'RBRACKET':([5,13,21,35,36,37,38,48,66,67,79,],[-22,-25,-26,-20,-21,-23,-24,-27,74,-34,-35,]),'COMMA':([5,13,21,35,36,37,38,48,59,60,66,67,77,79,],[-22,-25,-26,-20,-21,-23,-24,-27,-37,69,75,-34,-38,-35,]),'TIMES':([5,13,21,35,36,37,38,48,],[25,-25,-26,25,25,-23,-24,-27,]),'DIVIDE':([5,13,21,35,36,37,38,48,],[26,-25,-26,26,26,-23,-24,-27,]),'IDENTIFIER':([14,16,18,47,69,71,],[27,30,32,59,77,78,]),'BE':([27,],[39,]),'IN':([30,],[45,]),'EQUAL':([39,],[49,]),'LBRACKET':([45,],[56,]),'TO':([49,],[61,]),'LBRACE':([68,],[76,]),'STRING_LITERAL':([81,],[83,]),'RETURN':([82,],[85,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,40,46,63,65,76,],[2,50,58,72,73,80,]),'expression':([0,15,17,19,20,41,42,43,44,56,61,75,85,],[3,29,29,33,34,51,52,53,54,67,70,79,89,]),'statement':([0,2,40,46,50,58,63,65,72,73,76,80,],[4,22,4,4,22,22,4,4,22,22,4,22,]),'term':([0,15,17,19,20,23,24,41,42,43,44,56,61,75,85,],[5,5,5,5,5,35,36,5,5,5,5,5,5,5,5,]),'assignment':([0,2,40,46,50,58,63,65,72,73,76,80,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'conditional':([0,2,40,46,50,58,63,65,72,73,76,80,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'loop':([0,2,40,46,50,58,63,65,72,73,76,80,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'function':([0,2,40,46,50,58,63,65,72,73,76,80,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'display':([0,2,40,46,50,58,63,65,72,73,76,80,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'input':([0,2,40,46,50,58,63,65,72,73,76,80,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'factor':([0,15,17,19,20,23,24,25,26,41,42,43,44,56,61,75,85,],[13,13,13,13,13,13,13,37,38,13,13,13,13,13,13,13,13,]),'condition':([15,17,],[28,31,]),'list':([45,],[55,]),'empty':([45,50,82,],[57,64,86,]),'parameters':([47,],[60,]),'else_statements_opt':([50,],[62,]),'expression_list':([56,],[66,]),'return_statement_opt':([82,],[84,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','Lexyacc_er.py',206),
  ('program -> expression','program',1,'p_program','Lexyacc_er.py',207),
  ('statements -> statements statement','statements',2,'p_statements','Lexyacc_er.py',211),
  ('statements -> statement','statements',1,'p_statements','Lexyacc_er.py',212),
  ('statement -> assignment','statement',1,'p_statement','Lexyacc_er.py',220),
  ('statement -> conditional','statement',1,'p_statement','Lexyacc_er.py',221),
  ('statement -> loop','statement',1,'p_statement','Lexyacc_er.py',222),
  ('statement -> function','statement',1,'p_statement','Lexyacc_er.py',223),
  ('statement -> display','statement',1,'p_statement','Lexyacc_er.py',224),
  ('statement -> input','statement',1,'p_statement','Lexyacc_er.py',225),
  ('statement -> COMMENT','statement',1,'p_statement','Lexyacc_er.py',226),
  ('assignment -> LET IDENTIFIER BE EQUAL TO expression','assignment',6,'p_assignment','Lexyacc_er.py',231),
  ('conditional -> IF condition THEN statements else_statements_opt','conditional',5,'p_conditional','Lexyacc_er.py',236),
  ('else_statements_opt -> ELSE statements','else_statements_opt',2,'p_else_statements_opt','Lexyacc_er.py',240),
  ('else_statements_opt -> empty','else_statements_opt',1,'p_else_statements_opt','Lexyacc_er.py',241),
  ('condition -> expression IS_LESS_THAN expression','condition',3,'p_condition','Lexyacc_er.py',247),
  ('condition -> expression IS_EQUAL_TO expression','condition',3,'p_condition','Lexyacc_er.py',248),
  ('condition -> expression IS_GREATER_THAN expression','condition',3,'p_condition','Lexyacc_er.py',249),
  ('condition -> expression IS_NOT_EQUAL_TO expression','condition',3,'p_condition','Lexyacc_er.py',250),
  ('expression -> expression PLUS term','expression',3,'p_expression','Lexyacc_er.py',254),
  ('expression -> expression MINUS term','expression',3,'p_expression','Lexyacc_er.py',255),
  ('expression -> term','expression',1,'p_expression','Lexyacc_er.py',256),
  ('term -> term TIMES factor','term',3,'p_term','Lexyacc_er.py',266),
  ('term -> term DIVIDE factor','term',3,'p_term','Lexyacc_er.py',267),
  ('term -> factor','term',1,'p_term','Lexyacc_er.py',268),
  ('factor -> NUMBER','factor',1,'p_factor','Lexyacc_er.py',278),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','Lexyacc_er.py',279),
  ('input -> LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN','input',10,'p_input','Lexyacc_er.py',286),
  ('display -> SHOW expression','display',2,'p_display','Lexyacc_er.py',290),
  ('loop -> FOR IDENTIFIER IN list DO statements','loop',6,'p_loop','Lexyacc_er.py',294),
  ('loop -> WHILE condition DO statements','loop',4,'p_loop','Lexyacc_er.py',295),
  ('list -> LBRACKET expression_list RBRACKET','list',3,'p_list','Lexyacc_er.py',300),
  ('list -> empty','list',1,'p_list','Lexyacc_er.py',301),
  ('expression_list -> expression','expression_list',1,'p_expression_list','Lexyacc_er.py',307),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','Lexyacc_er.py',308),
  ('function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE','function',10,'p_function','Lexyacc_er.py',315),
  ('parameters -> IDENTIFIER','parameters',1,'p_parameters','Lexyacc_er.py',319),
  ('parameters -> parameters COMMA IDENTIFIER','parameters',3,'p_parameters','Lexyacc_er.py',320),
  ('return_statement_opt -> RETURN expression','return_statement_opt',2,'p_return_statement_opt','Lexyacc_er.py',327),
  ('return_statement_opt -> empty','return_statement_opt',1,'p_return_statement_opt','Lexyacc_er.py',328),
  ('empty -> <empty>','empty',0,'p_empty','Lexyacc_er.py',334),
]
