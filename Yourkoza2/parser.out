Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    DECREASE
    INCREASE
    INTEGER
    JOIN
    LETTER
    NOT
    OR
    POWER
    RISK
    SAVE

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     program -> expression
Rule 3     statements -> statements statement
Rule 4     statements -> statement
Rule 5     statement -> assignment
Rule 6     statement -> conditional
Rule 7     statement -> loop
Rule 8     statement -> function
Rule 9     statement -> display
Rule 10    statement -> input
Rule 11    assignment -> LET IDENTIFIER EQUAL expression
Rule 12    comment -> COMMENT
Rule 13    conditional -> IF condition THEN statements else_statements_opt
Rule 14    else_statements_opt -> ELSE statements
Rule 15    else_statements_opt -> empty
Rule 16    condition -> expression IS_LESS_THAN expression
Rule 17    condition -> expression IS_EQUAL_TO expression
Rule 18    condition -> expression IS_GREATER_THAN expression
Rule 19    condition -> expression IS_NOT_EQUAL_TO expression
Rule 20    condition -> expression GREATER_THAN_OR_EQUAL_TO expression
Rule 21    condition -> expression LESS_THAN_OR_EQUAL_TO expression
Rule 22    expression -> expression PLUS term
Rule 23    expression -> expression MINUS term
Rule 24    expression -> term
Rule 25    term -> term TIMES factor
Rule 26    term -> term DIVIDE factor
Rule 27    term -> factor
Rule 28    factor -> NUMBER
Rule 29    factor -> LPAREN expression RPAREN
Rule 30    input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN
Rule 31    display -> SHOW expression
Rule 32    display -> SHOW STRING_LITERAL
Rule 33    display -> SHOW IDENTIFIER
Rule 34    display -> SHOW NUMBER
Rule 35    display -> SHOW REAL
Rule 36    display -> SHOW CHARACTER
Rule 37    display -> SHOW list
Rule 38    display -> SHOW function
Rule 39    display -> SHOW conditional
Rule 40    display -> SHOW loop
Rule 41    display -> SHOW input
Rule 42    display -> SHOW comment
Rule 43    display -> SHOW program
Rule 44    display -> SHOW statements
Rule 45    display -> SHOW expression_list
Rule 46    display -> SHOW assignment
Rule 47    display -> SHOW display
Rule 48    loop -> FOR IDENTIFIER IN list DO statements
Rule 49    loop -> WHILE condition DO statements
Rule 50    list -> LBRACKET expression_list RBRACKET
Rule 51    list -> empty
Rule 52    expression_list -> expression
Rule 53    expression_list -> expression_list COMMA expression
Rule 54    function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
Rule 55    parameters -> IDENTIFIER
Rule 56    parameters -> parameters COMMA IDENTIFIER
Rule 57    return_statement_opt -> RETURN expression
Rule 58    return_statement_opt -> empty
Rule 59    empty -> <empty>

Terminals, with rules where they appear

AND                  : 
CHARACTER            : 36
COMMA                : 53 56
COMMENT              : 12
DECREASE             : 
DIVIDE               : 26
DO                   : 48 49
ELSE                 : 14
EQUAL                : 11 30
FOR                  : 48
FUNCTION             : 54
GREATER_THAN_OR_EQUAL_TO : 20
IDENTIFIER           : 11 30 30 33 48 54 55 56
IF                   : 13
IN                   : 48
INCREASE             : 
INTEGER              : 
IS_EQUAL_TO          : 17
IS_GREATER_THAN      : 18
IS_LESS_THAN         : 16
IS_NOT_EQUAL_TO      : 19
JOIN                 : 
LBRACE               : 54
LBRACKET             : 50
LESS_THAN_OR_EQUAL_TO : 21
LET                  : 11 30
LETTER               : 
LPAREN               : 29 30 54
MINUS                : 23
NOT                  : 
NUMBER               : 28 34
OR                   : 
PLUS                 : 22
POWER                : 
RBRACE               : 54 54
RBRACKET             : 50
REAL                 : 35
RETURN               : 57
RISK                 : 
RPAREN               : 29 30 54
SAVE                 : 
SHOW                 : 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
STRING_LITERAL       : 30 32
THEN                 : 13
TIMES                : 25
WHILE                : 49
error                : 

Nonterminals, with rules where they appear

assignment           : 5 46
comment              : 42
condition            : 13 49
conditional          : 6 39
display              : 9 47
else_statements_opt  : 13
empty                : 15 51 58
expression           : 2 11 16 16 17 17 18 18 19 19 20 20 21 21 22 23 29 31 52 53 57
expression_list      : 45 50 53
factor               : 25 26 27
function             : 8 38
input                : 10 41
list                 : 37 48
loop                 : 7 40
parameters           : 54 56
program              : 43 0
return_statement_opt : 54
statement            : 3 4
statements           : 1 3 13 14 44 48 49 54
term                 : 22 23 24 25 26

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) program -> . expression
    (3) statements -> . statements statement
    (4) statements -> . statement
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (13) conditional -> . IF condition THEN statements else_statements_opt
    (48) loop -> . FOR IDENTIFIER IN list DO statements
    (49) loop -> . WHILE condition DO statements
    (54) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (31) display -> . SHOW expression
    (32) display -> . SHOW STRING_LITERAL
    (33) display -> . SHOW IDENTIFIER
    (34) display -> . SHOW NUMBER
    (35) display -> . SHOW REAL
    (36) display -> . SHOW CHARACTER
    (37) display -> . SHOW list
    (38) display -> . SHOW function
    (39) display -> . SHOW conditional
    (40) display -> . SHOW loop
    (41) display -> . SHOW input
    (42) display -> . SHOW comment
    (43) display -> . SHOW program
    (44) display -> . SHOW statements
    (45) display -> . SHOW expression_list
    (46) display -> . SHOW assignment
    (47) display -> . SHOW display
    (30) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN
    (28) factor -> . NUMBER
    (29) factor -> . LPAREN expression RPAREN

    LET             shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    FUNCTION        shift and go to state 17
    SHOW            shift and go to state 19
    NUMBER          shift and go to state 20
    LPAREN          shift and go to state 18

    program                        shift and go to state 1
    statements                     shift and go to state 2
    expression                     shift and go to state 3
    statement                      shift and go to state 4
    term                           shift and go to state 5
    assignment                     shift and go to state 6
    conditional                    shift and go to state 7
    loop                           shift and go to state 8
    function                       shift and go to state 9
    display                        shift and go to state 10
    input                          shift and go to state 11
    factor                         shift and go to state 12

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (3) statements -> statements . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (13) conditional -> . IF condition THEN statements else_statements_opt
    (48) loop -> . FOR IDENTIFIER IN list DO statements
    (49) loop -> . WHILE condition DO statements
    (54) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (31) display -> . SHOW expression
    (32) display -> . SHOW STRING_LITERAL
    (33) display -> . SHOW IDENTIFIER
    (34) display -> . SHOW NUMBER
    (35) display -> . SHOW REAL
    (36) display -> . SHOW CHARACTER
    (37) display -> . SHOW list
    (38) display -> . SHOW function
    (39) display -> . SHOW conditional
    (40) display -> . SHOW loop
    (41) display -> . SHOW input
    (42) display -> . SHOW comment
    (43) display -> . SHOW program
    (44) display -> . SHOW statements
    (45) display -> . SHOW expression_list
    (46) display -> . SHOW assignment
    (47) display -> . SHOW display
    (30) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    $end            reduce using rule 1 (program -> statements .)
    LET             shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    FUNCTION        shift and go to state 17
    SHOW            shift and go to state 19

    statement                      shift and go to state 21
    assignment                     shift and go to state 6
    conditional                    shift and go to state 7
    loop                           shift and go to state 8
    function                       shift and go to state 9
    display                        shift and go to state 10
    input                          shift and go to state 11

state 3

    (2) program -> expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    $end            reduce using rule 2 (program -> expression .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23


state 4

    (4) statements -> statement .

    LET             reduce using rule 4 (statements -> statement .)
    IF              reduce using rule 4 (statements -> statement .)
    FOR             reduce using rule 4 (statements -> statement .)
    WHILE           reduce using rule 4 (statements -> statement .)
    FUNCTION        reduce using rule 4 (statements -> statement .)
    SHOW            reduce using rule 4 (statements -> statement .)
    $end            reduce using rule 4 (statements -> statement .)
    ELSE            reduce using rule 4 (statements -> statement .)
    RBRACE          reduce using rule 4 (statements -> statement .)


state 5

    (24) expression -> term .
    (25) term -> term . TIMES factor
    (26) term -> term . DIVIDE factor

    PLUS            reduce using rule 24 (expression -> term .)
    MINUS           reduce using rule 24 (expression -> term .)
    $end            reduce using rule 24 (expression -> term .)
    IS_LESS_THAN    reduce using rule 24 (expression -> term .)
    IS_EQUAL_TO     reduce using rule 24 (expression -> term .)
    IS_GREATER_THAN reduce using rule 24 (expression -> term .)
    IS_NOT_EQUAL_TO reduce using rule 24 (expression -> term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 24 (expression -> term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 24 (expression -> term .)
    RPAREN          reduce using rule 24 (expression -> term .)
    LET             reduce using rule 24 (expression -> term .)
    IF              reduce using rule 24 (expression -> term .)
    FOR             reduce using rule 24 (expression -> term .)
    WHILE           reduce using rule 24 (expression -> term .)
    FUNCTION        reduce using rule 24 (expression -> term .)
    SHOW            reduce using rule 24 (expression -> term .)
    ELSE            reduce using rule 24 (expression -> term .)
    RBRACE          reduce using rule 24 (expression -> term .)
    COMMA           reduce using rule 24 (expression -> term .)
    RBRACKET        reduce using rule 24 (expression -> term .)
    THEN            reduce using rule 24 (expression -> term .)
    DO              reduce using rule 24 (expression -> term .)
    TIMES           shift and go to state 24
    DIVIDE          shift and go to state 25


state 6

    (5) statement -> assignment .

    LET             reduce using rule 5 (statement -> assignment .)
    IF              reduce using rule 5 (statement -> assignment .)
    FOR             reduce using rule 5 (statement -> assignment .)
    WHILE           reduce using rule 5 (statement -> assignment .)
    FUNCTION        reduce using rule 5 (statement -> assignment .)
    SHOW            reduce using rule 5 (statement -> assignment .)
    $end            reduce using rule 5 (statement -> assignment .)
    ELSE            reduce using rule 5 (statement -> assignment .)
    RBRACE          reduce using rule 5 (statement -> assignment .)


state 7

    (6) statement -> conditional .

    LET             reduce using rule 6 (statement -> conditional .)
    IF              reduce using rule 6 (statement -> conditional .)
    FOR             reduce using rule 6 (statement -> conditional .)
    WHILE           reduce using rule 6 (statement -> conditional .)
    FUNCTION        reduce using rule 6 (statement -> conditional .)
    SHOW            reduce using rule 6 (statement -> conditional .)
    $end            reduce using rule 6 (statement -> conditional .)
    ELSE            reduce using rule 6 (statement -> conditional .)
    RBRACE          reduce using rule 6 (statement -> conditional .)


state 8

    (7) statement -> loop .

    LET             reduce using rule 7 (statement -> loop .)
    IF              reduce using rule 7 (statement -> loop .)
    FOR             reduce using rule 7 (statement -> loop .)
    WHILE           reduce using rule 7 (statement -> loop .)
    FUNCTION        reduce using rule 7 (statement -> loop .)
    SHOW            reduce using rule 7 (statement -> loop .)
    $end            reduce using rule 7 (statement -> loop .)
    ELSE            reduce using rule 7 (statement -> loop .)
    RBRACE          reduce using rule 7 (statement -> loop .)


state 9

    (8) statement -> function .

    LET             reduce using rule 8 (statement -> function .)
    IF              reduce using rule 8 (statement -> function .)
    FOR             reduce using rule 8 (statement -> function .)
    WHILE           reduce using rule 8 (statement -> function .)
    FUNCTION        reduce using rule 8 (statement -> function .)
    SHOW            reduce using rule 8 (statement -> function .)
    $end            reduce using rule 8 (statement -> function .)
    ELSE            reduce using rule 8 (statement -> function .)
    RBRACE          reduce using rule 8 (statement -> function .)


state 10

    (9) statement -> display .

    LET             reduce using rule 9 (statement -> display .)
    IF              reduce using rule 9 (statement -> display .)
    FOR             reduce using rule 9 (statement -> display .)
    WHILE           reduce using rule 9 (statement -> display .)
    FUNCTION        reduce using rule 9 (statement -> display .)
    SHOW            reduce using rule 9 (statement -> display .)
    $end            reduce using rule 9 (statement -> display .)
    ELSE            reduce using rule 9 (statement -> display .)
    RBRACE          reduce using rule 9 (statement -> display .)


state 11

    (10) statement -> input .

    LET             reduce using rule 10 (statement -> input .)
    IF              reduce using rule 10 (statement -> input .)
    FOR             reduce using rule 10 (statement -> input .)
    WHILE           reduce using rule 10 (statement -> input .)
    FUNCTION        reduce using rule 10 (statement -> input .)
    SHOW            reduce using rule 10 (statement -> input .)
    $end            reduce using rule 10 (statement -> input .)
    ELSE            reduce using rule 10 (statement -> input .)
    RBRACE          reduce using rule 10 (statement -> input .)


state 12

    (27) term -> factor .

    TIMES           reduce using rule 27 (term -> factor .)
    DIVIDE          reduce using rule 27 (term -> factor .)
    PLUS            reduce using rule 27 (term -> factor .)
    MINUS           reduce using rule 27 (term -> factor .)
    $end            reduce using rule 27 (term -> factor .)
    IS_LESS_THAN    reduce using rule 27 (term -> factor .)
    IS_EQUAL_TO     reduce using rule 27 (term -> factor .)
    IS_GREATER_THAN reduce using rule 27 (term -> factor .)
    IS_NOT_EQUAL_TO reduce using rule 27 (term -> factor .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 27 (term -> factor .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 27 (term -> factor .)
    RPAREN          reduce using rule 27 (term -> factor .)
    LET             reduce using rule 27 (term -> factor .)
    IF              reduce using rule 27 (term -> factor .)
    FOR             reduce using rule 27 (term -> factor .)
    WHILE           reduce using rule 27 (term -> factor .)
    FUNCTION        reduce using rule 27 (term -> factor .)
    SHOW            reduce using rule 27 (term -> factor .)
    ELSE            reduce using rule 27 (term -> factor .)
    RBRACE          reduce using rule 27 (term -> factor .)
    COMMA           reduce using rule 27 (term -> factor .)
    RBRACKET        reduce using rule 27 (term -> factor .)
    THEN            reduce using rule 27 (term -> factor .)
    DO              reduce using rule 27 (term -> factor .)


state 13

    (11) assignment -> LET . IDENTIFIER EQUAL expression
    (30) input -> LET . IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    IDENTIFIER      shift and go to state 26


state 14

    (13) conditional -> IF . condition THEN statements else_statements_opt
    (16) condition -> . expression IS_LESS_THAN expression
    (17) condition -> . expression IS_EQUAL_TO expression
    (18) condition -> . expression IS_GREATER_THAN expression
    (19) condition -> . expression IS_NOT_EQUAL_TO expression
    (20) condition -> . expression GREATER_THAN_OR_EQUAL_TO expression
    (21) condition -> . expression LESS_THAN_OR_EQUAL_TO expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 20
    LPAREN          shift and go to state 18

    condition                      shift and go to state 27
    expression                     shift and go to state 28
    term                           shift and go to state 5
    factor                         shift and go to state 12

state 15

    (48) loop -> FOR . IDENTIFIER IN list DO statements

    IDENTIFIER      shift and go to state 29


state 16

    (49) loop -> WHILE . condition DO statements
    (16) condition -> . expression IS_LESS_THAN expression
    (17) condition -> . expression IS_EQUAL_TO expression
    (18) condition -> . expression IS_GREATER_THAN expression
    (19) condition -> . expression IS_NOT_EQUAL_TO expression
    (20) condition -> . expression GREATER_THAN_OR_EQUAL_TO expression
    (21) condition -> . expression LESS_THAN_OR_EQUAL_TO expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 20
    LPAREN          shift and go to state 18

    condition                      shift and go to state 30
    expression                     shift and go to state 28
    term                           shift and go to state 5
    factor                         shift and go to state 12

state 17

    (54) function -> FUNCTION . IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE

    IDENTIFIER      shift and go to state 31


state 18

    (29) factor -> LPAREN . expression RPAREN
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 20
    LPAREN          shift and go to state 18

    expression                     shift and go to state 32
    term                           shift and go to state 5
    factor                         shift and go to state 12

state 19

    (31) display -> SHOW . expression
    (32) display -> SHOW . STRING_LITERAL
    (33) display -> SHOW . IDENTIFIER
    (34) display -> SHOW . NUMBER
    (35) display -> SHOW . REAL
    (36) display -> SHOW . CHARACTER
    (37) display -> SHOW . list
    (38) display -> SHOW . function
    (39) display -> SHOW . conditional
    (40) display -> SHOW . loop
    (41) display -> SHOW . input
    (42) display -> SHOW . comment
    (43) display -> SHOW . program
    (44) display -> SHOW . statements
    (45) display -> SHOW . expression_list
    (46) display -> SHOW . assignment
    (47) display -> SHOW . display
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (50) list -> . LBRACKET expression_list RBRACKET
    (51) list -> . empty
    (54) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (13) conditional -> . IF condition THEN statements else_statements_opt
    (48) loop -> . FOR IDENTIFIER IN list DO statements
    (49) loop -> . WHILE condition DO statements
    (30) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN
    (12) comment -> . COMMENT
    (1) program -> . statements
    (2) program -> . expression
    (3) statements -> . statements statement
    (4) statements -> . statement
    (52) expression_list -> . expression
    (53) expression_list -> . expression_list COMMA expression
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (31) display -> . SHOW expression
    (32) display -> . SHOW STRING_LITERAL
    (33) display -> . SHOW IDENTIFIER
    (34) display -> . SHOW NUMBER
    (35) display -> . SHOW REAL
    (36) display -> . SHOW CHARACTER
    (37) display -> . SHOW list
    (38) display -> . SHOW function
    (39) display -> . SHOW conditional
    (40) display -> . SHOW loop
    (41) display -> . SHOW input
    (42) display -> . SHOW comment
    (43) display -> . SHOW program
    (44) display -> . SHOW statements
    (45) display -> . SHOW expression_list
    (46) display -> . SHOW assignment
    (47) display -> . SHOW display
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (59) empty -> .
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (28) factor -> . NUMBER
    (29) factor -> . LPAREN expression RPAREN

  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for SHOW resolved as shift
    STRING_LITERAL  shift and go to state 34
    IDENTIFIER      shift and go to state 35
    NUMBER          shift and go to state 36
    REAL            shift and go to state 37
    CHARACTER       shift and go to state 38
    LBRACKET        shift and go to state 50
    FUNCTION        shift and go to state 17
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    LET             shift and go to state 52
    COMMENT         shift and go to state 53
    SHOW            shift and go to state 19
    $end            reduce using rule 59 (empty -> .)
    ELSE            reduce using rule 59 (empty -> .)
    RBRACE          reduce using rule 59 (empty -> .)
    LPAREN          shift and go to state 18

  ! LET             [ reduce using rule 59 (empty -> .) ]
  ! IF              [ reduce using rule 59 (empty -> .) ]
  ! FOR             [ reduce using rule 59 (empty -> .) ]
  ! WHILE           [ reduce using rule 59 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 59 (empty -> .) ]
  ! SHOW            [ reduce using rule 59 (empty -> .) ]

    expression                     shift and go to state 33
    list                           shift and go to state 39
    function                       shift and go to state 40
    conditional                    shift and go to state 41
    loop                           shift and go to state 42
    input                          shift and go to state 43
    comment                        shift and go to state 44
    program                        shift and go to state 45
    statements                     shift and go to state 46
    expression_list                shift and go to state 47
    assignment                     shift and go to state 48
    display                        shift and go to state 49
    term                           shift and go to state 5
    empty                          shift and go to state 51
    statement                      shift and go to state 4
    factor                         shift and go to state 12

state 20

    (28) factor -> NUMBER .

    TIMES           reduce using rule 28 (factor -> NUMBER .)
    DIVIDE          reduce using rule 28 (factor -> NUMBER .)
    PLUS            reduce using rule 28 (factor -> NUMBER .)
    MINUS           reduce using rule 28 (factor -> NUMBER .)
    $end            reduce using rule 28 (factor -> NUMBER .)
    IS_LESS_THAN    reduce using rule 28 (factor -> NUMBER .)
    IS_EQUAL_TO     reduce using rule 28 (factor -> NUMBER .)
    IS_GREATER_THAN reduce using rule 28 (factor -> NUMBER .)
    IS_NOT_EQUAL_TO reduce using rule 28 (factor -> NUMBER .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 28 (factor -> NUMBER .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 28 (factor -> NUMBER .)
    RPAREN          reduce using rule 28 (factor -> NUMBER .)
    LET             reduce using rule 28 (factor -> NUMBER .)
    IF              reduce using rule 28 (factor -> NUMBER .)
    FOR             reduce using rule 28 (factor -> NUMBER .)
    WHILE           reduce using rule 28 (factor -> NUMBER .)
    FUNCTION        reduce using rule 28 (factor -> NUMBER .)
    SHOW            reduce using rule 28 (factor -> NUMBER .)
    ELSE            reduce using rule 28 (factor -> NUMBER .)
    RBRACE          reduce using rule 28 (factor -> NUMBER .)
    COMMA           reduce using rule 28 (factor -> NUMBER .)
    RBRACKET        reduce using rule 28 (factor -> NUMBER .)
    THEN            reduce using rule 28 (factor -> NUMBER .)
    DO              reduce using rule 28 (factor -> NUMBER .)


state 21

    (3) statements -> statements statement .

    LET             reduce using rule 3 (statements -> statements statement .)
    IF              reduce using rule 3 (statements -> statements statement .)
    FOR             reduce using rule 3 (statements -> statements statement .)
    WHILE           reduce using rule 3 (statements -> statements statement .)
    FUNCTION        reduce using rule 3 (statements -> statements statement .)
    SHOW            reduce using rule 3 (statements -> statements statement .)
    $end            reduce using rule 3 (statements -> statements statement .)
    ELSE            reduce using rule 3 (statements -> statements statement .)
    RBRACE          reduce using rule 3 (statements -> statements statement .)


state 22

    (22) expression -> expression PLUS . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 20
    LPAREN          shift and go to state 18

    term                           shift and go to state 54
    factor                         shift and go to state 12

state 23

    (23) expression -> expression MINUS . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 20
    LPAREN          shift and go to state 18

    term                           shift and go to state 55
    factor                         shift and go to state 12

state 24

    (25) term -> term TIMES . factor
    (28) factor -> . NUMBER
    (29) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 20
    LPAREN          shift and go to state 18

    factor                         shift and go to state 56

state 25

    (26) term -> term DIVIDE . factor
    (28) factor -> . NUMBER
    (29) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 20
    LPAREN          shift and go to state 18

    factor                         shift and go to state 57

state 26

    (11) assignment -> LET IDENTIFIER . EQUAL expression
    (30) input -> LET IDENTIFIER . EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    EQUAL           shift and go to state 58


state 27

    (13) conditional -> IF condition . THEN statements else_statements_opt

    THEN            shift and go to state 59


state 28

    (16) condition -> expression . IS_LESS_THAN expression
    (17) condition -> expression . IS_EQUAL_TO expression
    (18) condition -> expression . IS_GREATER_THAN expression
    (19) condition -> expression . IS_NOT_EQUAL_TO expression
    (20) condition -> expression . GREATER_THAN_OR_EQUAL_TO expression
    (21) condition -> expression . LESS_THAN_OR_EQUAL_TO expression
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    IS_LESS_THAN    shift and go to state 60
    IS_EQUAL_TO     shift and go to state 61
    IS_GREATER_THAN shift and go to state 62
    IS_NOT_EQUAL_TO shift and go to state 63
    GREATER_THAN_OR_EQUAL_TO shift and go to state 64
    LESS_THAN_OR_EQUAL_TO shift and go to state 65
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23


state 29

    (48) loop -> FOR IDENTIFIER . IN list DO statements

    IN              shift and go to state 66


state 30

    (49) loop -> WHILE condition . DO statements

    DO              shift and go to state 67


state 31

    (54) function -> FUNCTION IDENTIFIER . LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE

    LPAREN          shift and go to state 68


state 32

    (29) factor -> LPAREN expression . RPAREN
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    RPAREN          shift and go to state 69
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23


state 33

    (31) display -> SHOW expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term
    (2) program -> expression .
    (52) expression_list -> expression .

  ! reduce/reduce conflict for LET resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for IF resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for FOR resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for SHOW resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for $end resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for RBRACE resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for LET resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for IF resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for FOR resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for SHOW resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for $end resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for RBRACE resolved using rule 2 (program -> expression .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    LET             reduce using rule 2 (program -> expression .)
    IF              reduce using rule 2 (program -> expression .)
    FOR             reduce using rule 2 (program -> expression .)
    WHILE           reduce using rule 2 (program -> expression .)
    FUNCTION        reduce using rule 2 (program -> expression .)
    SHOW            reduce using rule 2 (program -> expression .)
    $end            reduce using rule 2 (program -> expression .)
    ELSE            reduce using rule 2 (program -> expression .)
    RBRACE          reduce using rule 2 (program -> expression .)
    COMMA           reduce using rule 52 (expression_list -> expression .)

  ! LET             [ reduce using rule 31 (display -> SHOW expression .) ]
  ! IF              [ reduce using rule 31 (display -> SHOW expression .) ]
  ! FOR             [ reduce using rule 31 (display -> SHOW expression .) ]
  ! WHILE           [ reduce using rule 31 (display -> SHOW expression .) ]
  ! FUNCTION        [ reduce using rule 31 (display -> SHOW expression .) ]
  ! SHOW            [ reduce using rule 31 (display -> SHOW expression .) ]
  ! $end            [ reduce using rule 31 (display -> SHOW expression .) ]
  ! ELSE            [ reduce using rule 31 (display -> SHOW expression .) ]
  ! RBRACE          [ reduce using rule 31 (display -> SHOW expression .) ]
  ! LET             [ reduce using rule 52 (expression_list -> expression .) ]
  ! IF              [ reduce using rule 52 (expression_list -> expression .) ]
  ! FOR             [ reduce using rule 52 (expression_list -> expression .) ]
  ! WHILE           [ reduce using rule 52 (expression_list -> expression .) ]
  ! FUNCTION        [ reduce using rule 52 (expression_list -> expression .) ]
  ! SHOW            [ reduce using rule 52 (expression_list -> expression .) ]
  ! $end            [ reduce using rule 52 (expression_list -> expression .) ]
  ! ELSE            [ reduce using rule 52 (expression_list -> expression .) ]
  ! RBRACE          [ reduce using rule 52 (expression_list -> expression .) ]


state 34

    (32) display -> SHOW STRING_LITERAL .

    LET             reduce using rule 32 (display -> SHOW STRING_LITERAL .)
    IF              reduce using rule 32 (display -> SHOW STRING_LITERAL .)
    FOR             reduce using rule 32 (display -> SHOW STRING_LITERAL .)
    WHILE           reduce using rule 32 (display -> SHOW STRING_LITERAL .)
    FUNCTION        reduce using rule 32 (display -> SHOW STRING_LITERAL .)
    SHOW            reduce using rule 32 (display -> SHOW STRING_LITERAL .)
    $end            reduce using rule 32 (display -> SHOW STRING_LITERAL .)
    ELSE            reduce using rule 32 (display -> SHOW STRING_LITERAL .)
    RBRACE          reduce using rule 32 (display -> SHOW STRING_LITERAL .)


state 35

    (33) display -> SHOW IDENTIFIER .

    LET             reduce using rule 33 (display -> SHOW IDENTIFIER .)
    IF              reduce using rule 33 (display -> SHOW IDENTIFIER .)
    FOR             reduce using rule 33 (display -> SHOW IDENTIFIER .)
    WHILE           reduce using rule 33 (display -> SHOW IDENTIFIER .)
    FUNCTION        reduce using rule 33 (display -> SHOW IDENTIFIER .)
    SHOW            reduce using rule 33 (display -> SHOW IDENTIFIER .)
    $end            reduce using rule 33 (display -> SHOW IDENTIFIER .)
    ELSE            reduce using rule 33 (display -> SHOW IDENTIFIER .)
    RBRACE          reduce using rule 33 (display -> SHOW IDENTIFIER .)


state 36

    (34) display -> SHOW NUMBER .
    (28) factor -> NUMBER .

  ! reduce/reduce conflict for LET resolved using rule 28 (factor -> NUMBER .)
  ! reduce/reduce conflict for IF resolved using rule 28 (factor -> NUMBER .)
  ! reduce/reduce conflict for FOR resolved using rule 28 (factor -> NUMBER .)
  ! reduce/reduce conflict for WHILE resolved using rule 28 (factor -> NUMBER .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 28 (factor -> NUMBER .)
  ! reduce/reduce conflict for SHOW resolved using rule 28 (factor -> NUMBER .)
  ! reduce/reduce conflict for $end resolved using rule 28 (factor -> NUMBER .)
  ! reduce/reduce conflict for ELSE resolved using rule 28 (factor -> NUMBER .)
  ! reduce/reduce conflict for RBRACE resolved using rule 28 (factor -> NUMBER .)
    TIMES           reduce using rule 28 (factor -> NUMBER .)
    DIVIDE          reduce using rule 28 (factor -> NUMBER .)
    PLUS            reduce using rule 28 (factor -> NUMBER .)
    MINUS           reduce using rule 28 (factor -> NUMBER .)
    LET             reduce using rule 28 (factor -> NUMBER .)
    IF              reduce using rule 28 (factor -> NUMBER .)
    FOR             reduce using rule 28 (factor -> NUMBER .)
    WHILE           reduce using rule 28 (factor -> NUMBER .)
    FUNCTION        reduce using rule 28 (factor -> NUMBER .)
    SHOW            reduce using rule 28 (factor -> NUMBER .)
    $end            reduce using rule 28 (factor -> NUMBER .)
    ELSE            reduce using rule 28 (factor -> NUMBER .)
    RBRACE          reduce using rule 28 (factor -> NUMBER .)
    COMMA           reduce using rule 28 (factor -> NUMBER .)

  ! LET             [ reduce using rule 34 (display -> SHOW NUMBER .) ]
  ! IF              [ reduce using rule 34 (display -> SHOW NUMBER .) ]
  ! FOR             [ reduce using rule 34 (display -> SHOW NUMBER .) ]
  ! WHILE           [ reduce using rule 34 (display -> SHOW NUMBER .) ]
  ! FUNCTION        [ reduce using rule 34 (display -> SHOW NUMBER .) ]
  ! SHOW            [ reduce using rule 34 (display -> SHOW NUMBER .) ]
  ! $end            [ reduce using rule 34 (display -> SHOW NUMBER .) ]
  ! ELSE            [ reduce using rule 34 (display -> SHOW NUMBER .) ]
  ! RBRACE          [ reduce using rule 34 (display -> SHOW NUMBER .) ]


state 37

    (35) display -> SHOW REAL .

    LET             reduce using rule 35 (display -> SHOW REAL .)
    IF              reduce using rule 35 (display -> SHOW REAL .)
    FOR             reduce using rule 35 (display -> SHOW REAL .)
    WHILE           reduce using rule 35 (display -> SHOW REAL .)
    FUNCTION        reduce using rule 35 (display -> SHOW REAL .)
    SHOW            reduce using rule 35 (display -> SHOW REAL .)
    $end            reduce using rule 35 (display -> SHOW REAL .)
    ELSE            reduce using rule 35 (display -> SHOW REAL .)
    RBRACE          reduce using rule 35 (display -> SHOW REAL .)


state 38

    (36) display -> SHOW CHARACTER .

    LET             reduce using rule 36 (display -> SHOW CHARACTER .)
    IF              reduce using rule 36 (display -> SHOW CHARACTER .)
    FOR             reduce using rule 36 (display -> SHOW CHARACTER .)
    WHILE           reduce using rule 36 (display -> SHOW CHARACTER .)
    FUNCTION        reduce using rule 36 (display -> SHOW CHARACTER .)
    SHOW            reduce using rule 36 (display -> SHOW CHARACTER .)
    $end            reduce using rule 36 (display -> SHOW CHARACTER .)
    ELSE            reduce using rule 36 (display -> SHOW CHARACTER .)
    RBRACE          reduce using rule 36 (display -> SHOW CHARACTER .)


state 39

    (37) display -> SHOW list .

    LET             reduce using rule 37 (display -> SHOW list .)
    IF              reduce using rule 37 (display -> SHOW list .)
    FOR             reduce using rule 37 (display -> SHOW list .)
    WHILE           reduce using rule 37 (display -> SHOW list .)
    FUNCTION        reduce using rule 37 (display -> SHOW list .)
    SHOW            reduce using rule 37 (display -> SHOW list .)
    $end            reduce using rule 37 (display -> SHOW list .)
    ELSE            reduce using rule 37 (display -> SHOW list .)
    RBRACE          reduce using rule 37 (display -> SHOW list .)


state 40

    (38) display -> SHOW function .
    (8) statement -> function .

  ! reduce/reduce conflict for LET resolved using rule 8 (statement -> function .)
  ! reduce/reduce conflict for IF resolved using rule 8 (statement -> function .)
  ! reduce/reduce conflict for FOR resolved using rule 8 (statement -> function .)
  ! reduce/reduce conflict for WHILE resolved using rule 8 (statement -> function .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 8 (statement -> function .)
  ! reduce/reduce conflict for SHOW resolved using rule 8 (statement -> function .)
  ! reduce/reduce conflict for $end resolved using rule 8 (statement -> function .)
  ! reduce/reduce conflict for ELSE resolved using rule 8 (statement -> function .)
  ! reduce/reduce conflict for RBRACE resolved using rule 8 (statement -> function .)
    LET             reduce using rule 8 (statement -> function .)
    IF              reduce using rule 8 (statement -> function .)
    FOR             reduce using rule 8 (statement -> function .)
    WHILE           reduce using rule 8 (statement -> function .)
    FUNCTION        reduce using rule 8 (statement -> function .)
    SHOW            reduce using rule 8 (statement -> function .)
    $end            reduce using rule 8 (statement -> function .)
    ELSE            reduce using rule 8 (statement -> function .)
    RBRACE          reduce using rule 8 (statement -> function .)

  ! LET             [ reduce using rule 38 (display -> SHOW function .) ]
  ! IF              [ reduce using rule 38 (display -> SHOW function .) ]
  ! FOR             [ reduce using rule 38 (display -> SHOW function .) ]
  ! WHILE           [ reduce using rule 38 (display -> SHOW function .) ]
  ! FUNCTION        [ reduce using rule 38 (display -> SHOW function .) ]
  ! SHOW            [ reduce using rule 38 (display -> SHOW function .) ]
  ! $end            [ reduce using rule 38 (display -> SHOW function .) ]
  ! ELSE            [ reduce using rule 38 (display -> SHOW function .) ]
  ! RBRACE          [ reduce using rule 38 (display -> SHOW function .) ]


state 41

    (39) display -> SHOW conditional .
    (6) statement -> conditional .

  ! reduce/reduce conflict for LET resolved using rule 6 (statement -> conditional .)
  ! reduce/reduce conflict for IF resolved using rule 6 (statement -> conditional .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (statement -> conditional .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (statement -> conditional .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 6 (statement -> conditional .)
  ! reduce/reduce conflict for SHOW resolved using rule 6 (statement -> conditional .)
  ! reduce/reduce conflict for $end resolved using rule 6 (statement -> conditional .)
  ! reduce/reduce conflict for ELSE resolved using rule 6 (statement -> conditional .)
  ! reduce/reduce conflict for RBRACE resolved using rule 6 (statement -> conditional .)
    LET             reduce using rule 6 (statement -> conditional .)
    IF              reduce using rule 6 (statement -> conditional .)
    FOR             reduce using rule 6 (statement -> conditional .)
    WHILE           reduce using rule 6 (statement -> conditional .)
    FUNCTION        reduce using rule 6 (statement -> conditional .)
    SHOW            reduce using rule 6 (statement -> conditional .)
    $end            reduce using rule 6 (statement -> conditional .)
    ELSE            reduce using rule 6 (statement -> conditional .)
    RBRACE          reduce using rule 6 (statement -> conditional .)

  ! LET             [ reduce using rule 39 (display -> SHOW conditional .) ]
  ! IF              [ reduce using rule 39 (display -> SHOW conditional .) ]
  ! FOR             [ reduce using rule 39 (display -> SHOW conditional .) ]
  ! WHILE           [ reduce using rule 39 (display -> SHOW conditional .) ]
  ! FUNCTION        [ reduce using rule 39 (display -> SHOW conditional .) ]
  ! SHOW            [ reduce using rule 39 (display -> SHOW conditional .) ]
  ! $end            [ reduce using rule 39 (display -> SHOW conditional .) ]
  ! ELSE            [ reduce using rule 39 (display -> SHOW conditional .) ]
  ! RBRACE          [ reduce using rule 39 (display -> SHOW conditional .) ]


state 42

    (40) display -> SHOW loop .
    (7) statement -> loop .

  ! reduce/reduce conflict for LET resolved using rule 7 (statement -> loop .)
  ! reduce/reduce conflict for IF resolved using rule 7 (statement -> loop .)
  ! reduce/reduce conflict for FOR resolved using rule 7 (statement -> loop .)
  ! reduce/reduce conflict for WHILE resolved using rule 7 (statement -> loop .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 7 (statement -> loop .)
  ! reduce/reduce conflict for SHOW resolved using rule 7 (statement -> loop .)
  ! reduce/reduce conflict for $end resolved using rule 7 (statement -> loop .)
  ! reduce/reduce conflict for ELSE resolved using rule 7 (statement -> loop .)
  ! reduce/reduce conflict for RBRACE resolved using rule 7 (statement -> loop .)
    LET             reduce using rule 7 (statement -> loop .)
    IF              reduce using rule 7 (statement -> loop .)
    FOR             reduce using rule 7 (statement -> loop .)
    WHILE           reduce using rule 7 (statement -> loop .)
    FUNCTION        reduce using rule 7 (statement -> loop .)
    SHOW            reduce using rule 7 (statement -> loop .)
    $end            reduce using rule 7 (statement -> loop .)
    ELSE            reduce using rule 7 (statement -> loop .)
    RBRACE          reduce using rule 7 (statement -> loop .)

  ! LET             [ reduce using rule 40 (display -> SHOW loop .) ]
  ! IF              [ reduce using rule 40 (display -> SHOW loop .) ]
  ! FOR             [ reduce using rule 40 (display -> SHOW loop .) ]
  ! WHILE           [ reduce using rule 40 (display -> SHOW loop .) ]
  ! FUNCTION        [ reduce using rule 40 (display -> SHOW loop .) ]
  ! SHOW            [ reduce using rule 40 (display -> SHOW loop .) ]
  ! $end            [ reduce using rule 40 (display -> SHOW loop .) ]
  ! ELSE            [ reduce using rule 40 (display -> SHOW loop .) ]
  ! RBRACE          [ reduce using rule 40 (display -> SHOW loop .) ]


state 43

    (41) display -> SHOW input .
    (10) statement -> input .

  ! reduce/reduce conflict for LET resolved using rule 10 (statement -> input .)
  ! reduce/reduce conflict for IF resolved using rule 10 (statement -> input .)
  ! reduce/reduce conflict for FOR resolved using rule 10 (statement -> input .)
  ! reduce/reduce conflict for WHILE resolved using rule 10 (statement -> input .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 10 (statement -> input .)
  ! reduce/reduce conflict for SHOW resolved using rule 10 (statement -> input .)
  ! reduce/reduce conflict for $end resolved using rule 10 (statement -> input .)
  ! reduce/reduce conflict for ELSE resolved using rule 10 (statement -> input .)
  ! reduce/reduce conflict for RBRACE resolved using rule 10 (statement -> input .)
    LET             reduce using rule 10 (statement -> input .)
    IF              reduce using rule 10 (statement -> input .)
    FOR             reduce using rule 10 (statement -> input .)
    WHILE           reduce using rule 10 (statement -> input .)
    FUNCTION        reduce using rule 10 (statement -> input .)
    SHOW            reduce using rule 10 (statement -> input .)
    $end            reduce using rule 10 (statement -> input .)
    ELSE            reduce using rule 10 (statement -> input .)
    RBRACE          reduce using rule 10 (statement -> input .)

  ! LET             [ reduce using rule 41 (display -> SHOW input .) ]
  ! IF              [ reduce using rule 41 (display -> SHOW input .) ]
  ! FOR             [ reduce using rule 41 (display -> SHOW input .) ]
  ! WHILE           [ reduce using rule 41 (display -> SHOW input .) ]
  ! FUNCTION        [ reduce using rule 41 (display -> SHOW input .) ]
  ! SHOW            [ reduce using rule 41 (display -> SHOW input .) ]
  ! $end            [ reduce using rule 41 (display -> SHOW input .) ]
  ! ELSE            [ reduce using rule 41 (display -> SHOW input .) ]
  ! RBRACE          [ reduce using rule 41 (display -> SHOW input .) ]


state 44

    (42) display -> SHOW comment .

    LET             reduce using rule 42 (display -> SHOW comment .)
    IF              reduce using rule 42 (display -> SHOW comment .)
    FOR             reduce using rule 42 (display -> SHOW comment .)
    WHILE           reduce using rule 42 (display -> SHOW comment .)
    FUNCTION        reduce using rule 42 (display -> SHOW comment .)
    SHOW            reduce using rule 42 (display -> SHOW comment .)
    $end            reduce using rule 42 (display -> SHOW comment .)
    ELSE            reduce using rule 42 (display -> SHOW comment .)
    RBRACE          reduce using rule 42 (display -> SHOW comment .)


state 45

    (43) display -> SHOW program .

    LET             reduce using rule 43 (display -> SHOW program .)
    IF              reduce using rule 43 (display -> SHOW program .)
    FOR             reduce using rule 43 (display -> SHOW program .)
    WHILE           reduce using rule 43 (display -> SHOW program .)
    FUNCTION        reduce using rule 43 (display -> SHOW program .)
    SHOW            reduce using rule 43 (display -> SHOW program .)
    $end            reduce using rule 43 (display -> SHOW program .)
    ELSE            reduce using rule 43 (display -> SHOW program .)
    RBRACE          reduce using rule 43 (display -> SHOW program .)


state 46

    (44) display -> SHOW statements .
    (1) program -> statements .
    (3) statements -> statements . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (13) conditional -> . IF condition THEN statements else_statements_opt
    (48) loop -> . FOR IDENTIFIER IN list DO statements
    (49) loop -> . WHILE condition DO statements
    (54) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (31) display -> . SHOW expression
    (32) display -> . SHOW STRING_LITERAL
    (33) display -> . SHOW IDENTIFIER
    (34) display -> . SHOW NUMBER
    (35) display -> . SHOW REAL
    (36) display -> . SHOW CHARACTER
    (37) display -> . SHOW list
    (38) display -> . SHOW function
    (39) display -> . SHOW conditional
    (40) display -> . SHOW loop
    (41) display -> . SHOW input
    (42) display -> . SHOW comment
    (43) display -> . SHOW program
    (44) display -> . SHOW statements
    (45) display -> . SHOW expression_list
    (46) display -> . SHOW assignment
    (47) display -> . SHOW display
    (30) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

  ! reduce/reduce conflict for LET resolved using rule 1 (program -> statements .)
  ! reduce/reduce conflict for IF resolved using rule 1 (program -> statements .)
  ! reduce/reduce conflict for FOR resolved using rule 1 (program -> statements .)
  ! reduce/reduce conflict for WHILE resolved using rule 1 (program -> statements .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 1 (program -> statements .)
  ! reduce/reduce conflict for SHOW resolved using rule 1 (program -> statements .)
  ! reduce/reduce conflict for $end resolved using rule 1 (program -> statements .)
  ! reduce/reduce conflict for ELSE resolved using rule 1 (program -> statements .)
  ! reduce/reduce conflict for RBRACE resolved using rule 1 (program -> statements .)
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for SHOW resolved as shift
    $end            reduce using rule 1 (program -> statements .)
    ELSE            reduce using rule 1 (program -> statements .)
    RBRACE          reduce using rule 1 (program -> statements .)
    LET             shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    FUNCTION        shift and go to state 17
    SHOW            shift and go to state 19

  ! LET             [ reduce using rule 44 (display -> SHOW statements .) ]
  ! IF              [ reduce using rule 44 (display -> SHOW statements .) ]
  ! FOR             [ reduce using rule 44 (display -> SHOW statements .) ]
  ! WHILE           [ reduce using rule 44 (display -> SHOW statements .) ]
  ! FUNCTION        [ reduce using rule 44 (display -> SHOW statements .) ]
  ! SHOW            [ reduce using rule 44 (display -> SHOW statements .) ]
  ! $end            [ reduce using rule 44 (display -> SHOW statements .) ]
  ! ELSE            [ reduce using rule 44 (display -> SHOW statements .) ]
  ! RBRACE          [ reduce using rule 44 (display -> SHOW statements .) ]
  ! LET             [ reduce using rule 1 (program -> statements .) ]
  ! IF              [ reduce using rule 1 (program -> statements .) ]
  ! FOR             [ reduce using rule 1 (program -> statements .) ]
  ! WHILE           [ reduce using rule 1 (program -> statements .) ]
  ! FUNCTION        [ reduce using rule 1 (program -> statements .) ]
  ! SHOW            [ reduce using rule 1 (program -> statements .) ]

    statement                      shift and go to state 21
    assignment                     shift and go to state 6
    conditional                    shift and go to state 7
    loop                           shift and go to state 8
    function                       shift and go to state 9
    display                        shift and go to state 10
    input                          shift and go to state 11

state 47

    (45) display -> SHOW expression_list .
    (53) expression_list -> expression_list . COMMA expression

    LET             reduce using rule 45 (display -> SHOW expression_list .)
    IF              reduce using rule 45 (display -> SHOW expression_list .)
    FOR             reduce using rule 45 (display -> SHOW expression_list .)
    WHILE           reduce using rule 45 (display -> SHOW expression_list .)
    FUNCTION        reduce using rule 45 (display -> SHOW expression_list .)
    SHOW            reduce using rule 45 (display -> SHOW expression_list .)
    $end            reduce using rule 45 (display -> SHOW expression_list .)
    ELSE            reduce using rule 45 (display -> SHOW expression_list .)
    RBRACE          reduce using rule 45 (display -> SHOW expression_list .)
    COMMA           shift and go to state 70


state 48

    (46) display -> SHOW assignment .
    (5) statement -> assignment .

  ! reduce/reduce conflict for LET resolved using rule 5 (statement -> assignment .)
  ! reduce/reduce conflict for IF resolved using rule 5 (statement -> assignment .)
  ! reduce/reduce conflict for FOR resolved using rule 5 (statement -> assignment .)
  ! reduce/reduce conflict for WHILE resolved using rule 5 (statement -> assignment .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 5 (statement -> assignment .)
  ! reduce/reduce conflict for SHOW resolved using rule 5 (statement -> assignment .)
  ! reduce/reduce conflict for $end resolved using rule 5 (statement -> assignment .)
  ! reduce/reduce conflict for ELSE resolved using rule 5 (statement -> assignment .)
  ! reduce/reduce conflict for RBRACE resolved using rule 5 (statement -> assignment .)
    LET             reduce using rule 5 (statement -> assignment .)
    IF              reduce using rule 5 (statement -> assignment .)
    FOR             reduce using rule 5 (statement -> assignment .)
    WHILE           reduce using rule 5 (statement -> assignment .)
    FUNCTION        reduce using rule 5 (statement -> assignment .)
    SHOW            reduce using rule 5 (statement -> assignment .)
    $end            reduce using rule 5 (statement -> assignment .)
    ELSE            reduce using rule 5 (statement -> assignment .)
    RBRACE          reduce using rule 5 (statement -> assignment .)

  ! LET             [ reduce using rule 46 (display -> SHOW assignment .) ]
  ! IF              [ reduce using rule 46 (display -> SHOW assignment .) ]
  ! FOR             [ reduce using rule 46 (display -> SHOW assignment .) ]
  ! WHILE           [ reduce using rule 46 (display -> SHOW assignment .) ]
  ! FUNCTION        [ reduce using rule 46 (display -> SHOW assignment .) ]
  ! SHOW            [ reduce using rule 46 (display -> SHOW assignment .) ]
  ! $end            [ reduce using rule 46 (display -> SHOW assignment .) ]
  ! ELSE            [ reduce using rule 46 (display -> SHOW assignment .) ]
  ! RBRACE          [ reduce using rule 46 (display -> SHOW assignment .) ]


state 49

    (47) display -> SHOW display .
    (9) statement -> display .

  ! reduce/reduce conflict for LET resolved using rule 9 (statement -> display .)
  ! reduce/reduce conflict for IF resolved using rule 9 (statement -> display .)
  ! reduce/reduce conflict for FOR resolved using rule 9 (statement -> display .)
  ! reduce/reduce conflict for WHILE resolved using rule 9 (statement -> display .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 9 (statement -> display .)
  ! reduce/reduce conflict for SHOW resolved using rule 9 (statement -> display .)
  ! reduce/reduce conflict for $end resolved using rule 9 (statement -> display .)
  ! reduce/reduce conflict for ELSE resolved using rule 9 (statement -> display .)
  ! reduce/reduce conflict for RBRACE resolved using rule 9 (statement -> display .)
    LET             reduce using rule 9 (statement -> display .)
    IF              reduce using rule 9 (statement -> display .)
    FOR             reduce using rule 9 (statement -> display .)
    WHILE           reduce using rule 9 (statement -> display .)
    FUNCTION        reduce using rule 9 (statement -> display .)
    SHOW            reduce using rule 9 (statement -> display .)
    $end            reduce using rule 9 (statement -> display .)
    ELSE            reduce using rule 9 (statement -> display .)
    RBRACE          reduce using rule 9 (statement -> display .)

  ! LET             [ reduce using rule 47 (display -> SHOW display .) ]
  ! IF              [ reduce using rule 47 (display -> SHOW display .) ]
  ! FOR             [ reduce using rule 47 (display -> SHOW display .) ]
  ! WHILE           [ reduce using rule 47 (display -> SHOW display .) ]
  ! FUNCTION        [ reduce using rule 47 (display -> SHOW display .) ]
  ! SHOW            [ reduce using rule 47 (display -> SHOW display .) ]
  ! $end            [ reduce using rule 47 (display -> SHOW display .) ]
  ! ELSE            [ reduce using rule 47 (display -> SHOW display .) ]
  ! RBRACE          [ reduce using rule 47 (display -> SHOW display .) ]


state 50

    (50) list -> LBRACKET . expression_list RBRACKET
    (52) expression_list -> . expression
    (53) expression_list -> . expression_list COMMA expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 20
    LPAREN          shift and go to state 18

    expression_list                shift and go to state 71
    expression                     shift and go to state 72
    term                           shift and go to state 5
    factor                         shift and go to state 12

state 51

    (51) list -> empty .

    LET             reduce using rule 51 (list -> empty .)
    IF              reduce using rule 51 (list -> empty .)
    FOR             reduce using rule 51 (list -> empty .)
    WHILE           reduce using rule 51 (list -> empty .)
    FUNCTION        reduce using rule 51 (list -> empty .)
    SHOW            reduce using rule 51 (list -> empty .)
    $end            reduce using rule 51 (list -> empty .)
    ELSE            reduce using rule 51 (list -> empty .)
    RBRACE          reduce using rule 51 (list -> empty .)
    DO              reduce using rule 51 (list -> empty .)


state 52

    (30) input -> LET . IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN
    (11) assignment -> LET . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 73


state 53

    (12) comment -> COMMENT .

    LET             reduce using rule 12 (comment -> COMMENT .)
    IF              reduce using rule 12 (comment -> COMMENT .)
    FOR             reduce using rule 12 (comment -> COMMENT .)
    WHILE           reduce using rule 12 (comment -> COMMENT .)
    FUNCTION        reduce using rule 12 (comment -> COMMENT .)
    SHOW            reduce using rule 12 (comment -> COMMENT .)
    $end            reduce using rule 12 (comment -> COMMENT .)
    ELSE            reduce using rule 12 (comment -> COMMENT .)
    RBRACE          reduce using rule 12 (comment -> COMMENT .)


state 54

    (22) expression -> expression PLUS term .
    (25) term -> term . TIMES factor
    (26) term -> term . DIVIDE factor

    PLUS            reduce using rule 22 (expression -> expression PLUS term .)
    MINUS           reduce using rule 22 (expression -> expression PLUS term .)
    $end            reduce using rule 22 (expression -> expression PLUS term .)
    IS_LESS_THAN    reduce using rule 22 (expression -> expression PLUS term .)
    IS_EQUAL_TO     reduce using rule 22 (expression -> expression PLUS term .)
    IS_GREATER_THAN reduce using rule 22 (expression -> expression PLUS term .)
    IS_NOT_EQUAL_TO reduce using rule 22 (expression -> expression PLUS term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 22 (expression -> expression PLUS term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 22 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 22 (expression -> expression PLUS term .)
    LET             reduce using rule 22 (expression -> expression PLUS term .)
    IF              reduce using rule 22 (expression -> expression PLUS term .)
    FOR             reduce using rule 22 (expression -> expression PLUS term .)
    WHILE           reduce using rule 22 (expression -> expression PLUS term .)
    FUNCTION        reduce using rule 22 (expression -> expression PLUS term .)
    SHOW            reduce using rule 22 (expression -> expression PLUS term .)
    ELSE            reduce using rule 22 (expression -> expression PLUS term .)
    RBRACE          reduce using rule 22 (expression -> expression PLUS term .)
    COMMA           reduce using rule 22 (expression -> expression PLUS term .)
    RBRACKET        reduce using rule 22 (expression -> expression PLUS term .)
    THEN            reduce using rule 22 (expression -> expression PLUS term .)
    DO              reduce using rule 22 (expression -> expression PLUS term .)
    TIMES           shift and go to state 24
    DIVIDE          shift and go to state 25


state 55

    (23) expression -> expression MINUS term .
    (25) term -> term . TIMES factor
    (26) term -> term . DIVIDE factor

    PLUS            reduce using rule 23 (expression -> expression MINUS term .)
    MINUS           reduce using rule 23 (expression -> expression MINUS term .)
    $end            reduce using rule 23 (expression -> expression MINUS term .)
    IS_LESS_THAN    reduce using rule 23 (expression -> expression MINUS term .)
    IS_EQUAL_TO     reduce using rule 23 (expression -> expression MINUS term .)
    IS_GREATER_THAN reduce using rule 23 (expression -> expression MINUS term .)
    IS_NOT_EQUAL_TO reduce using rule 23 (expression -> expression MINUS term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 23 (expression -> expression MINUS term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 23 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 23 (expression -> expression MINUS term .)
    LET             reduce using rule 23 (expression -> expression MINUS term .)
    IF              reduce using rule 23 (expression -> expression MINUS term .)
    FOR             reduce using rule 23 (expression -> expression MINUS term .)
    WHILE           reduce using rule 23 (expression -> expression MINUS term .)
    FUNCTION        reduce using rule 23 (expression -> expression MINUS term .)
    SHOW            reduce using rule 23 (expression -> expression MINUS term .)
    ELSE            reduce using rule 23 (expression -> expression MINUS term .)
    RBRACE          reduce using rule 23 (expression -> expression MINUS term .)
    COMMA           reduce using rule 23 (expression -> expression MINUS term .)
    RBRACKET        reduce using rule 23 (expression -> expression MINUS term .)
    THEN            reduce using rule 23 (expression -> expression MINUS term .)
    DO              reduce using rule 23 (expression -> expression MINUS term .)
    TIMES           shift and go to state 24
    DIVIDE          shift and go to state 25


state 56

    (25) term -> term TIMES factor .

    TIMES           reduce using rule 25 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 25 (term -> term TIMES factor .)
    PLUS            reduce using rule 25 (term -> term TIMES factor .)
    MINUS           reduce using rule 25 (term -> term TIMES factor .)
    $end            reduce using rule 25 (term -> term TIMES factor .)
    IS_LESS_THAN    reduce using rule 25 (term -> term TIMES factor .)
    IS_EQUAL_TO     reduce using rule 25 (term -> term TIMES factor .)
    IS_GREATER_THAN reduce using rule 25 (term -> term TIMES factor .)
    IS_NOT_EQUAL_TO reduce using rule 25 (term -> term TIMES factor .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 25 (term -> term TIMES factor .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 25 (term -> term TIMES factor .)
    RPAREN          reduce using rule 25 (term -> term TIMES factor .)
    LET             reduce using rule 25 (term -> term TIMES factor .)
    IF              reduce using rule 25 (term -> term TIMES factor .)
    FOR             reduce using rule 25 (term -> term TIMES factor .)
    WHILE           reduce using rule 25 (term -> term TIMES factor .)
    FUNCTION        reduce using rule 25 (term -> term TIMES factor .)
    SHOW            reduce using rule 25 (term -> term TIMES factor .)
    ELSE            reduce using rule 25 (term -> term TIMES factor .)
    RBRACE          reduce using rule 25 (term -> term TIMES factor .)
    COMMA           reduce using rule 25 (term -> term TIMES factor .)
    RBRACKET        reduce using rule 25 (term -> term TIMES factor .)
    THEN            reduce using rule 25 (term -> term TIMES factor .)
    DO              reduce using rule 25 (term -> term TIMES factor .)


state 57

    (26) term -> term DIVIDE factor .

    TIMES           reduce using rule 26 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 26 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 26 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 26 (term -> term DIVIDE factor .)
    $end            reduce using rule 26 (term -> term DIVIDE factor .)
    IS_LESS_THAN    reduce using rule 26 (term -> term DIVIDE factor .)
    IS_EQUAL_TO     reduce using rule 26 (term -> term DIVIDE factor .)
    IS_GREATER_THAN reduce using rule 26 (term -> term DIVIDE factor .)
    IS_NOT_EQUAL_TO reduce using rule 26 (term -> term DIVIDE factor .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 26 (term -> term DIVIDE factor .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 26 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 26 (term -> term DIVIDE factor .)
    LET             reduce using rule 26 (term -> term DIVIDE factor .)
    IF              reduce using rule 26 (term -> term DIVIDE factor .)
    FOR             reduce using rule 26 (term -> term DIVIDE factor .)
    WHILE           reduce using rule 26 (term -> term DIVIDE factor .)
    FUNCTION        reduce using rule 26 (term -> term DIVIDE factor .)
    SHOW            reduce using rule 26 (term -> term DIVIDE factor .)
    ELSE            reduce using rule 26 (term -> term DIVIDE factor .)
    RBRACE          reduce using rule 26 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 26 (term -> term DIVIDE factor .)
    RBRACKET        reduce using rule 26 (term -> term DIVIDE factor .)
    THEN            reduce using rule 26 (term -> term DIVIDE factor .)
    DO              reduce using rule 26 (term -> term DIVIDE factor .)


state 58

    (11) assignment -> LET IDENTIFIER EQUAL . expression
    (30) input -> LET IDENTIFIER EQUAL . SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . LPAREN expression RPAREN

    SHOW            shift and go to state 75
    NUMBER          shift and go to state 20
    LPAREN          shift and go to state 18

    expression                     shift and go to state 74
    term                           shift and go to state 5
    factor                         shift and go to state 12

state 59

    (13) conditional -> IF condition THEN . statements else_statements_opt
    (3) statements -> . statements statement
    (4) statements -> . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (13) conditional -> . IF condition THEN statements else_statements_opt
    (48) loop -> . FOR IDENTIFIER IN list DO statements
    (49) loop -> . WHILE condition DO statements
    (54) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (31) display -> . SHOW expression
    (32) display -> . SHOW STRING_LITERAL
    (33) display -> . SHOW IDENTIFIER
    (34) display -> . SHOW NUMBER
    (35) display -> . SHOW REAL
    (36) display -> . SHOW CHARACTER
    (37) display -> . SHOW list
    (38) display -> . SHOW function
    (39) display -> . SHOW conditional
    (40) display -> . SHOW loop
    (41) display -> . SHOW input
    (42) display -> . SHOW comment
    (43) display -> . SHOW program
    (44) display -> . SHOW statements
    (45) display -> . SHOW expression_list
    (46) display -> . SHOW assignment
    (47) display -> . SHOW display
    (30) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    LET             shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    FUNCTION        shift and go to state 17
    SHOW            shift and go to state 19

    statements                     shift and go to state 76
    statement                      shift and go to state 4
    assignment                     shift and go to state 6
    conditional                    shift and go to state 7
    loop                           shift and go to state 8
    function                       shift and go to state 9
    display                        shift and go to state 10
    input                          shift and go to state 11

state 60

    (16) condition -> expression IS_LESS_THAN . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 20
    LPAREN          shift and go to state 18

    expression                     shift and go to state 77
    term                           shift and go to state 5
    factor                         shift and go to state 12

state 61

    (17) condition -> expression IS_EQUAL_TO . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 20
    LPAREN          shift and go to state 18

    expression                     shift and go to state 78
    term                           shift and go to state 5
    factor                         shift and go to state 12

state 62

    (18) condition -> expression IS_GREATER_THAN . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 20
    LPAREN          shift and go to state 18

    expression                     shift and go to state 79
    term                           shift and go to state 5
    factor                         shift and go to state 12

state 63

    (19) condition -> expression IS_NOT_EQUAL_TO . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 20
    LPAREN          shift and go to state 18

    expression                     shift and go to state 80
    term                           shift and go to state 5
    factor                         shift and go to state 12

state 64

    (20) condition -> expression GREATER_THAN_OR_EQUAL_TO . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 20
    LPAREN          shift and go to state 18

    expression                     shift and go to state 81
    term                           shift and go to state 5
    factor                         shift and go to state 12

state 65

    (21) condition -> expression LESS_THAN_OR_EQUAL_TO . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 20
    LPAREN          shift and go to state 18

    expression                     shift and go to state 82
    term                           shift and go to state 5
    factor                         shift and go to state 12

state 66

    (48) loop -> FOR IDENTIFIER IN . list DO statements
    (50) list -> . LBRACKET expression_list RBRACKET
    (51) list -> . empty
    (59) empty -> .

    LBRACKET        shift and go to state 50
    DO              reduce using rule 59 (empty -> .)

    list                           shift and go to state 83
    empty                          shift and go to state 51

state 67

    (49) loop -> WHILE condition DO . statements
    (3) statements -> . statements statement
    (4) statements -> . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (13) conditional -> . IF condition THEN statements else_statements_opt
    (48) loop -> . FOR IDENTIFIER IN list DO statements
    (49) loop -> . WHILE condition DO statements
    (54) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (31) display -> . SHOW expression
    (32) display -> . SHOW STRING_LITERAL
    (33) display -> . SHOW IDENTIFIER
    (34) display -> . SHOW NUMBER
    (35) display -> . SHOW REAL
    (36) display -> . SHOW CHARACTER
    (37) display -> . SHOW list
    (38) display -> . SHOW function
    (39) display -> . SHOW conditional
    (40) display -> . SHOW loop
    (41) display -> . SHOW input
    (42) display -> . SHOW comment
    (43) display -> . SHOW program
    (44) display -> . SHOW statements
    (45) display -> . SHOW expression_list
    (46) display -> . SHOW assignment
    (47) display -> . SHOW display
    (30) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    LET             shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    FUNCTION        shift and go to state 17
    SHOW            shift and go to state 19

    statements                     shift and go to state 84
    statement                      shift and go to state 4
    assignment                     shift and go to state 6
    conditional                    shift and go to state 7
    loop                           shift and go to state 8
    function                       shift and go to state 9
    display                        shift and go to state 10
    input                          shift and go to state 11

state 68

    (54) function -> FUNCTION IDENTIFIER LPAREN . parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (55) parameters -> . IDENTIFIER
    (56) parameters -> . parameters COMMA IDENTIFIER

    IDENTIFIER      shift and go to state 85

    parameters                     shift and go to state 86

state 69

    (29) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 29 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 29 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 29 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 29 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 29 (factor -> LPAREN expression RPAREN .)
    IS_LESS_THAN    reduce using rule 29 (factor -> LPAREN expression RPAREN .)
    IS_EQUAL_TO     reduce using rule 29 (factor -> LPAREN expression RPAREN .)
    IS_GREATER_THAN reduce using rule 29 (factor -> LPAREN expression RPAREN .)
    IS_NOT_EQUAL_TO reduce using rule 29 (factor -> LPAREN expression RPAREN .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 29 (factor -> LPAREN expression RPAREN .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 29 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 29 (factor -> LPAREN expression RPAREN .)
    LET             reduce using rule 29 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 29 (factor -> LPAREN expression RPAREN .)
    FOR             reduce using rule 29 (factor -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 29 (factor -> LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 29 (factor -> LPAREN expression RPAREN .)
    SHOW            reduce using rule 29 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 29 (factor -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 29 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 29 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 29 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 29 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 29 (factor -> LPAREN expression RPAREN .)


state 70

    (53) expression_list -> expression_list COMMA . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 20
    LPAREN          shift and go to state 18

    expression                     shift and go to state 87
    term                           shift and go to state 5
    factor                         shift and go to state 12

state 71

    (50) list -> LBRACKET expression_list . RBRACKET
    (53) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 88
    COMMA           shift and go to state 70


state 72

    (52) expression_list -> expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    RBRACKET        reduce using rule 52 (expression_list -> expression .)
    COMMA           reduce using rule 52 (expression_list -> expression .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23


state 73

    (30) input -> LET IDENTIFIER . EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN
    (11) assignment -> LET IDENTIFIER . EQUAL expression

    EQUAL           shift and go to state 89


state 74

    (11) assignment -> LET IDENTIFIER EQUAL expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    LET             reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    IF              reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    FOR             reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    WHILE           reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    FUNCTION        reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    SHOW            reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    $end            reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    ELSE            reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    RBRACE          reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23


state 75

    (30) input -> LET IDENTIFIER EQUAL SHOW . IDENTIFIER LPAREN STRING_LITERAL RPAREN

    IDENTIFIER      shift and go to state 90


state 76

    (13) conditional -> IF condition THEN statements . else_statements_opt
    (3) statements -> statements . statement
    (14) else_statements_opt -> . ELSE statements
    (15) else_statements_opt -> . empty
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (59) empty -> .
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (13) conditional -> . IF condition THEN statements else_statements_opt
    (48) loop -> . FOR IDENTIFIER IN list DO statements
    (49) loop -> . WHILE condition DO statements
    (54) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (31) display -> . SHOW expression
    (32) display -> . SHOW STRING_LITERAL
    (33) display -> . SHOW IDENTIFIER
    (34) display -> . SHOW NUMBER
    (35) display -> . SHOW REAL
    (36) display -> . SHOW CHARACTER
    (37) display -> . SHOW list
    (38) display -> . SHOW function
    (39) display -> . SHOW conditional
    (40) display -> . SHOW loop
    (41) display -> . SHOW input
    (42) display -> . SHOW comment
    (43) display -> . SHOW program
    (44) display -> . SHOW statements
    (45) display -> . SHOW expression_list
    (46) display -> . SHOW assignment
    (47) display -> . SHOW display
    (30) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for SHOW resolved as shift
    ELSE            shift and go to state 92
    $end            reduce using rule 59 (empty -> .)
    RBRACE          reduce using rule 59 (empty -> .)
    LET             shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    FUNCTION        shift and go to state 17
    SHOW            shift and go to state 19

  ! LET             [ reduce using rule 59 (empty -> .) ]
  ! IF              [ reduce using rule 59 (empty -> .) ]
  ! FOR             [ reduce using rule 59 (empty -> .) ]
  ! WHILE           [ reduce using rule 59 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 59 (empty -> .) ]
  ! SHOW            [ reduce using rule 59 (empty -> .) ]
  ! ELSE            [ reduce using rule 59 (empty -> .) ]

    else_statements_opt            shift and go to state 91
    statement                      shift and go to state 21
    empty                          shift and go to state 93
    assignment                     shift and go to state 6
    conditional                    shift and go to state 7
    loop                           shift and go to state 8
    function                       shift and go to state 9
    display                        shift and go to state 10
    input                          shift and go to state 11

state 77

    (16) condition -> expression IS_LESS_THAN expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    THEN            reduce using rule 16 (condition -> expression IS_LESS_THAN expression .)
    DO              reduce using rule 16 (condition -> expression IS_LESS_THAN expression .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23


state 78

    (17) condition -> expression IS_EQUAL_TO expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    THEN            reduce using rule 17 (condition -> expression IS_EQUAL_TO expression .)
    DO              reduce using rule 17 (condition -> expression IS_EQUAL_TO expression .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23


state 79

    (18) condition -> expression IS_GREATER_THAN expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    THEN            reduce using rule 18 (condition -> expression IS_GREATER_THAN expression .)
    DO              reduce using rule 18 (condition -> expression IS_GREATER_THAN expression .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23


state 80

    (19) condition -> expression IS_NOT_EQUAL_TO expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    THEN            reduce using rule 19 (condition -> expression IS_NOT_EQUAL_TO expression .)
    DO              reduce using rule 19 (condition -> expression IS_NOT_EQUAL_TO expression .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23


state 81

    (20) condition -> expression GREATER_THAN_OR_EQUAL_TO expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    THEN            reduce using rule 20 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    DO              reduce using rule 20 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23


state 82

    (21) condition -> expression LESS_THAN_OR_EQUAL_TO expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    THEN            reduce using rule 21 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    DO              reduce using rule 21 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23


state 83

    (48) loop -> FOR IDENTIFIER IN list . DO statements

    DO              shift and go to state 94


state 84

    (49) loop -> WHILE condition DO statements .
    (3) statements -> statements . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (13) conditional -> . IF condition THEN statements else_statements_opt
    (48) loop -> . FOR IDENTIFIER IN list DO statements
    (49) loop -> . WHILE condition DO statements
    (54) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (31) display -> . SHOW expression
    (32) display -> . SHOW STRING_LITERAL
    (33) display -> . SHOW IDENTIFIER
    (34) display -> . SHOW NUMBER
    (35) display -> . SHOW REAL
    (36) display -> . SHOW CHARACTER
    (37) display -> . SHOW list
    (38) display -> . SHOW function
    (39) display -> . SHOW conditional
    (40) display -> . SHOW loop
    (41) display -> . SHOW input
    (42) display -> . SHOW comment
    (43) display -> . SHOW program
    (44) display -> . SHOW statements
    (45) display -> . SHOW expression_list
    (46) display -> . SHOW assignment
    (47) display -> . SHOW display
    (30) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for SHOW resolved as shift
    $end            reduce using rule 49 (loop -> WHILE condition DO statements .)
    ELSE            reduce using rule 49 (loop -> WHILE condition DO statements .)
    RBRACE          reduce using rule 49 (loop -> WHILE condition DO statements .)
    LET             shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    FUNCTION        shift and go to state 17
    SHOW            shift and go to state 19

  ! LET             [ reduce using rule 49 (loop -> WHILE condition DO statements .) ]
  ! IF              [ reduce using rule 49 (loop -> WHILE condition DO statements .) ]
  ! FOR             [ reduce using rule 49 (loop -> WHILE condition DO statements .) ]
  ! WHILE           [ reduce using rule 49 (loop -> WHILE condition DO statements .) ]
  ! FUNCTION        [ reduce using rule 49 (loop -> WHILE condition DO statements .) ]
  ! SHOW            [ reduce using rule 49 (loop -> WHILE condition DO statements .) ]

    statement                      shift and go to state 21
    assignment                     shift and go to state 6
    conditional                    shift and go to state 7
    loop                           shift and go to state 8
    function                       shift and go to state 9
    display                        shift and go to state 10
    input                          shift and go to state 11

state 85

    (55) parameters -> IDENTIFIER .

    RPAREN          reduce using rule 55 (parameters -> IDENTIFIER .)
    COMMA           reduce using rule 55 (parameters -> IDENTIFIER .)


state 86

    (54) function -> FUNCTION IDENTIFIER LPAREN parameters . RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (56) parameters -> parameters . COMMA IDENTIFIER

    RPAREN          shift and go to state 95
    COMMA           shift and go to state 96


state 87

    (53) expression_list -> expression_list COMMA expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    COMMA           reduce using rule 53 (expression_list -> expression_list COMMA expression .)
    LET             reduce using rule 53 (expression_list -> expression_list COMMA expression .)
    IF              reduce using rule 53 (expression_list -> expression_list COMMA expression .)
    FOR             reduce using rule 53 (expression_list -> expression_list COMMA expression .)
    WHILE           reduce using rule 53 (expression_list -> expression_list COMMA expression .)
    FUNCTION        reduce using rule 53 (expression_list -> expression_list COMMA expression .)
    SHOW            reduce using rule 53 (expression_list -> expression_list COMMA expression .)
    $end            reduce using rule 53 (expression_list -> expression_list COMMA expression .)
    ELSE            reduce using rule 53 (expression_list -> expression_list COMMA expression .)
    RBRACE          reduce using rule 53 (expression_list -> expression_list COMMA expression .)
    RBRACKET        reduce using rule 53 (expression_list -> expression_list COMMA expression .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23


state 88

    (50) list -> LBRACKET expression_list RBRACKET .

    LET             reduce using rule 50 (list -> LBRACKET expression_list RBRACKET .)
    IF              reduce using rule 50 (list -> LBRACKET expression_list RBRACKET .)
    FOR             reduce using rule 50 (list -> LBRACKET expression_list RBRACKET .)
    WHILE           reduce using rule 50 (list -> LBRACKET expression_list RBRACKET .)
    FUNCTION        reduce using rule 50 (list -> LBRACKET expression_list RBRACKET .)
    SHOW            reduce using rule 50 (list -> LBRACKET expression_list RBRACKET .)
    $end            reduce using rule 50 (list -> LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 50 (list -> LBRACKET expression_list RBRACKET .)
    RBRACE          reduce using rule 50 (list -> LBRACKET expression_list RBRACKET .)
    DO              reduce using rule 50 (list -> LBRACKET expression_list RBRACKET .)


state 89

    (30) input -> LET IDENTIFIER EQUAL . SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN
    (11) assignment -> LET IDENTIFIER EQUAL . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . LPAREN expression RPAREN

    SHOW            shift and go to state 75
    NUMBER          shift and go to state 20
    LPAREN          shift and go to state 18

    expression                     shift and go to state 74
    term                           shift and go to state 5
    factor                         shift and go to state 12

state 90

    (30) input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER . LPAREN STRING_LITERAL RPAREN

    LPAREN          shift and go to state 97


state 91

    (13) conditional -> IF condition THEN statements else_statements_opt .

    LET             reduce using rule 13 (conditional -> IF condition THEN statements else_statements_opt .)
    IF              reduce using rule 13 (conditional -> IF condition THEN statements else_statements_opt .)
    FOR             reduce using rule 13 (conditional -> IF condition THEN statements else_statements_opt .)
    WHILE           reduce using rule 13 (conditional -> IF condition THEN statements else_statements_opt .)
    FUNCTION        reduce using rule 13 (conditional -> IF condition THEN statements else_statements_opt .)
    SHOW            reduce using rule 13 (conditional -> IF condition THEN statements else_statements_opt .)
    $end            reduce using rule 13 (conditional -> IF condition THEN statements else_statements_opt .)
    ELSE            reduce using rule 13 (conditional -> IF condition THEN statements else_statements_opt .)
    RBRACE          reduce using rule 13 (conditional -> IF condition THEN statements else_statements_opt .)


state 92

    (14) else_statements_opt -> ELSE . statements
    (3) statements -> . statements statement
    (4) statements -> . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (13) conditional -> . IF condition THEN statements else_statements_opt
    (48) loop -> . FOR IDENTIFIER IN list DO statements
    (49) loop -> . WHILE condition DO statements
    (54) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (31) display -> . SHOW expression
    (32) display -> . SHOW STRING_LITERAL
    (33) display -> . SHOW IDENTIFIER
    (34) display -> . SHOW NUMBER
    (35) display -> . SHOW REAL
    (36) display -> . SHOW CHARACTER
    (37) display -> . SHOW list
    (38) display -> . SHOW function
    (39) display -> . SHOW conditional
    (40) display -> . SHOW loop
    (41) display -> . SHOW input
    (42) display -> . SHOW comment
    (43) display -> . SHOW program
    (44) display -> . SHOW statements
    (45) display -> . SHOW expression_list
    (46) display -> . SHOW assignment
    (47) display -> . SHOW display
    (30) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    LET             shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    FUNCTION        shift and go to state 17
    SHOW            shift and go to state 19

    statements                     shift and go to state 98
    statement                      shift and go to state 4
    assignment                     shift and go to state 6
    conditional                    shift and go to state 7
    loop                           shift and go to state 8
    function                       shift and go to state 9
    display                        shift and go to state 10
    input                          shift and go to state 11

state 93

    (15) else_statements_opt -> empty .

    LET             reduce using rule 15 (else_statements_opt -> empty .)
    IF              reduce using rule 15 (else_statements_opt -> empty .)
    FOR             reduce using rule 15 (else_statements_opt -> empty .)
    WHILE           reduce using rule 15 (else_statements_opt -> empty .)
    FUNCTION        reduce using rule 15 (else_statements_opt -> empty .)
    SHOW            reduce using rule 15 (else_statements_opt -> empty .)
    $end            reduce using rule 15 (else_statements_opt -> empty .)
    ELSE            reduce using rule 15 (else_statements_opt -> empty .)
    RBRACE          reduce using rule 15 (else_statements_opt -> empty .)


state 94

    (48) loop -> FOR IDENTIFIER IN list DO . statements
    (3) statements -> . statements statement
    (4) statements -> . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (13) conditional -> . IF condition THEN statements else_statements_opt
    (48) loop -> . FOR IDENTIFIER IN list DO statements
    (49) loop -> . WHILE condition DO statements
    (54) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (31) display -> . SHOW expression
    (32) display -> . SHOW STRING_LITERAL
    (33) display -> . SHOW IDENTIFIER
    (34) display -> . SHOW NUMBER
    (35) display -> . SHOW REAL
    (36) display -> . SHOW CHARACTER
    (37) display -> . SHOW list
    (38) display -> . SHOW function
    (39) display -> . SHOW conditional
    (40) display -> . SHOW loop
    (41) display -> . SHOW input
    (42) display -> . SHOW comment
    (43) display -> . SHOW program
    (44) display -> . SHOW statements
    (45) display -> . SHOW expression_list
    (46) display -> . SHOW assignment
    (47) display -> . SHOW display
    (30) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    LET             shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    FUNCTION        shift and go to state 17
    SHOW            shift and go to state 19

    statements                     shift and go to state 99
    statement                      shift and go to state 4
    assignment                     shift and go to state 6
    conditional                    shift and go to state 7
    loop                           shift and go to state 8
    function                       shift and go to state 9
    display                        shift and go to state 10
    input                          shift and go to state 11

state 95

    (54) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN . LBRACE statements RBRACE return_statement_opt RBRACE

    LBRACE          shift and go to state 100


state 96

    (56) parameters -> parameters COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 101


state 97

    (30) input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN . STRING_LITERAL RPAREN

    STRING_LITERAL  shift and go to state 102


state 98

    (14) else_statements_opt -> ELSE statements .
    (3) statements -> statements . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (13) conditional -> . IF condition THEN statements else_statements_opt
    (48) loop -> . FOR IDENTIFIER IN list DO statements
    (49) loop -> . WHILE condition DO statements
    (54) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (31) display -> . SHOW expression
    (32) display -> . SHOW STRING_LITERAL
    (33) display -> . SHOW IDENTIFIER
    (34) display -> . SHOW NUMBER
    (35) display -> . SHOW REAL
    (36) display -> . SHOW CHARACTER
    (37) display -> . SHOW list
    (38) display -> . SHOW function
    (39) display -> . SHOW conditional
    (40) display -> . SHOW loop
    (41) display -> . SHOW input
    (42) display -> . SHOW comment
    (43) display -> . SHOW program
    (44) display -> . SHOW statements
    (45) display -> . SHOW expression_list
    (46) display -> . SHOW assignment
    (47) display -> . SHOW display
    (30) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for SHOW resolved as shift
    $end            reduce using rule 14 (else_statements_opt -> ELSE statements .)
    ELSE            reduce using rule 14 (else_statements_opt -> ELSE statements .)
    RBRACE          reduce using rule 14 (else_statements_opt -> ELSE statements .)
    LET             shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    FUNCTION        shift and go to state 17
    SHOW            shift and go to state 19

  ! LET             [ reduce using rule 14 (else_statements_opt -> ELSE statements .) ]
  ! IF              [ reduce using rule 14 (else_statements_opt -> ELSE statements .) ]
  ! FOR             [ reduce using rule 14 (else_statements_opt -> ELSE statements .) ]
  ! WHILE           [ reduce using rule 14 (else_statements_opt -> ELSE statements .) ]
  ! FUNCTION        [ reduce using rule 14 (else_statements_opt -> ELSE statements .) ]
  ! SHOW            [ reduce using rule 14 (else_statements_opt -> ELSE statements .) ]

    statement                      shift and go to state 21
    assignment                     shift and go to state 6
    conditional                    shift and go to state 7
    loop                           shift and go to state 8
    function                       shift and go to state 9
    display                        shift and go to state 10
    input                          shift and go to state 11

state 99

    (48) loop -> FOR IDENTIFIER IN list DO statements .
    (3) statements -> statements . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (13) conditional -> . IF condition THEN statements else_statements_opt
    (48) loop -> . FOR IDENTIFIER IN list DO statements
    (49) loop -> . WHILE condition DO statements
    (54) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (31) display -> . SHOW expression
    (32) display -> . SHOW STRING_LITERAL
    (33) display -> . SHOW IDENTIFIER
    (34) display -> . SHOW NUMBER
    (35) display -> . SHOW REAL
    (36) display -> . SHOW CHARACTER
    (37) display -> . SHOW list
    (38) display -> . SHOW function
    (39) display -> . SHOW conditional
    (40) display -> . SHOW loop
    (41) display -> . SHOW input
    (42) display -> . SHOW comment
    (43) display -> . SHOW program
    (44) display -> . SHOW statements
    (45) display -> . SHOW expression_list
    (46) display -> . SHOW assignment
    (47) display -> . SHOW display
    (30) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for SHOW resolved as shift
    $end            reduce using rule 48 (loop -> FOR IDENTIFIER IN list DO statements .)
    ELSE            reduce using rule 48 (loop -> FOR IDENTIFIER IN list DO statements .)
    RBRACE          reduce using rule 48 (loop -> FOR IDENTIFIER IN list DO statements .)
    LET             shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    FUNCTION        shift and go to state 17
    SHOW            shift and go to state 19

  ! LET             [ reduce using rule 48 (loop -> FOR IDENTIFIER IN list DO statements .) ]
  ! IF              [ reduce using rule 48 (loop -> FOR IDENTIFIER IN list DO statements .) ]
  ! FOR             [ reduce using rule 48 (loop -> FOR IDENTIFIER IN list DO statements .) ]
  ! WHILE           [ reduce using rule 48 (loop -> FOR IDENTIFIER IN list DO statements .) ]
  ! FUNCTION        [ reduce using rule 48 (loop -> FOR IDENTIFIER IN list DO statements .) ]
  ! SHOW            [ reduce using rule 48 (loop -> FOR IDENTIFIER IN list DO statements .) ]

    statement                      shift and go to state 21
    assignment                     shift and go to state 6
    conditional                    shift and go to state 7
    loop                           shift and go to state 8
    function                       shift and go to state 9
    display                        shift and go to state 10
    input                          shift and go to state 11

state 100

    (54) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE . statements RBRACE return_statement_opt RBRACE
    (3) statements -> . statements statement
    (4) statements -> . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (13) conditional -> . IF condition THEN statements else_statements_opt
    (48) loop -> . FOR IDENTIFIER IN list DO statements
    (49) loop -> . WHILE condition DO statements
    (54) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (31) display -> . SHOW expression
    (32) display -> . SHOW STRING_LITERAL
    (33) display -> . SHOW IDENTIFIER
    (34) display -> . SHOW NUMBER
    (35) display -> . SHOW REAL
    (36) display -> . SHOW CHARACTER
    (37) display -> . SHOW list
    (38) display -> . SHOW function
    (39) display -> . SHOW conditional
    (40) display -> . SHOW loop
    (41) display -> . SHOW input
    (42) display -> . SHOW comment
    (43) display -> . SHOW program
    (44) display -> . SHOW statements
    (45) display -> . SHOW expression_list
    (46) display -> . SHOW assignment
    (47) display -> . SHOW display
    (30) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    LET             shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    FUNCTION        shift and go to state 17
    SHOW            shift and go to state 19

    statements                     shift and go to state 103
    statement                      shift and go to state 4
    assignment                     shift and go to state 6
    conditional                    shift and go to state 7
    loop                           shift and go to state 8
    function                       shift and go to state 9
    display                        shift and go to state 10
    input                          shift and go to state 11

state 101

    (56) parameters -> parameters COMMA IDENTIFIER .

    RPAREN          reduce using rule 56 (parameters -> parameters COMMA IDENTIFIER .)
    COMMA           reduce using rule 56 (parameters -> parameters COMMA IDENTIFIER .)


state 102

    (30) input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL . RPAREN

    RPAREN          shift and go to state 104


state 103

    (54) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements . RBRACE return_statement_opt RBRACE
    (3) statements -> statements . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (13) conditional -> . IF condition THEN statements else_statements_opt
    (48) loop -> . FOR IDENTIFIER IN list DO statements
    (49) loop -> . WHILE condition DO statements
    (54) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (31) display -> . SHOW expression
    (32) display -> . SHOW STRING_LITERAL
    (33) display -> . SHOW IDENTIFIER
    (34) display -> . SHOW NUMBER
    (35) display -> . SHOW REAL
    (36) display -> . SHOW CHARACTER
    (37) display -> . SHOW list
    (38) display -> . SHOW function
    (39) display -> . SHOW conditional
    (40) display -> . SHOW loop
    (41) display -> . SHOW input
    (42) display -> . SHOW comment
    (43) display -> . SHOW program
    (44) display -> . SHOW statements
    (45) display -> . SHOW expression_list
    (46) display -> . SHOW assignment
    (47) display -> . SHOW display
    (30) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    RBRACE          shift and go to state 105
    LET             shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    FUNCTION        shift and go to state 17
    SHOW            shift and go to state 19

    statement                      shift and go to state 21
    assignment                     shift and go to state 6
    conditional                    shift and go to state 7
    loop                           shift and go to state 8
    function                       shift and go to state 9
    display                        shift and go to state 10
    input                          shift and go to state 11

state 104

    (30) input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .

    LET             reduce using rule 30 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    IF              reduce using rule 30 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    FOR             reduce using rule 30 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    WHILE           reduce using rule 30 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    FUNCTION        reduce using rule 30 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    SHOW            reduce using rule 30 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    $end            reduce using rule 30 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    ELSE            reduce using rule 30 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    RBRACE          reduce using rule 30 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)


state 105

    (54) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE . return_statement_opt RBRACE
    (57) return_statement_opt -> . RETURN expression
    (58) return_statement_opt -> . empty
    (59) empty -> .

    RETURN          shift and go to state 107
    RBRACE          reduce using rule 59 (empty -> .)

    return_statement_opt           shift and go to state 106
    empty                          shift and go to state 108

state 106

    (54) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt . RBRACE

    RBRACE          shift and go to state 109


state 107

    (57) return_statement_opt -> RETURN . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 20
    LPAREN          shift and go to state 18

    expression                     shift and go to state 110
    term                           shift and go to state 5
    factor                         shift and go to state 12

state 108

    (58) return_statement_opt -> empty .

    RBRACE          reduce using rule 58 (return_statement_opt -> empty .)


state 109

    (54) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .

    LET             reduce using rule 54 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    IF              reduce using rule 54 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    FOR             reduce using rule 54 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    WHILE           reduce using rule 54 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    FUNCTION        reduce using rule 54 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    SHOW            reduce using rule 54 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    $end            reduce using rule 54 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    ELSE            reduce using rule 54 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    RBRACE          reduce using rule 54 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)


state 110

    (57) return_statement_opt -> RETURN expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    RBRACE          reduce using rule 57 (return_statement_opt -> RETURN expression .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LET in state 19 resolved as shift
WARNING: shift/reduce conflict for IF in state 19 resolved as shift
WARNING: shift/reduce conflict for FOR in state 19 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 19 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 19 resolved as shift
WARNING: shift/reduce conflict for SHOW in state 19 resolved as shift
WARNING: shift/reduce conflict for LET in state 46 resolved as shift
WARNING: shift/reduce conflict for IF in state 46 resolved as shift
WARNING: shift/reduce conflict for FOR in state 46 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 46 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 46 resolved as shift
WARNING: shift/reduce conflict for SHOW in state 46 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 76 resolved as shift
WARNING: shift/reduce conflict for LET in state 76 resolved as shift
WARNING: shift/reduce conflict for IF in state 76 resolved as shift
WARNING: shift/reduce conflict for FOR in state 76 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 76 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 76 resolved as shift
WARNING: shift/reduce conflict for SHOW in state 76 resolved as shift
WARNING: shift/reduce conflict for LET in state 84 resolved as shift
WARNING: shift/reduce conflict for IF in state 84 resolved as shift
WARNING: shift/reduce conflict for FOR in state 84 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 84 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 84 resolved as shift
WARNING: shift/reduce conflict for SHOW in state 84 resolved as shift
WARNING: shift/reduce conflict for LET in state 98 resolved as shift
WARNING: shift/reduce conflict for IF in state 98 resolved as shift
WARNING: shift/reduce conflict for FOR in state 98 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 98 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 98 resolved as shift
WARNING: shift/reduce conflict for SHOW in state 98 resolved as shift
WARNING: shift/reduce conflict for LET in state 99 resolved as shift
WARNING: shift/reduce conflict for IF in state 99 resolved as shift
WARNING: shift/reduce conflict for FOR in state 99 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 99 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 99 resolved as shift
WARNING: shift/reduce conflict for SHOW in state 99 resolved as shift
WARNING: reduce/reduce conflict in state 33 resolved using rule (program -> expression)
WARNING: rejected rule (display -> SHOW expression) in state 33
WARNING: reduce/reduce conflict in state 33 resolved using rule (program -> expression)
WARNING: rejected rule (expression_list -> expression) in state 33
WARNING: reduce/reduce conflict in state 36 resolved using rule (factor -> NUMBER)
WARNING: rejected rule (display -> SHOW NUMBER) in state 36
WARNING: reduce/reduce conflict in state 40 resolved using rule (statement -> function)
WARNING: rejected rule (display -> SHOW function) in state 40
WARNING: reduce/reduce conflict in state 41 resolved using rule (statement -> conditional)
WARNING: rejected rule (display -> SHOW conditional) in state 41
WARNING: reduce/reduce conflict in state 42 resolved using rule (statement -> loop)
WARNING: rejected rule (display -> SHOW loop) in state 42
WARNING: reduce/reduce conflict in state 43 resolved using rule (statement -> input)
WARNING: rejected rule (display -> SHOW input) in state 43
WARNING: reduce/reduce conflict in state 46 resolved using rule (program -> statements)
WARNING: rejected rule (display -> SHOW statements) in state 46
WARNING: reduce/reduce conflict in state 48 resolved using rule (statement -> assignment)
WARNING: rejected rule (display -> SHOW assignment) in state 48
WARNING: reduce/reduce conflict in state 49 resolved using rule (statement -> display)
WARNING: rejected rule (display -> SHOW display) in state 49
WARNING: Rule (display -> SHOW expression) is never reduced
WARNING: Rule (display -> SHOW NUMBER) is never reduced
WARNING: Rule (display -> SHOW function) is never reduced
WARNING: Rule (display -> SHOW conditional) is never reduced
WARNING: Rule (display -> SHOW loop) is never reduced
WARNING: Rule (display -> SHOW input) is never reduced
WARNING: Rule (display -> SHOW statements) is never reduced
WARNING: Rule (display -> SHOW assignment) is never reduced
WARNING: Rule (display -> SHOW display) is never reduced
