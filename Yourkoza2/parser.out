Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    DECREASE
    FALSE
    INCREASE
    INTEGER
    JOIN
    LETTER
    OR
    RISK
    SAVE
    TRUE

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     program -> expression
Rule 3     statements -> statements statement
Rule 4     statements -> statement
Rule 5     statement -> assignment
Rule 6     statement -> conditional
Rule 7     statement -> loop
Rule 8     statement -> function
Rule 9     statement -> display
Rule 10    statement -> input
Rule 11    assignment -> LET IDENTIFIER EQUAL expression
Rule 12    comment -> COMMENT
Rule 13    conditional -> IF condition THEN statements else_statements_opt END
Rule 14    else_statements_opt -> ELSE statements
Rule 15    else_statements_opt -> empty
Rule 16    condition -> expression IS_LESS_THAN expression
Rule 17    condition -> expression IS_EQUAL_TO expression
Rule 18    condition -> expression IS_GREATER_THAN expression
Rule 19    condition -> expression IS_NOT_EQUAL_TO expression
Rule 20    condition -> expression GREATER_THAN_OR_EQUAL_TO expression
Rule 21    condition -> expression LESS_THAN_OR_EQUAL_TO expression
Rule 22    expression -> expression PLUS term
Rule 23    expression -> expression MINUS term
Rule 24    expression -> term
Rule 25    expression -> expression POWER term
Rule 26    expression -> NOT expression
Rule 27    expression -> LPAREN expression RPAREN
Rule 28    expression -> NUMBER MINUS term
Rule 29    expression -> REAL MINUS term
Rule 30    expression -> CHARACTER PLUS term
Rule 31    expression -> list
Rule 32    term -> term TIMES factor
Rule 33    term -> term DIVIDE factor
Rule 34    term -> IDENTIFIER
Rule 35    term -> factor
Rule 36    factor -> NUMBER
Rule 37    factor -> LPAREN expression RPAREN
Rule 38    input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN
Rule 39    display -> SHOW expression
Rule 40    display -> SHOW STRING_LITERAL
Rule 41    display -> SHOW IDENTIFIER
Rule 42    display -> SHOW NUMBER
Rule 43    display -> SHOW REAL
Rule 44    display -> SHOW CHARACTER
Rule 45    display -> SHOW list
Rule 46    display -> SHOW function
Rule 47    display -> SHOW conditional
Rule 48    display -> SHOW loop
Rule 49    display -> SHOW input
Rule 50    display -> SHOW comment
Rule 51    display -> SHOW program
Rule 52    display -> SHOW statements
Rule 53    display -> SHOW expression_list
Rule 54    display -> SHOW assignment
Rule 55    display -> SHOW display
Rule 56    loop -> FOR IDENTIFIER IN list DO statements
Rule 57    loop -> WHILE condition DO statements
Rule 58    list -> LBRACKET expression_list RBRACKET
Rule 59    list -> empty
Rule 60    expression_list -> expression
Rule 61    expression_list -> expression_list COMMA expression
Rule 62    function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
Rule 63    parameters -> IDENTIFIER
Rule 64    parameters -> parameters COMMA IDENTIFIER
Rule 65    return_statement_opt -> RETURN expression
Rule 66    return_statement_opt -> empty
Rule 67    empty -> <empty>

Terminals, with rules where they appear

AND                  : 
CHARACTER            : 30 44
COMMA                : 61 64
COMMENT              : 12
DECREASE             : 
DIVIDE               : 33
DO                   : 56 57
ELSE                 : 14
END                  : 13
EQUAL                : 11 38
FALSE                : 
FOR                  : 56
FUNCTION             : 62
GREATER_THAN_OR_EQUAL_TO : 20
IDENTIFIER           : 11 34 38 38 41 56 62 63 64
IF                   : 13
IN                   : 56
INCREASE             : 
INTEGER              : 
IS_EQUAL_TO          : 17
IS_GREATER_THAN      : 18
IS_LESS_THAN         : 16
IS_NOT_EQUAL_TO      : 19
JOIN                 : 
LBRACE               : 62
LBRACKET             : 58
LESS_THAN_OR_EQUAL_TO : 21
LET                  : 11 38
LETTER               : 
LPAREN               : 27 37 38 62
MINUS                : 23 28 29
NOT                  : 26
NUMBER               : 28 36 42
OR                   : 
PLUS                 : 22 30
POWER                : 25
RBRACE               : 62 62
RBRACKET             : 58
REAL                 : 29 43
RETURN               : 65
RISK                 : 
RPAREN               : 27 37 38 62
SAVE                 : 
SHOW                 : 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55
STRING_LITERAL       : 38 40
THEN                 : 13
TIMES                : 32
TRUE                 : 
WHILE                : 57
error                : 

Nonterminals, with rules where they appear

assignment           : 5 54
comment              : 50
condition            : 13 57
conditional          : 6 47
display              : 9 55
else_statements_opt  : 13
empty                : 15 59 66
expression           : 2 11 16 16 17 17 18 18 19 19 20 20 21 21 22 23 25 26 27 37 39 60 61 65
expression_list      : 53 58 61
factor               : 32 33 35
function             : 8 46
input                : 10 49
list                 : 31 45 56
loop                 : 7 48
parameters           : 62 64
program              : 51 0
return_statement_opt : 62
statement            : 3 4
statements           : 1 3 13 14 52 56 57 62
term                 : 22 23 24 25 28 29 30 32 33

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) program -> . expression
    (3) statements -> . statements statement
    (4) statements -> . statement
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) expression -> . expression POWER term
    (26) expression -> . NOT expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . NUMBER MINUS term
    (29) expression -> . REAL MINUS term
    (30) expression -> . CHARACTER PLUS term
    (31) expression -> . list
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) term -> . IDENTIFIER
    (35) term -> . factor
    (58) list -> . LBRACKET expression_list RBRACKET
    (59) list -> . empty
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (13) conditional -> . IF condition THEN statements else_statements_opt END
    (56) loop -> . FOR IDENTIFIER IN list DO statements
    (57) loop -> . WHILE condition DO statements
    (62) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (39) display -> . SHOW expression
    (40) display -> . SHOW STRING_LITERAL
    (41) display -> . SHOW IDENTIFIER
    (42) display -> . SHOW NUMBER
    (43) display -> . SHOW REAL
    (44) display -> . SHOW CHARACTER
    (45) display -> . SHOW list
    (46) display -> . SHOW function
    (47) display -> . SHOW conditional
    (48) display -> . SHOW loop
    (49) display -> . SHOW input
    (50) display -> . SHOW comment
    (51) display -> . SHOW program
    (52) display -> . SHOW statements
    (53) display -> . SHOW expression_list
    (54) display -> . SHOW assignment
    (55) display -> . SHOW display
    (38) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN
    (36) factor -> . NUMBER
    (37) factor -> . LPAREN expression RPAREN
    (67) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    LET             shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25
    FUNCTION        shift and go to state 26
    SHOW            shift and go to state 27
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    POWER           reduce using rule 67 (empty -> .)
    $end            reduce using rule 67 (empty -> .)

    program                        shift and go to state 1
    statements                     shift and go to state 2
    expression                     shift and go to state 3
    statement                      shift and go to state 4
    term                           shift and go to state 5
    list                           shift and go to state 11
    assignment                     shift and go to state 12
    conditional                    shift and go to state 13
    loop                           shift and go to state 14
    function                       shift and go to state 15
    display                        shift and go to state 16
    input                          shift and go to state 17
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (3) statements -> statements . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (13) conditional -> . IF condition THEN statements else_statements_opt END
    (56) loop -> . FOR IDENTIFIER IN list DO statements
    (57) loop -> . WHILE condition DO statements
    (62) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (39) display -> . SHOW expression
    (40) display -> . SHOW STRING_LITERAL
    (41) display -> . SHOW IDENTIFIER
    (42) display -> . SHOW NUMBER
    (43) display -> . SHOW REAL
    (44) display -> . SHOW CHARACTER
    (45) display -> . SHOW list
    (46) display -> . SHOW function
    (47) display -> . SHOW conditional
    (48) display -> . SHOW loop
    (49) display -> . SHOW input
    (50) display -> . SHOW comment
    (51) display -> . SHOW program
    (52) display -> . SHOW statements
    (53) display -> . SHOW expression_list
    (54) display -> . SHOW assignment
    (55) display -> . SHOW display
    (38) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    $end            reduce using rule 1 (program -> statements .)
    LET             shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25
    FUNCTION        shift and go to state 26
    SHOW            shift and go to state 27

    statement                      shift and go to state 28
    assignment                     shift and go to state 12
    conditional                    shift and go to state 13
    loop                           shift and go to state 14
    function                       shift and go to state 15
    display                        shift and go to state 16
    input                          shift and go to state 17

state 3

    (2) program -> expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term
    (25) expression -> expression . POWER term

    $end            reduce using rule 2 (program -> expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    POWER           shift and go to state 31


state 4

    (4) statements -> statement .

    LET             reduce using rule 4 (statements -> statement .)
    IF              reduce using rule 4 (statements -> statement .)
    FOR             reduce using rule 4 (statements -> statement .)
    WHILE           reduce using rule 4 (statements -> statement .)
    FUNCTION        reduce using rule 4 (statements -> statement .)
    SHOW            reduce using rule 4 (statements -> statement .)
    $end            reduce using rule 4 (statements -> statement .)
    ELSE            reduce using rule 4 (statements -> statement .)
    END             reduce using rule 4 (statements -> statement .)
    RBRACE          reduce using rule 4 (statements -> statement .)


state 5

    (24) expression -> term .
    (32) term -> term . TIMES factor
    (33) term -> term . DIVIDE factor

    PLUS            reduce using rule 24 (expression -> term .)
    MINUS           reduce using rule 24 (expression -> term .)
    POWER           reduce using rule 24 (expression -> term .)
    $end            reduce using rule 24 (expression -> term .)
    RPAREN          reduce using rule 24 (expression -> term .)
    RBRACKET        reduce using rule 24 (expression -> term .)
    COMMA           reduce using rule 24 (expression -> term .)
    IS_LESS_THAN    reduce using rule 24 (expression -> term .)
    IS_EQUAL_TO     reduce using rule 24 (expression -> term .)
    IS_GREATER_THAN reduce using rule 24 (expression -> term .)
    IS_NOT_EQUAL_TO reduce using rule 24 (expression -> term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 24 (expression -> term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 24 (expression -> term .)
    LET             reduce using rule 24 (expression -> term .)
    IF              reduce using rule 24 (expression -> term .)
    FOR             reduce using rule 24 (expression -> term .)
    WHILE           reduce using rule 24 (expression -> term .)
    FUNCTION        reduce using rule 24 (expression -> term .)
    SHOW            reduce using rule 24 (expression -> term .)
    ELSE            reduce using rule 24 (expression -> term .)
    END             reduce using rule 24 (expression -> term .)
    RBRACE          reduce using rule 24 (expression -> term .)
    THEN            reduce using rule 24 (expression -> term .)
    DO              reduce using rule 24 (expression -> term .)
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33


state 6

    (26) expression -> NOT . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) expression -> . expression POWER term
    (26) expression -> . NOT expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . NUMBER MINUS term
    (29) expression -> . REAL MINUS term
    (30) expression -> . CHARACTER PLUS term
    (31) expression -> . list
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) term -> . IDENTIFIER
    (35) term -> . factor
    (58) list -> . LBRACKET expression_list RBRACKET
    (59) list -> . empty
    (36) factor -> . NUMBER
    (37) factor -> . LPAREN expression RPAREN
    (67) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    POWER           reduce using rule 67 (empty -> .)
    $end            reduce using rule 67 (empty -> .)
    RPAREN          reduce using rule 67 (empty -> .)
    RBRACKET        reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)
    IS_LESS_THAN    reduce using rule 67 (empty -> .)
    IS_EQUAL_TO     reduce using rule 67 (empty -> .)
    IS_GREATER_THAN reduce using rule 67 (empty -> .)
    IS_NOT_EQUAL_TO reduce using rule 67 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 67 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 67 (empty -> .)
    LET             reduce using rule 67 (empty -> .)
    IF              reduce using rule 67 (empty -> .)
    FOR             reduce using rule 67 (empty -> .)
    WHILE           reduce using rule 67 (empty -> .)
    FUNCTION        reduce using rule 67 (empty -> .)
    SHOW            reduce using rule 67 (empty -> .)
    ELSE            reduce using rule 67 (empty -> .)
    END             reduce using rule 67 (empty -> .)
    RBRACE          reduce using rule 67 (empty -> .)
    THEN            reduce using rule 67 (empty -> .)
    DO              reduce using rule 67 (empty -> .)

    expression                     shift and go to state 34
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 7

    (27) expression -> LPAREN . expression RPAREN
    (37) factor -> LPAREN . expression RPAREN
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) expression -> . expression POWER term
    (26) expression -> . NOT expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . NUMBER MINUS term
    (29) expression -> . REAL MINUS term
    (30) expression -> . CHARACTER PLUS term
    (31) expression -> . list
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) term -> . IDENTIFIER
    (35) term -> . factor
    (58) list -> . LBRACKET expression_list RBRACKET
    (59) list -> . empty
    (36) factor -> . NUMBER
    (37) factor -> . LPAREN expression RPAREN
    (67) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    RPAREN          reduce using rule 67 (empty -> .)
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    POWER           reduce using rule 67 (empty -> .)

    expression                     shift and go to state 35
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 8

    (28) expression -> NUMBER . MINUS term
    (36) factor -> NUMBER .

  ! shift/reduce conflict for MINUS resolved as shift
    MINUS           shift and go to state 36
    TIMES           reduce using rule 36 (factor -> NUMBER .)
    DIVIDE          reduce using rule 36 (factor -> NUMBER .)
    PLUS            reduce using rule 36 (factor -> NUMBER .)
    POWER           reduce using rule 36 (factor -> NUMBER .)
    $end            reduce using rule 36 (factor -> NUMBER .)
    RPAREN          reduce using rule 36 (factor -> NUMBER .)
    RBRACKET        reduce using rule 36 (factor -> NUMBER .)
    COMMA           reduce using rule 36 (factor -> NUMBER .)
    IS_LESS_THAN    reduce using rule 36 (factor -> NUMBER .)
    IS_EQUAL_TO     reduce using rule 36 (factor -> NUMBER .)
    IS_GREATER_THAN reduce using rule 36 (factor -> NUMBER .)
    IS_NOT_EQUAL_TO reduce using rule 36 (factor -> NUMBER .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 36 (factor -> NUMBER .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 36 (factor -> NUMBER .)
    LET             reduce using rule 36 (factor -> NUMBER .)
    IF              reduce using rule 36 (factor -> NUMBER .)
    FOR             reduce using rule 36 (factor -> NUMBER .)
    WHILE           reduce using rule 36 (factor -> NUMBER .)
    FUNCTION        reduce using rule 36 (factor -> NUMBER .)
    SHOW            reduce using rule 36 (factor -> NUMBER .)
    ELSE            reduce using rule 36 (factor -> NUMBER .)
    END             reduce using rule 36 (factor -> NUMBER .)
    RBRACE          reduce using rule 36 (factor -> NUMBER .)
    THEN            reduce using rule 36 (factor -> NUMBER .)
    DO              reduce using rule 36 (factor -> NUMBER .)

  ! MINUS           [ reduce using rule 36 (factor -> NUMBER .) ]


state 9

    (29) expression -> REAL . MINUS term

    MINUS           shift and go to state 37


state 10

    (30) expression -> CHARACTER . PLUS term

    PLUS            shift and go to state 38


state 11

    (31) expression -> list .

    PLUS            reduce using rule 31 (expression -> list .)
    MINUS           reduce using rule 31 (expression -> list .)
    POWER           reduce using rule 31 (expression -> list .)
    $end            reduce using rule 31 (expression -> list .)
    RPAREN          reduce using rule 31 (expression -> list .)
    RBRACKET        reduce using rule 31 (expression -> list .)
    COMMA           reduce using rule 31 (expression -> list .)
    IS_LESS_THAN    reduce using rule 31 (expression -> list .)
    IS_EQUAL_TO     reduce using rule 31 (expression -> list .)
    IS_GREATER_THAN reduce using rule 31 (expression -> list .)
    IS_NOT_EQUAL_TO reduce using rule 31 (expression -> list .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 31 (expression -> list .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 31 (expression -> list .)
    LET             reduce using rule 31 (expression -> list .)
    IF              reduce using rule 31 (expression -> list .)
    FOR             reduce using rule 31 (expression -> list .)
    WHILE           reduce using rule 31 (expression -> list .)
    FUNCTION        reduce using rule 31 (expression -> list .)
    SHOW            reduce using rule 31 (expression -> list .)
    ELSE            reduce using rule 31 (expression -> list .)
    END             reduce using rule 31 (expression -> list .)
    RBRACE          reduce using rule 31 (expression -> list .)
    THEN            reduce using rule 31 (expression -> list .)
    DO              reduce using rule 31 (expression -> list .)


state 12

    (5) statement -> assignment .

    LET             reduce using rule 5 (statement -> assignment .)
    IF              reduce using rule 5 (statement -> assignment .)
    FOR             reduce using rule 5 (statement -> assignment .)
    WHILE           reduce using rule 5 (statement -> assignment .)
    FUNCTION        reduce using rule 5 (statement -> assignment .)
    SHOW            reduce using rule 5 (statement -> assignment .)
    $end            reduce using rule 5 (statement -> assignment .)
    ELSE            reduce using rule 5 (statement -> assignment .)
    END             reduce using rule 5 (statement -> assignment .)
    RBRACE          reduce using rule 5 (statement -> assignment .)


state 13

    (6) statement -> conditional .

    LET             reduce using rule 6 (statement -> conditional .)
    IF              reduce using rule 6 (statement -> conditional .)
    FOR             reduce using rule 6 (statement -> conditional .)
    WHILE           reduce using rule 6 (statement -> conditional .)
    FUNCTION        reduce using rule 6 (statement -> conditional .)
    SHOW            reduce using rule 6 (statement -> conditional .)
    $end            reduce using rule 6 (statement -> conditional .)
    ELSE            reduce using rule 6 (statement -> conditional .)
    END             reduce using rule 6 (statement -> conditional .)
    RBRACE          reduce using rule 6 (statement -> conditional .)


state 14

    (7) statement -> loop .

    LET             reduce using rule 7 (statement -> loop .)
    IF              reduce using rule 7 (statement -> loop .)
    FOR             reduce using rule 7 (statement -> loop .)
    WHILE           reduce using rule 7 (statement -> loop .)
    FUNCTION        reduce using rule 7 (statement -> loop .)
    SHOW            reduce using rule 7 (statement -> loop .)
    $end            reduce using rule 7 (statement -> loop .)
    ELSE            reduce using rule 7 (statement -> loop .)
    END             reduce using rule 7 (statement -> loop .)
    RBRACE          reduce using rule 7 (statement -> loop .)


state 15

    (8) statement -> function .

    LET             reduce using rule 8 (statement -> function .)
    IF              reduce using rule 8 (statement -> function .)
    FOR             reduce using rule 8 (statement -> function .)
    WHILE           reduce using rule 8 (statement -> function .)
    FUNCTION        reduce using rule 8 (statement -> function .)
    SHOW            reduce using rule 8 (statement -> function .)
    $end            reduce using rule 8 (statement -> function .)
    ELSE            reduce using rule 8 (statement -> function .)
    END             reduce using rule 8 (statement -> function .)
    RBRACE          reduce using rule 8 (statement -> function .)


state 16

    (9) statement -> display .

    LET             reduce using rule 9 (statement -> display .)
    IF              reduce using rule 9 (statement -> display .)
    FOR             reduce using rule 9 (statement -> display .)
    WHILE           reduce using rule 9 (statement -> display .)
    FUNCTION        reduce using rule 9 (statement -> display .)
    SHOW            reduce using rule 9 (statement -> display .)
    $end            reduce using rule 9 (statement -> display .)
    ELSE            reduce using rule 9 (statement -> display .)
    END             reduce using rule 9 (statement -> display .)
    RBRACE          reduce using rule 9 (statement -> display .)


state 17

    (10) statement -> input .

    LET             reduce using rule 10 (statement -> input .)
    IF              reduce using rule 10 (statement -> input .)
    FOR             reduce using rule 10 (statement -> input .)
    WHILE           reduce using rule 10 (statement -> input .)
    FUNCTION        reduce using rule 10 (statement -> input .)
    SHOW            reduce using rule 10 (statement -> input .)
    $end            reduce using rule 10 (statement -> input .)
    ELSE            reduce using rule 10 (statement -> input .)
    END             reduce using rule 10 (statement -> input .)
    RBRACE          reduce using rule 10 (statement -> input .)


state 18

    (35) term -> factor .

    TIMES           reduce using rule 35 (term -> factor .)
    DIVIDE          reduce using rule 35 (term -> factor .)
    PLUS            reduce using rule 35 (term -> factor .)
    MINUS           reduce using rule 35 (term -> factor .)
    POWER           reduce using rule 35 (term -> factor .)
    $end            reduce using rule 35 (term -> factor .)
    RPAREN          reduce using rule 35 (term -> factor .)
    RBRACKET        reduce using rule 35 (term -> factor .)
    COMMA           reduce using rule 35 (term -> factor .)
    IS_LESS_THAN    reduce using rule 35 (term -> factor .)
    IS_EQUAL_TO     reduce using rule 35 (term -> factor .)
    IS_GREATER_THAN reduce using rule 35 (term -> factor .)
    IS_NOT_EQUAL_TO reduce using rule 35 (term -> factor .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 35 (term -> factor .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 35 (term -> factor .)
    LET             reduce using rule 35 (term -> factor .)
    IF              reduce using rule 35 (term -> factor .)
    FOR             reduce using rule 35 (term -> factor .)
    WHILE           reduce using rule 35 (term -> factor .)
    FUNCTION        reduce using rule 35 (term -> factor .)
    SHOW            reduce using rule 35 (term -> factor .)
    ELSE            reduce using rule 35 (term -> factor .)
    END             reduce using rule 35 (term -> factor .)
    RBRACE          reduce using rule 35 (term -> factor .)
    THEN            reduce using rule 35 (term -> factor .)
    DO              reduce using rule 35 (term -> factor .)


state 19

    (34) term -> IDENTIFIER .

    TIMES           reduce using rule 34 (term -> IDENTIFIER .)
    DIVIDE          reduce using rule 34 (term -> IDENTIFIER .)
    PLUS            reduce using rule 34 (term -> IDENTIFIER .)
    MINUS           reduce using rule 34 (term -> IDENTIFIER .)
    POWER           reduce using rule 34 (term -> IDENTIFIER .)
    $end            reduce using rule 34 (term -> IDENTIFIER .)
    RPAREN          reduce using rule 34 (term -> IDENTIFIER .)
    RBRACKET        reduce using rule 34 (term -> IDENTIFIER .)
    COMMA           reduce using rule 34 (term -> IDENTIFIER .)
    IS_LESS_THAN    reduce using rule 34 (term -> IDENTIFIER .)
    IS_EQUAL_TO     reduce using rule 34 (term -> IDENTIFIER .)
    IS_GREATER_THAN reduce using rule 34 (term -> IDENTIFIER .)
    IS_NOT_EQUAL_TO reduce using rule 34 (term -> IDENTIFIER .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 34 (term -> IDENTIFIER .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 34 (term -> IDENTIFIER .)
    LET             reduce using rule 34 (term -> IDENTIFIER .)
    IF              reduce using rule 34 (term -> IDENTIFIER .)
    FOR             reduce using rule 34 (term -> IDENTIFIER .)
    WHILE           reduce using rule 34 (term -> IDENTIFIER .)
    FUNCTION        reduce using rule 34 (term -> IDENTIFIER .)
    SHOW            reduce using rule 34 (term -> IDENTIFIER .)
    ELSE            reduce using rule 34 (term -> IDENTIFIER .)
    END             reduce using rule 34 (term -> IDENTIFIER .)
    RBRACE          reduce using rule 34 (term -> IDENTIFIER .)
    THEN            reduce using rule 34 (term -> IDENTIFIER .)
    DO              reduce using rule 34 (term -> IDENTIFIER .)


state 20

    (58) list -> LBRACKET . expression_list RBRACKET
    (60) expression_list -> . expression
    (61) expression_list -> . expression_list COMMA expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) expression -> . expression POWER term
    (26) expression -> . NOT expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . NUMBER MINUS term
    (29) expression -> . REAL MINUS term
    (30) expression -> . CHARACTER PLUS term
    (31) expression -> . list
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) term -> . IDENTIFIER
    (35) term -> . factor
    (58) list -> . LBRACKET expression_list RBRACKET
    (59) list -> . empty
    (36) factor -> . NUMBER
    (37) factor -> . LPAREN expression RPAREN
    (67) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    POWER           reduce using rule 67 (empty -> .)
    RBRACKET        reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)

    expression_list                shift and go to state 39
    expression                     shift and go to state 40
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 21

    (59) list -> empty .

    PLUS            reduce using rule 59 (list -> empty .)
    MINUS           reduce using rule 59 (list -> empty .)
    POWER           reduce using rule 59 (list -> empty .)
    $end            reduce using rule 59 (list -> empty .)
    RPAREN          reduce using rule 59 (list -> empty .)
    RBRACKET        reduce using rule 59 (list -> empty .)
    COMMA           reduce using rule 59 (list -> empty .)
    IS_LESS_THAN    reduce using rule 59 (list -> empty .)
    IS_EQUAL_TO     reduce using rule 59 (list -> empty .)
    IS_GREATER_THAN reduce using rule 59 (list -> empty .)
    IS_NOT_EQUAL_TO reduce using rule 59 (list -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 59 (list -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 59 (list -> empty .)
    LET             reduce using rule 59 (list -> empty .)
    IF              reduce using rule 59 (list -> empty .)
    FOR             reduce using rule 59 (list -> empty .)
    WHILE           reduce using rule 59 (list -> empty .)
    FUNCTION        reduce using rule 59 (list -> empty .)
    SHOW            reduce using rule 59 (list -> empty .)
    ELSE            reduce using rule 59 (list -> empty .)
    END             reduce using rule 59 (list -> empty .)
    RBRACE          reduce using rule 59 (list -> empty .)
    THEN            reduce using rule 59 (list -> empty .)
    DO              reduce using rule 59 (list -> empty .)


state 22

    (11) assignment -> LET . IDENTIFIER EQUAL expression
    (38) input -> LET . IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    IDENTIFIER      shift and go to state 41


state 23

    (13) conditional -> IF . condition THEN statements else_statements_opt END
    (16) condition -> . expression IS_LESS_THAN expression
    (17) condition -> . expression IS_EQUAL_TO expression
    (18) condition -> . expression IS_GREATER_THAN expression
    (19) condition -> . expression IS_NOT_EQUAL_TO expression
    (20) condition -> . expression GREATER_THAN_OR_EQUAL_TO expression
    (21) condition -> . expression LESS_THAN_OR_EQUAL_TO expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) expression -> . expression POWER term
    (26) expression -> . NOT expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . NUMBER MINUS term
    (29) expression -> . REAL MINUS term
    (30) expression -> . CHARACTER PLUS term
    (31) expression -> . list
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) term -> . IDENTIFIER
    (35) term -> . factor
    (58) list -> . LBRACKET expression_list RBRACKET
    (59) list -> . empty
    (36) factor -> . NUMBER
    (37) factor -> . LPAREN expression RPAREN
    (67) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    IS_LESS_THAN    reduce using rule 67 (empty -> .)
    IS_EQUAL_TO     reduce using rule 67 (empty -> .)
    IS_GREATER_THAN reduce using rule 67 (empty -> .)
    IS_NOT_EQUAL_TO reduce using rule 67 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 67 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 67 (empty -> .)
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    POWER           reduce using rule 67 (empty -> .)

    condition                      shift and go to state 42
    expression                     shift and go to state 43
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 24

    (56) loop -> FOR . IDENTIFIER IN list DO statements

    IDENTIFIER      shift and go to state 44


state 25

    (57) loop -> WHILE . condition DO statements
    (16) condition -> . expression IS_LESS_THAN expression
    (17) condition -> . expression IS_EQUAL_TO expression
    (18) condition -> . expression IS_GREATER_THAN expression
    (19) condition -> . expression IS_NOT_EQUAL_TO expression
    (20) condition -> . expression GREATER_THAN_OR_EQUAL_TO expression
    (21) condition -> . expression LESS_THAN_OR_EQUAL_TO expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) expression -> . expression POWER term
    (26) expression -> . NOT expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . NUMBER MINUS term
    (29) expression -> . REAL MINUS term
    (30) expression -> . CHARACTER PLUS term
    (31) expression -> . list
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) term -> . IDENTIFIER
    (35) term -> . factor
    (58) list -> . LBRACKET expression_list RBRACKET
    (59) list -> . empty
    (36) factor -> . NUMBER
    (37) factor -> . LPAREN expression RPAREN
    (67) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    IS_LESS_THAN    reduce using rule 67 (empty -> .)
    IS_EQUAL_TO     reduce using rule 67 (empty -> .)
    IS_GREATER_THAN reduce using rule 67 (empty -> .)
    IS_NOT_EQUAL_TO reduce using rule 67 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 67 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 67 (empty -> .)
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    POWER           reduce using rule 67 (empty -> .)

    condition                      shift and go to state 45
    expression                     shift and go to state 43
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 26

    (62) function -> FUNCTION . IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE

    IDENTIFIER      shift and go to state 46


state 27

    (39) display -> SHOW . expression
    (40) display -> SHOW . STRING_LITERAL
    (41) display -> SHOW . IDENTIFIER
    (42) display -> SHOW . NUMBER
    (43) display -> SHOW . REAL
    (44) display -> SHOW . CHARACTER
    (45) display -> SHOW . list
    (46) display -> SHOW . function
    (47) display -> SHOW . conditional
    (48) display -> SHOW . loop
    (49) display -> SHOW . input
    (50) display -> SHOW . comment
    (51) display -> SHOW . program
    (52) display -> SHOW . statements
    (53) display -> SHOW . expression_list
    (54) display -> SHOW . assignment
    (55) display -> SHOW . display
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) expression -> . expression POWER term
    (26) expression -> . NOT expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . NUMBER MINUS term
    (29) expression -> . REAL MINUS term
    (30) expression -> . CHARACTER PLUS term
    (31) expression -> . list
    (58) list -> . LBRACKET expression_list RBRACKET
    (59) list -> . empty
    (62) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (13) conditional -> . IF condition THEN statements else_statements_opt END
    (56) loop -> . FOR IDENTIFIER IN list DO statements
    (57) loop -> . WHILE condition DO statements
    (38) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN
    (12) comment -> . COMMENT
    (1) program -> . statements
    (2) program -> . expression
    (3) statements -> . statements statement
    (4) statements -> . statement
    (60) expression_list -> . expression
    (61) expression_list -> . expression_list COMMA expression
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (39) display -> . SHOW expression
    (40) display -> . SHOW STRING_LITERAL
    (41) display -> . SHOW IDENTIFIER
    (42) display -> . SHOW NUMBER
    (43) display -> . SHOW REAL
    (44) display -> . SHOW CHARACTER
    (45) display -> . SHOW list
    (46) display -> . SHOW function
    (47) display -> . SHOW conditional
    (48) display -> . SHOW loop
    (49) display -> . SHOW input
    (50) display -> . SHOW comment
    (51) display -> . SHOW program
    (52) display -> . SHOW statements
    (53) display -> . SHOW expression_list
    (54) display -> . SHOW assignment
    (55) display -> . SHOW display
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) term -> . IDENTIFIER
    (35) term -> . factor
    (67) empty -> .
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (36) factor -> . NUMBER
    (37) factor -> . LPAREN expression RPAREN

  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for SHOW resolved as shift
    STRING_LITERAL  shift and go to state 48
    IDENTIFIER      shift and go to state 49
    NUMBER          shift and go to state 50
    REAL            shift and go to state 51
    CHARACTER       shift and go to state 52
    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    LBRACKET        shift and go to state 20
    FUNCTION        shift and go to state 26
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25
    LET             shift and go to state 64
    COMMENT         shift and go to state 65
    SHOW            shift and go to state 27
    $end            reduce using rule 67 (empty -> .)
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    POWER           reduce using rule 67 (empty -> .)
    ELSE            reduce using rule 67 (empty -> .)
    END             reduce using rule 67 (empty -> .)
    RBRACE          reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)

  ! LET             [ reduce using rule 67 (empty -> .) ]
  ! IF              [ reduce using rule 67 (empty -> .) ]
  ! FOR             [ reduce using rule 67 (empty -> .) ]
  ! WHILE           [ reduce using rule 67 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 67 (empty -> .) ]
  ! SHOW            [ reduce using rule 67 (empty -> .) ]

    expression                     shift and go to state 47
    list                           shift and go to state 53
    function                       shift and go to state 54
    conditional                    shift and go to state 55
    loop                           shift and go to state 56
    input                          shift and go to state 57
    comment                        shift and go to state 58
    program                        shift and go to state 59
    statements                     shift and go to state 60
    expression_list                shift and go to state 61
    assignment                     shift and go to state 62
    display                        shift and go to state 63
    term                           shift and go to state 5
    empty                          shift and go to state 21
    statement                      shift and go to state 4
    factor                         shift and go to state 18

state 28

    (3) statements -> statements statement .

    LET             reduce using rule 3 (statements -> statements statement .)
    IF              reduce using rule 3 (statements -> statements statement .)
    FOR             reduce using rule 3 (statements -> statements statement .)
    WHILE           reduce using rule 3 (statements -> statements statement .)
    FUNCTION        reduce using rule 3 (statements -> statements statement .)
    SHOW            reduce using rule 3 (statements -> statements statement .)
    $end            reduce using rule 3 (statements -> statements statement .)
    ELSE            reduce using rule 3 (statements -> statements statement .)
    END             reduce using rule 3 (statements -> statements statement .)
    RBRACE          reduce using rule 3 (statements -> statements statement .)


state 29

    (22) expression -> expression PLUS . term
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) term -> . IDENTIFIER
    (35) term -> . factor
    (36) factor -> . NUMBER
    (37) factor -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 19
    NUMBER          shift and go to state 67
    LPAREN          shift and go to state 68

    term                           shift and go to state 66
    factor                         shift and go to state 18

state 30

    (23) expression -> expression MINUS . term
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) term -> . IDENTIFIER
    (35) term -> . factor
    (36) factor -> . NUMBER
    (37) factor -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 19
    NUMBER          shift and go to state 67
    LPAREN          shift and go to state 68

    term                           shift and go to state 69
    factor                         shift and go to state 18

state 31

    (25) expression -> expression POWER . term
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) term -> . IDENTIFIER
    (35) term -> . factor
    (36) factor -> . NUMBER
    (37) factor -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 19
    NUMBER          shift and go to state 67
    LPAREN          shift and go to state 68

    term                           shift and go to state 70
    factor                         shift and go to state 18

state 32

    (32) term -> term TIMES . factor
    (36) factor -> . NUMBER
    (37) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 67
    LPAREN          shift and go to state 68

    factor                         shift and go to state 71

state 33

    (33) term -> term DIVIDE . factor
    (36) factor -> . NUMBER
    (37) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 67
    LPAREN          shift and go to state 68

    factor                         shift and go to state 72

state 34

    (26) expression -> NOT expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term
    (25) expression -> expression . POWER term

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
    $end            reduce using rule 26 (expression -> NOT expression .)
    RPAREN          reduce using rule 26 (expression -> NOT expression .)
    RBRACKET        reduce using rule 26 (expression -> NOT expression .)
    COMMA           reduce using rule 26 (expression -> NOT expression .)
    IS_LESS_THAN    reduce using rule 26 (expression -> NOT expression .)
    IS_EQUAL_TO     reduce using rule 26 (expression -> NOT expression .)
    IS_GREATER_THAN reduce using rule 26 (expression -> NOT expression .)
    IS_NOT_EQUAL_TO reduce using rule 26 (expression -> NOT expression .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 26 (expression -> NOT expression .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 26 (expression -> NOT expression .)
    LET             reduce using rule 26 (expression -> NOT expression .)
    IF              reduce using rule 26 (expression -> NOT expression .)
    FOR             reduce using rule 26 (expression -> NOT expression .)
    WHILE           reduce using rule 26 (expression -> NOT expression .)
    FUNCTION        reduce using rule 26 (expression -> NOT expression .)
    SHOW            reduce using rule 26 (expression -> NOT expression .)
    ELSE            reduce using rule 26 (expression -> NOT expression .)
    END             reduce using rule 26 (expression -> NOT expression .)
    RBRACE          reduce using rule 26 (expression -> NOT expression .)
    THEN            reduce using rule 26 (expression -> NOT expression .)
    DO              reduce using rule 26 (expression -> NOT expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    POWER           shift and go to state 31

  ! PLUS            [ reduce using rule 26 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 26 (expression -> NOT expression .) ]
  ! POWER           [ reduce using rule 26 (expression -> NOT expression .) ]


state 35

    (27) expression -> LPAREN expression . RPAREN
    (37) factor -> LPAREN expression . RPAREN
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term
    (25) expression -> expression . POWER term

    RPAREN          shift and go to state 73
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    POWER           shift and go to state 31


state 36

    (28) expression -> NUMBER MINUS . term
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) term -> . IDENTIFIER
    (35) term -> . factor
    (36) factor -> . NUMBER
    (37) factor -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 19
    NUMBER          shift and go to state 67
    LPAREN          shift and go to state 68

    term                           shift and go to state 74
    factor                         shift and go to state 18

state 37

    (29) expression -> REAL MINUS . term
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) term -> . IDENTIFIER
    (35) term -> . factor
    (36) factor -> . NUMBER
    (37) factor -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 19
    NUMBER          shift and go to state 67
    LPAREN          shift and go to state 68

    term                           shift and go to state 75
    factor                         shift and go to state 18

state 38

    (30) expression -> CHARACTER PLUS . term
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) term -> . IDENTIFIER
    (35) term -> . factor
    (36) factor -> . NUMBER
    (37) factor -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 19
    NUMBER          shift and go to state 67
    LPAREN          shift and go to state 68

    term                           shift and go to state 76
    factor                         shift and go to state 18

state 39

    (58) list -> LBRACKET expression_list . RBRACKET
    (61) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 77
    COMMA           shift and go to state 78


state 40

    (60) expression_list -> expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term
    (25) expression -> expression . POWER term

    RBRACKET        reduce using rule 60 (expression_list -> expression .)
    COMMA           reduce using rule 60 (expression_list -> expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    POWER           shift and go to state 31


state 41

    (11) assignment -> LET IDENTIFIER . EQUAL expression
    (38) input -> LET IDENTIFIER . EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    EQUAL           shift and go to state 79


state 42

    (13) conditional -> IF condition . THEN statements else_statements_opt END

    THEN            shift and go to state 80


state 43

    (16) condition -> expression . IS_LESS_THAN expression
    (17) condition -> expression . IS_EQUAL_TO expression
    (18) condition -> expression . IS_GREATER_THAN expression
    (19) condition -> expression . IS_NOT_EQUAL_TO expression
    (20) condition -> expression . GREATER_THAN_OR_EQUAL_TO expression
    (21) condition -> expression . LESS_THAN_OR_EQUAL_TO expression
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term
    (25) expression -> expression . POWER term

    IS_LESS_THAN    shift and go to state 81
    IS_EQUAL_TO     shift and go to state 82
    IS_GREATER_THAN shift and go to state 83
    IS_NOT_EQUAL_TO shift and go to state 84
    GREATER_THAN_OR_EQUAL_TO shift and go to state 85
    LESS_THAN_OR_EQUAL_TO shift and go to state 86
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    POWER           shift and go to state 31


state 44

    (56) loop -> FOR IDENTIFIER . IN list DO statements

    IN              shift and go to state 87


state 45

    (57) loop -> WHILE condition . DO statements

    DO              shift and go to state 88


state 46

    (62) function -> FUNCTION IDENTIFIER . LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE

    LPAREN          shift and go to state 89


state 47

    (39) display -> SHOW expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term
    (25) expression -> expression . POWER term
    (2) program -> expression .
    (60) expression_list -> expression .

  ! reduce/reduce conflict for LET resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for IF resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for FOR resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for SHOW resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for $end resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for END resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for RBRACE resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for LET resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for IF resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for FOR resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for SHOW resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for $end resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for END resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for RBRACE resolved using rule 2 (program -> expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    POWER           shift and go to state 31
    LET             reduce using rule 2 (program -> expression .)
    IF              reduce using rule 2 (program -> expression .)
    FOR             reduce using rule 2 (program -> expression .)
    WHILE           reduce using rule 2 (program -> expression .)
    FUNCTION        reduce using rule 2 (program -> expression .)
    SHOW            reduce using rule 2 (program -> expression .)
    $end            reduce using rule 2 (program -> expression .)
    ELSE            reduce using rule 2 (program -> expression .)
    END             reduce using rule 2 (program -> expression .)
    RBRACE          reduce using rule 2 (program -> expression .)
    COMMA           reduce using rule 60 (expression_list -> expression .)

  ! LET             [ reduce using rule 39 (display -> SHOW expression .) ]
  ! IF              [ reduce using rule 39 (display -> SHOW expression .) ]
  ! FOR             [ reduce using rule 39 (display -> SHOW expression .) ]
  ! WHILE           [ reduce using rule 39 (display -> SHOW expression .) ]
  ! FUNCTION        [ reduce using rule 39 (display -> SHOW expression .) ]
  ! SHOW            [ reduce using rule 39 (display -> SHOW expression .) ]
  ! $end            [ reduce using rule 39 (display -> SHOW expression .) ]
  ! ELSE            [ reduce using rule 39 (display -> SHOW expression .) ]
  ! END             [ reduce using rule 39 (display -> SHOW expression .) ]
  ! RBRACE          [ reduce using rule 39 (display -> SHOW expression .) ]
  ! LET             [ reduce using rule 60 (expression_list -> expression .) ]
  ! IF              [ reduce using rule 60 (expression_list -> expression .) ]
  ! FOR             [ reduce using rule 60 (expression_list -> expression .) ]
  ! WHILE           [ reduce using rule 60 (expression_list -> expression .) ]
  ! FUNCTION        [ reduce using rule 60 (expression_list -> expression .) ]
  ! SHOW            [ reduce using rule 60 (expression_list -> expression .) ]
  ! $end            [ reduce using rule 60 (expression_list -> expression .) ]
  ! ELSE            [ reduce using rule 60 (expression_list -> expression .) ]
  ! END             [ reduce using rule 60 (expression_list -> expression .) ]
  ! RBRACE          [ reduce using rule 60 (expression_list -> expression .) ]


state 48

    (40) display -> SHOW STRING_LITERAL .

    LET             reduce using rule 40 (display -> SHOW STRING_LITERAL .)
    IF              reduce using rule 40 (display -> SHOW STRING_LITERAL .)
    FOR             reduce using rule 40 (display -> SHOW STRING_LITERAL .)
    WHILE           reduce using rule 40 (display -> SHOW STRING_LITERAL .)
    FUNCTION        reduce using rule 40 (display -> SHOW STRING_LITERAL .)
    SHOW            reduce using rule 40 (display -> SHOW STRING_LITERAL .)
    $end            reduce using rule 40 (display -> SHOW STRING_LITERAL .)
    ELSE            reduce using rule 40 (display -> SHOW STRING_LITERAL .)
    END             reduce using rule 40 (display -> SHOW STRING_LITERAL .)
    RBRACE          reduce using rule 40 (display -> SHOW STRING_LITERAL .)


state 49

    (41) display -> SHOW IDENTIFIER .
    (34) term -> IDENTIFIER .

  ! reduce/reduce conflict for LET resolved using rule 34 (term -> IDENTIFIER .)
  ! reduce/reduce conflict for IF resolved using rule 34 (term -> IDENTIFIER .)
  ! reduce/reduce conflict for FOR resolved using rule 34 (term -> IDENTIFIER .)
  ! reduce/reduce conflict for WHILE resolved using rule 34 (term -> IDENTIFIER .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 34 (term -> IDENTIFIER .)
  ! reduce/reduce conflict for SHOW resolved using rule 34 (term -> IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 34 (term -> IDENTIFIER .)
  ! reduce/reduce conflict for ELSE resolved using rule 34 (term -> IDENTIFIER .)
  ! reduce/reduce conflict for END resolved using rule 34 (term -> IDENTIFIER .)
  ! reduce/reduce conflict for RBRACE resolved using rule 34 (term -> IDENTIFIER .)
    TIMES           reduce using rule 34 (term -> IDENTIFIER .)
    DIVIDE          reduce using rule 34 (term -> IDENTIFIER .)
    PLUS            reduce using rule 34 (term -> IDENTIFIER .)
    MINUS           reduce using rule 34 (term -> IDENTIFIER .)
    POWER           reduce using rule 34 (term -> IDENTIFIER .)
    LET             reduce using rule 34 (term -> IDENTIFIER .)
    IF              reduce using rule 34 (term -> IDENTIFIER .)
    FOR             reduce using rule 34 (term -> IDENTIFIER .)
    WHILE           reduce using rule 34 (term -> IDENTIFIER .)
    FUNCTION        reduce using rule 34 (term -> IDENTIFIER .)
    SHOW            reduce using rule 34 (term -> IDENTIFIER .)
    $end            reduce using rule 34 (term -> IDENTIFIER .)
    ELSE            reduce using rule 34 (term -> IDENTIFIER .)
    END             reduce using rule 34 (term -> IDENTIFIER .)
    RBRACE          reduce using rule 34 (term -> IDENTIFIER .)
    COMMA           reduce using rule 34 (term -> IDENTIFIER .)

  ! LET             [ reduce using rule 41 (display -> SHOW IDENTIFIER .) ]
  ! IF              [ reduce using rule 41 (display -> SHOW IDENTIFIER .) ]
  ! FOR             [ reduce using rule 41 (display -> SHOW IDENTIFIER .) ]
  ! WHILE           [ reduce using rule 41 (display -> SHOW IDENTIFIER .) ]
  ! FUNCTION        [ reduce using rule 41 (display -> SHOW IDENTIFIER .) ]
  ! SHOW            [ reduce using rule 41 (display -> SHOW IDENTIFIER .) ]
  ! $end            [ reduce using rule 41 (display -> SHOW IDENTIFIER .) ]
  ! ELSE            [ reduce using rule 41 (display -> SHOW IDENTIFIER .) ]
  ! END             [ reduce using rule 41 (display -> SHOW IDENTIFIER .) ]
  ! RBRACE          [ reduce using rule 41 (display -> SHOW IDENTIFIER .) ]


state 50

    (42) display -> SHOW NUMBER .
    (28) expression -> NUMBER . MINUS term
    (36) factor -> NUMBER .

  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for LET resolved using rule 36 (factor -> NUMBER .)
  ! reduce/reduce conflict for IF resolved using rule 36 (factor -> NUMBER .)
  ! reduce/reduce conflict for FOR resolved using rule 36 (factor -> NUMBER .)
  ! reduce/reduce conflict for WHILE resolved using rule 36 (factor -> NUMBER .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 36 (factor -> NUMBER .)
  ! reduce/reduce conflict for SHOW resolved using rule 36 (factor -> NUMBER .)
  ! reduce/reduce conflict for $end resolved using rule 36 (factor -> NUMBER .)
  ! reduce/reduce conflict for ELSE resolved using rule 36 (factor -> NUMBER .)
  ! reduce/reduce conflict for END resolved using rule 36 (factor -> NUMBER .)
  ! reduce/reduce conflict for RBRACE resolved using rule 36 (factor -> NUMBER .)
    MINUS           shift and go to state 36
    TIMES           reduce using rule 36 (factor -> NUMBER .)
    DIVIDE          reduce using rule 36 (factor -> NUMBER .)
    PLUS            reduce using rule 36 (factor -> NUMBER .)
    POWER           reduce using rule 36 (factor -> NUMBER .)
    LET             reduce using rule 36 (factor -> NUMBER .)
    IF              reduce using rule 36 (factor -> NUMBER .)
    FOR             reduce using rule 36 (factor -> NUMBER .)
    WHILE           reduce using rule 36 (factor -> NUMBER .)
    FUNCTION        reduce using rule 36 (factor -> NUMBER .)
    SHOW            reduce using rule 36 (factor -> NUMBER .)
    $end            reduce using rule 36 (factor -> NUMBER .)
    ELSE            reduce using rule 36 (factor -> NUMBER .)
    END             reduce using rule 36 (factor -> NUMBER .)
    RBRACE          reduce using rule 36 (factor -> NUMBER .)
    COMMA           reduce using rule 36 (factor -> NUMBER .)

  ! LET             [ reduce using rule 42 (display -> SHOW NUMBER .) ]
  ! IF              [ reduce using rule 42 (display -> SHOW NUMBER .) ]
  ! FOR             [ reduce using rule 42 (display -> SHOW NUMBER .) ]
  ! WHILE           [ reduce using rule 42 (display -> SHOW NUMBER .) ]
  ! FUNCTION        [ reduce using rule 42 (display -> SHOW NUMBER .) ]
  ! SHOW            [ reduce using rule 42 (display -> SHOW NUMBER .) ]
  ! $end            [ reduce using rule 42 (display -> SHOW NUMBER .) ]
  ! ELSE            [ reduce using rule 42 (display -> SHOW NUMBER .) ]
  ! END             [ reduce using rule 42 (display -> SHOW NUMBER .) ]
  ! RBRACE          [ reduce using rule 42 (display -> SHOW NUMBER .) ]
  ! MINUS           [ reduce using rule 36 (factor -> NUMBER .) ]


state 51

    (43) display -> SHOW REAL .
    (29) expression -> REAL . MINUS term

    LET             reduce using rule 43 (display -> SHOW REAL .)
    IF              reduce using rule 43 (display -> SHOW REAL .)
    FOR             reduce using rule 43 (display -> SHOW REAL .)
    WHILE           reduce using rule 43 (display -> SHOW REAL .)
    FUNCTION        reduce using rule 43 (display -> SHOW REAL .)
    SHOW            reduce using rule 43 (display -> SHOW REAL .)
    $end            reduce using rule 43 (display -> SHOW REAL .)
    ELSE            reduce using rule 43 (display -> SHOW REAL .)
    END             reduce using rule 43 (display -> SHOW REAL .)
    RBRACE          reduce using rule 43 (display -> SHOW REAL .)
    MINUS           shift and go to state 37


state 52

    (44) display -> SHOW CHARACTER .
    (30) expression -> CHARACTER . PLUS term

    LET             reduce using rule 44 (display -> SHOW CHARACTER .)
    IF              reduce using rule 44 (display -> SHOW CHARACTER .)
    FOR             reduce using rule 44 (display -> SHOW CHARACTER .)
    WHILE           reduce using rule 44 (display -> SHOW CHARACTER .)
    FUNCTION        reduce using rule 44 (display -> SHOW CHARACTER .)
    SHOW            reduce using rule 44 (display -> SHOW CHARACTER .)
    $end            reduce using rule 44 (display -> SHOW CHARACTER .)
    ELSE            reduce using rule 44 (display -> SHOW CHARACTER .)
    END             reduce using rule 44 (display -> SHOW CHARACTER .)
    RBRACE          reduce using rule 44 (display -> SHOW CHARACTER .)
    PLUS            shift and go to state 38


state 53

    (45) display -> SHOW list .
    (31) expression -> list .

  ! reduce/reduce conflict for LET resolved using rule 31 (expression -> list .)
  ! reduce/reduce conflict for IF resolved using rule 31 (expression -> list .)
  ! reduce/reduce conflict for FOR resolved using rule 31 (expression -> list .)
  ! reduce/reduce conflict for WHILE resolved using rule 31 (expression -> list .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 31 (expression -> list .)
  ! reduce/reduce conflict for SHOW resolved using rule 31 (expression -> list .)
  ! reduce/reduce conflict for $end resolved using rule 31 (expression -> list .)
  ! reduce/reduce conflict for ELSE resolved using rule 31 (expression -> list .)
  ! reduce/reduce conflict for END resolved using rule 31 (expression -> list .)
  ! reduce/reduce conflict for RBRACE resolved using rule 31 (expression -> list .)
    PLUS            reduce using rule 31 (expression -> list .)
    MINUS           reduce using rule 31 (expression -> list .)
    POWER           reduce using rule 31 (expression -> list .)
    LET             reduce using rule 31 (expression -> list .)
    IF              reduce using rule 31 (expression -> list .)
    FOR             reduce using rule 31 (expression -> list .)
    WHILE           reduce using rule 31 (expression -> list .)
    FUNCTION        reduce using rule 31 (expression -> list .)
    SHOW            reduce using rule 31 (expression -> list .)
    $end            reduce using rule 31 (expression -> list .)
    ELSE            reduce using rule 31 (expression -> list .)
    END             reduce using rule 31 (expression -> list .)
    RBRACE          reduce using rule 31 (expression -> list .)
    COMMA           reduce using rule 31 (expression -> list .)

  ! LET             [ reduce using rule 45 (display -> SHOW list .) ]
  ! IF              [ reduce using rule 45 (display -> SHOW list .) ]
  ! FOR             [ reduce using rule 45 (display -> SHOW list .) ]
  ! WHILE           [ reduce using rule 45 (display -> SHOW list .) ]
  ! FUNCTION        [ reduce using rule 45 (display -> SHOW list .) ]
  ! SHOW            [ reduce using rule 45 (display -> SHOW list .) ]
  ! $end            [ reduce using rule 45 (display -> SHOW list .) ]
  ! ELSE            [ reduce using rule 45 (display -> SHOW list .) ]
  ! END             [ reduce using rule 45 (display -> SHOW list .) ]
  ! RBRACE          [ reduce using rule 45 (display -> SHOW list .) ]


state 54

    (46) display -> SHOW function .
    (8) statement -> function .

  ! reduce/reduce conflict for LET resolved using rule 8 (statement -> function .)
  ! reduce/reduce conflict for IF resolved using rule 8 (statement -> function .)
  ! reduce/reduce conflict for FOR resolved using rule 8 (statement -> function .)
  ! reduce/reduce conflict for WHILE resolved using rule 8 (statement -> function .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 8 (statement -> function .)
  ! reduce/reduce conflict for SHOW resolved using rule 8 (statement -> function .)
  ! reduce/reduce conflict for $end resolved using rule 8 (statement -> function .)
  ! reduce/reduce conflict for ELSE resolved using rule 8 (statement -> function .)
  ! reduce/reduce conflict for END resolved using rule 8 (statement -> function .)
  ! reduce/reduce conflict for RBRACE resolved using rule 8 (statement -> function .)
    LET             reduce using rule 8 (statement -> function .)
    IF              reduce using rule 8 (statement -> function .)
    FOR             reduce using rule 8 (statement -> function .)
    WHILE           reduce using rule 8 (statement -> function .)
    FUNCTION        reduce using rule 8 (statement -> function .)
    SHOW            reduce using rule 8 (statement -> function .)
    $end            reduce using rule 8 (statement -> function .)
    ELSE            reduce using rule 8 (statement -> function .)
    END             reduce using rule 8 (statement -> function .)
    RBRACE          reduce using rule 8 (statement -> function .)

  ! LET             [ reduce using rule 46 (display -> SHOW function .) ]
  ! IF              [ reduce using rule 46 (display -> SHOW function .) ]
  ! FOR             [ reduce using rule 46 (display -> SHOW function .) ]
  ! WHILE           [ reduce using rule 46 (display -> SHOW function .) ]
  ! FUNCTION        [ reduce using rule 46 (display -> SHOW function .) ]
  ! SHOW            [ reduce using rule 46 (display -> SHOW function .) ]
  ! $end            [ reduce using rule 46 (display -> SHOW function .) ]
  ! ELSE            [ reduce using rule 46 (display -> SHOW function .) ]
  ! END             [ reduce using rule 46 (display -> SHOW function .) ]
  ! RBRACE          [ reduce using rule 46 (display -> SHOW function .) ]


state 55

    (47) display -> SHOW conditional .
    (6) statement -> conditional .

  ! reduce/reduce conflict for LET resolved using rule 6 (statement -> conditional .)
  ! reduce/reduce conflict for IF resolved using rule 6 (statement -> conditional .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (statement -> conditional .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (statement -> conditional .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 6 (statement -> conditional .)
  ! reduce/reduce conflict for SHOW resolved using rule 6 (statement -> conditional .)
  ! reduce/reduce conflict for $end resolved using rule 6 (statement -> conditional .)
  ! reduce/reduce conflict for ELSE resolved using rule 6 (statement -> conditional .)
  ! reduce/reduce conflict for END resolved using rule 6 (statement -> conditional .)
  ! reduce/reduce conflict for RBRACE resolved using rule 6 (statement -> conditional .)
    LET             reduce using rule 6 (statement -> conditional .)
    IF              reduce using rule 6 (statement -> conditional .)
    FOR             reduce using rule 6 (statement -> conditional .)
    WHILE           reduce using rule 6 (statement -> conditional .)
    FUNCTION        reduce using rule 6 (statement -> conditional .)
    SHOW            reduce using rule 6 (statement -> conditional .)
    $end            reduce using rule 6 (statement -> conditional .)
    ELSE            reduce using rule 6 (statement -> conditional .)
    END             reduce using rule 6 (statement -> conditional .)
    RBRACE          reduce using rule 6 (statement -> conditional .)

  ! LET             [ reduce using rule 47 (display -> SHOW conditional .) ]
  ! IF              [ reduce using rule 47 (display -> SHOW conditional .) ]
  ! FOR             [ reduce using rule 47 (display -> SHOW conditional .) ]
  ! WHILE           [ reduce using rule 47 (display -> SHOW conditional .) ]
  ! FUNCTION        [ reduce using rule 47 (display -> SHOW conditional .) ]
  ! SHOW            [ reduce using rule 47 (display -> SHOW conditional .) ]
  ! $end            [ reduce using rule 47 (display -> SHOW conditional .) ]
  ! ELSE            [ reduce using rule 47 (display -> SHOW conditional .) ]
  ! END             [ reduce using rule 47 (display -> SHOW conditional .) ]
  ! RBRACE          [ reduce using rule 47 (display -> SHOW conditional .) ]


state 56

    (48) display -> SHOW loop .
    (7) statement -> loop .

  ! reduce/reduce conflict for LET resolved using rule 7 (statement -> loop .)
  ! reduce/reduce conflict for IF resolved using rule 7 (statement -> loop .)
  ! reduce/reduce conflict for FOR resolved using rule 7 (statement -> loop .)
  ! reduce/reduce conflict for WHILE resolved using rule 7 (statement -> loop .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 7 (statement -> loop .)
  ! reduce/reduce conflict for SHOW resolved using rule 7 (statement -> loop .)
  ! reduce/reduce conflict for $end resolved using rule 7 (statement -> loop .)
  ! reduce/reduce conflict for ELSE resolved using rule 7 (statement -> loop .)
  ! reduce/reduce conflict for END resolved using rule 7 (statement -> loop .)
  ! reduce/reduce conflict for RBRACE resolved using rule 7 (statement -> loop .)
    LET             reduce using rule 7 (statement -> loop .)
    IF              reduce using rule 7 (statement -> loop .)
    FOR             reduce using rule 7 (statement -> loop .)
    WHILE           reduce using rule 7 (statement -> loop .)
    FUNCTION        reduce using rule 7 (statement -> loop .)
    SHOW            reduce using rule 7 (statement -> loop .)
    $end            reduce using rule 7 (statement -> loop .)
    ELSE            reduce using rule 7 (statement -> loop .)
    END             reduce using rule 7 (statement -> loop .)
    RBRACE          reduce using rule 7 (statement -> loop .)

  ! LET             [ reduce using rule 48 (display -> SHOW loop .) ]
  ! IF              [ reduce using rule 48 (display -> SHOW loop .) ]
  ! FOR             [ reduce using rule 48 (display -> SHOW loop .) ]
  ! WHILE           [ reduce using rule 48 (display -> SHOW loop .) ]
  ! FUNCTION        [ reduce using rule 48 (display -> SHOW loop .) ]
  ! SHOW            [ reduce using rule 48 (display -> SHOW loop .) ]
  ! $end            [ reduce using rule 48 (display -> SHOW loop .) ]
  ! ELSE            [ reduce using rule 48 (display -> SHOW loop .) ]
  ! END             [ reduce using rule 48 (display -> SHOW loop .) ]
  ! RBRACE          [ reduce using rule 48 (display -> SHOW loop .) ]


state 57

    (49) display -> SHOW input .
    (10) statement -> input .

  ! reduce/reduce conflict for LET resolved using rule 10 (statement -> input .)
  ! reduce/reduce conflict for IF resolved using rule 10 (statement -> input .)
  ! reduce/reduce conflict for FOR resolved using rule 10 (statement -> input .)
  ! reduce/reduce conflict for WHILE resolved using rule 10 (statement -> input .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 10 (statement -> input .)
  ! reduce/reduce conflict for SHOW resolved using rule 10 (statement -> input .)
  ! reduce/reduce conflict for $end resolved using rule 10 (statement -> input .)
  ! reduce/reduce conflict for ELSE resolved using rule 10 (statement -> input .)
  ! reduce/reduce conflict for END resolved using rule 10 (statement -> input .)
  ! reduce/reduce conflict for RBRACE resolved using rule 10 (statement -> input .)
    LET             reduce using rule 10 (statement -> input .)
    IF              reduce using rule 10 (statement -> input .)
    FOR             reduce using rule 10 (statement -> input .)
    WHILE           reduce using rule 10 (statement -> input .)
    FUNCTION        reduce using rule 10 (statement -> input .)
    SHOW            reduce using rule 10 (statement -> input .)
    $end            reduce using rule 10 (statement -> input .)
    ELSE            reduce using rule 10 (statement -> input .)
    END             reduce using rule 10 (statement -> input .)
    RBRACE          reduce using rule 10 (statement -> input .)

  ! LET             [ reduce using rule 49 (display -> SHOW input .) ]
  ! IF              [ reduce using rule 49 (display -> SHOW input .) ]
  ! FOR             [ reduce using rule 49 (display -> SHOW input .) ]
  ! WHILE           [ reduce using rule 49 (display -> SHOW input .) ]
  ! FUNCTION        [ reduce using rule 49 (display -> SHOW input .) ]
  ! SHOW            [ reduce using rule 49 (display -> SHOW input .) ]
  ! $end            [ reduce using rule 49 (display -> SHOW input .) ]
  ! ELSE            [ reduce using rule 49 (display -> SHOW input .) ]
  ! END             [ reduce using rule 49 (display -> SHOW input .) ]
  ! RBRACE          [ reduce using rule 49 (display -> SHOW input .) ]


state 58

    (50) display -> SHOW comment .

    LET             reduce using rule 50 (display -> SHOW comment .)
    IF              reduce using rule 50 (display -> SHOW comment .)
    FOR             reduce using rule 50 (display -> SHOW comment .)
    WHILE           reduce using rule 50 (display -> SHOW comment .)
    FUNCTION        reduce using rule 50 (display -> SHOW comment .)
    SHOW            reduce using rule 50 (display -> SHOW comment .)
    $end            reduce using rule 50 (display -> SHOW comment .)
    ELSE            reduce using rule 50 (display -> SHOW comment .)
    END             reduce using rule 50 (display -> SHOW comment .)
    RBRACE          reduce using rule 50 (display -> SHOW comment .)


state 59

    (51) display -> SHOW program .

    LET             reduce using rule 51 (display -> SHOW program .)
    IF              reduce using rule 51 (display -> SHOW program .)
    FOR             reduce using rule 51 (display -> SHOW program .)
    WHILE           reduce using rule 51 (display -> SHOW program .)
    FUNCTION        reduce using rule 51 (display -> SHOW program .)
    SHOW            reduce using rule 51 (display -> SHOW program .)
    $end            reduce using rule 51 (display -> SHOW program .)
    ELSE            reduce using rule 51 (display -> SHOW program .)
    END             reduce using rule 51 (display -> SHOW program .)
    RBRACE          reduce using rule 51 (display -> SHOW program .)


state 60

    (52) display -> SHOW statements .
    (1) program -> statements .
    (3) statements -> statements . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (13) conditional -> . IF condition THEN statements else_statements_opt END
    (56) loop -> . FOR IDENTIFIER IN list DO statements
    (57) loop -> . WHILE condition DO statements
    (62) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (39) display -> . SHOW expression
    (40) display -> . SHOW STRING_LITERAL
    (41) display -> . SHOW IDENTIFIER
    (42) display -> . SHOW NUMBER
    (43) display -> . SHOW REAL
    (44) display -> . SHOW CHARACTER
    (45) display -> . SHOW list
    (46) display -> . SHOW function
    (47) display -> . SHOW conditional
    (48) display -> . SHOW loop
    (49) display -> . SHOW input
    (50) display -> . SHOW comment
    (51) display -> . SHOW program
    (52) display -> . SHOW statements
    (53) display -> . SHOW expression_list
    (54) display -> . SHOW assignment
    (55) display -> . SHOW display
    (38) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

  ! reduce/reduce conflict for LET resolved using rule 1 (program -> statements .)
  ! reduce/reduce conflict for IF resolved using rule 1 (program -> statements .)
  ! reduce/reduce conflict for FOR resolved using rule 1 (program -> statements .)
  ! reduce/reduce conflict for WHILE resolved using rule 1 (program -> statements .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 1 (program -> statements .)
  ! reduce/reduce conflict for SHOW resolved using rule 1 (program -> statements .)
  ! reduce/reduce conflict for $end resolved using rule 1 (program -> statements .)
  ! reduce/reduce conflict for ELSE resolved using rule 1 (program -> statements .)
  ! reduce/reduce conflict for END resolved using rule 1 (program -> statements .)
  ! reduce/reduce conflict for RBRACE resolved using rule 1 (program -> statements .)
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for SHOW resolved as shift
    $end            reduce using rule 1 (program -> statements .)
    ELSE            reduce using rule 1 (program -> statements .)
    END             reduce using rule 1 (program -> statements .)
    RBRACE          reduce using rule 1 (program -> statements .)
    LET             shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25
    FUNCTION        shift and go to state 26
    SHOW            shift and go to state 27

  ! LET             [ reduce using rule 52 (display -> SHOW statements .) ]
  ! IF              [ reduce using rule 52 (display -> SHOW statements .) ]
  ! FOR             [ reduce using rule 52 (display -> SHOW statements .) ]
  ! WHILE           [ reduce using rule 52 (display -> SHOW statements .) ]
  ! FUNCTION        [ reduce using rule 52 (display -> SHOW statements .) ]
  ! SHOW            [ reduce using rule 52 (display -> SHOW statements .) ]
  ! $end            [ reduce using rule 52 (display -> SHOW statements .) ]
  ! ELSE            [ reduce using rule 52 (display -> SHOW statements .) ]
  ! END             [ reduce using rule 52 (display -> SHOW statements .) ]
  ! RBRACE          [ reduce using rule 52 (display -> SHOW statements .) ]
  ! LET             [ reduce using rule 1 (program -> statements .) ]
  ! IF              [ reduce using rule 1 (program -> statements .) ]
  ! FOR             [ reduce using rule 1 (program -> statements .) ]
  ! WHILE           [ reduce using rule 1 (program -> statements .) ]
  ! FUNCTION        [ reduce using rule 1 (program -> statements .) ]
  ! SHOW            [ reduce using rule 1 (program -> statements .) ]

    statement                      shift and go to state 28
    assignment                     shift and go to state 12
    conditional                    shift and go to state 13
    loop                           shift and go to state 14
    function                       shift and go to state 15
    display                        shift and go to state 16
    input                          shift and go to state 17

state 61

    (53) display -> SHOW expression_list .
    (61) expression_list -> expression_list . COMMA expression

    LET             reduce using rule 53 (display -> SHOW expression_list .)
    IF              reduce using rule 53 (display -> SHOW expression_list .)
    FOR             reduce using rule 53 (display -> SHOW expression_list .)
    WHILE           reduce using rule 53 (display -> SHOW expression_list .)
    FUNCTION        reduce using rule 53 (display -> SHOW expression_list .)
    SHOW            reduce using rule 53 (display -> SHOW expression_list .)
    $end            reduce using rule 53 (display -> SHOW expression_list .)
    ELSE            reduce using rule 53 (display -> SHOW expression_list .)
    END             reduce using rule 53 (display -> SHOW expression_list .)
    RBRACE          reduce using rule 53 (display -> SHOW expression_list .)
    COMMA           shift and go to state 78


state 62

    (54) display -> SHOW assignment .
    (5) statement -> assignment .

  ! reduce/reduce conflict for LET resolved using rule 5 (statement -> assignment .)
  ! reduce/reduce conflict for IF resolved using rule 5 (statement -> assignment .)
  ! reduce/reduce conflict for FOR resolved using rule 5 (statement -> assignment .)
  ! reduce/reduce conflict for WHILE resolved using rule 5 (statement -> assignment .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 5 (statement -> assignment .)
  ! reduce/reduce conflict for SHOW resolved using rule 5 (statement -> assignment .)
  ! reduce/reduce conflict for $end resolved using rule 5 (statement -> assignment .)
  ! reduce/reduce conflict for ELSE resolved using rule 5 (statement -> assignment .)
  ! reduce/reduce conflict for END resolved using rule 5 (statement -> assignment .)
  ! reduce/reduce conflict for RBRACE resolved using rule 5 (statement -> assignment .)
    LET             reduce using rule 5 (statement -> assignment .)
    IF              reduce using rule 5 (statement -> assignment .)
    FOR             reduce using rule 5 (statement -> assignment .)
    WHILE           reduce using rule 5 (statement -> assignment .)
    FUNCTION        reduce using rule 5 (statement -> assignment .)
    SHOW            reduce using rule 5 (statement -> assignment .)
    $end            reduce using rule 5 (statement -> assignment .)
    ELSE            reduce using rule 5 (statement -> assignment .)
    END             reduce using rule 5 (statement -> assignment .)
    RBRACE          reduce using rule 5 (statement -> assignment .)

  ! LET             [ reduce using rule 54 (display -> SHOW assignment .) ]
  ! IF              [ reduce using rule 54 (display -> SHOW assignment .) ]
  ! FOR             [ reduce using rule 54 (display -> SHOW assignment .) ]
  ! WHILE           [ reduce using rule 54 (display -> SHOW assignment .) ]
  ! FUNCTION        [ reduce using rule 54 (display -> SHOW assignment .) ]
  ! SHOW            [ reduce using rule 54 (display -> SHOW assignment .) ]
  ! $end            [ reduce using rule 54 (display -> SHOW assignment .) ]
  ! ELSE            [ reduce using rule 54 (display -> SHOW assignment .) ]
  ! END             [ reduce using rule 54 (display -> SHOW assignment .) ]
  ! RBRACE          [ reduce using rule 54 (display -> SHOW assignment .) ]


state 63

    (55) display -> SHOW display .
    (9) statement -> display .

  ! reduce/reduce conflict for LET resolved using rule 9 (statement -> display .)
  ! reduce/reduce conflict for IF resolved using rule 9 (statement -> display .)
  ! reduce/reduce conflict for FOR resolved using rule 9 (statement -> display .)
  ! reduce/reduce conflict for WHILE resolved using rule 9 (statement -> display .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 9 (statement -> display .)
  ! reduce/reduce conflict for SHOW resolved using rule 9 (statement -> display .)
  ! reduce/reduce conflict for $end resolved using rule 9 (statement -> display .)
  ! reduce/reduce conflict for ELSE resolved using rule 9 (statement -> display .)
  ! reduce/reduce conflict for END resolved using rule 9 (statement -> display .)
  ! reduce/reduce conflict for RBRACE resolved using rule 9 (statement -> display .)
    LET             reduce using rule 9 (statement -> display .)
    IF              reduce using rule 9 (statement -> display .)
    FOR             reduce using rule 9 (statement -> display .)
    WHILE           reduce using rule 9 (statement -> display .)
    FUNCTION        reduce using rule 9 (statement -> display .)
    SHOW            reduce using rule 9 (statement -> display .)
    $end            reduce using rule 9 (statement -> display .)
    ELSE            reduce using rule 9 (statement -> display .)
    END             reduce using rule 9 (statement -> display .)
    RBRACE          reduce using rule 9 (statement -> display .)

  ! LET             [ reduce using rule 55 (display -> SHOW display .) ]
  ! IF              [ reduce using rule 55 (display -> SHOW display .) ]
  ! FOR             [ reduce using rule 55 (display -> SHOW display .) ]
  ! WHILE           [ reduce using rule 55 (display -> SHOW display .) ]
  ! FUNCTION        [ reduce using rule 55 (display -> SHOW display .) ]
  ! SHOW            [ reduce using rule 55 (display -> SHOW display .) ]
  ! $end            [ reduce using rule 55 (display -> SHOW display .) ]
  ! ELSE            [ reduce using rule 55 (display -> SHOW display .) ]
  ! END             [ reduce using rule 55 (display -> SHOW display .) ]
  ! RBRACE          [ reduce using rule 55 (display -> SHOW display .) ]


state 64

    (38) input -> LET . IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN
    (11) assignment -> LET . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 90


state 65

    (12) comment -> COMMENT .

    LET             reduce using rule 12 (comment -> COMMENT .)
    IF              reduce using rule 12 (comment -> COMMENT .)
    FOR             reduce using rule 12 (comment -> COMMENT .)
    WHILE           reduce using rule 12 (comment -> COMMENT .)
    FUNCTION        reduce using rule 12 (comment -> COMMENT .)
    SHOW            reduce using rule 12 (comment -> COMMENT .)
    $end            reduce using rule 12 (comment -> COMMENT .)
    ELSE            reduce using rule 12 (comment -> COMMENT .)
    END             reduce using rule 12 (comment -> COMMENT .)
    RBRACE          reduce using rule 12 (comment -> COMMENT .)


state 66

    (22) expression -> expression PLUS term .
    (32) term -> term . TIMES factor
    (33) term -> term . DIVIDE factor

    PLUS            reduce using rule 22 (expression -> expression PLUS term .)
    MINUS           reduce using rule 22 (expression -> expression PLUS term .)
    POWER           reduce using rule 22 (expression -> expression PLUS term .)
    $end            reduce using rule 22 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 22 (expression -> expression PLUS term .)
    RBRACKET        reduce using rule 22 (expression -> expression PLUS term .)
    COMMA           reduce using rule 22 (expression -> expression PLUS term .)
    IS_LESS_THAN    reduce using rule 22 (expression -> expression PLUS term .)
    IS_EQUAL_TO     reduce using rule 22 (expression -> expression PLUS term .)
    IS_GREATER_THAN reduce using rule 22 (expression -> expression PLUS term .)
    IS_NOT_EQUAL_TO reduce using rule 22 (expression -> expression PLUS term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 22 (expression -> expression PLUS term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 22 (expression -> expression PLUS term .)
    LET             reduce using rule 22 (expression -> expression PLUS term .)
    IF              reduce using rule 22 (expression -> expression PLUS term .)
    FOR             reduce using rule 22 (expression -> expression PLUS term .)
    WHILE           reduce using rule 22 (expression -> expression PLUS term .)
    FUNCTION        reduce using rule 22 (expression -> expression PLUS term .)
    SHOW            reduce using rule 22 (expression -> expression PLUS term .)
    ELSE            reduce using rule 22 (expression -> expression PLUS term .)
    END             reduce using rule 22 (expression -> expression PLUS term .)
    RBRACE          reduce using rule 22 (expression -> expression PLUS term .)
    THEN            reduce using rule 22 (expression -> expression PLUS term .)
    DO              reduce using rule 22 (expression -> expression PLUS term .)
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33


state 67

    (36) factor -> NUMBER .

    TIMES           reduce using rule 36 (factor -> NUMBER .)
    DIVIDE          reduce using rule 36 (factor -> NUMBER .)
    PLUS            reduce using rule 36 (factor -> NUMBER .)
    MINUS           reduce using rule 36 (factor -> NUMBER .)
    POWER           reduce using rule 36 (factor -> NUMBER .)
    $end            reduce using rule 36 (factor -> NUMBER .)
    RPAREN          reduce using rule 36 (factor -> NUMBER .)
    RBRACKET        reduce using rule 36 (factor -> NUMBER .)
    COMMA           reduce using rule 36 (factor -> NUMBER .)
    IS_LESS_THAN    reduce using rule 36 (factor -> NUMBER .)
    IS_EQUAL_TO     reduce using rule 36 (factor -> NUMBER .)
    IS_GREATER_THAN reduce using rule 36 (factor -> NUMBER .)
    IS_NOT_EQUAL_TO reduce using rule 36 (factor -> NUMBER .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 36 (factor -> NUMBER .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 36 (factor -> NUMBER .)
    LET             reduce using rule 36 (factor -> NUMBER .)
    IF              reduce using rule 36 (factor -> NUMBER .)
    FOR             reduce using rule 36 (factor -> NUMBER .)
    WHILE           reduce using rule 36 (factor -> NUMBER .)
    FUNCTION        reduce using rule 36 (factor -> NUMBER .)
    SHOW            reduce using rule 36 (factor -> NUMBER .)
    ELSE            reduce using rule 36 (factor -> NUMBER .)
    END             reduce using rule 36 (factor -> NUMBER .)
    RBRACE          reduce using rule 36 (factor -> NUMBER .)
    THEN            reduce using rule 36 (factor -> NUMBER .)
    DO              reduce using rule 36 (factor -> NUMBER .)


state 68

    (37) factor -> LPAREN . expression RPAREN
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) expression -> . expression POWER term
    (26) expression -> . NOT expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . NUMBER MINUS term
    (29) expression -> . REAL MINUS term
    (30) expression -> . CHARACTER PLUS term
    (31) expression -> . list
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) term -> . IDENTIFIER
    (35) term -> . factor
    (58) list -> . LBRACKET expression_list RBRACKET
    (59) list -> . empty
    (36) factor -> . NUMBER
    (37) factor -> . LPAREN expression RPAREN
    (67) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    RPAREN          reduce using rule 67 (empty -> .)
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    POWER           reduce using rule 67 (empty -> .)

    expression                     shift and go to state 91
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 69

    (23) expression -> expression MINUS term .
    (32) term -> term . TIMES factor
    (33) term -> term . DIVIDE factor

    PLUS            reduce using rule 23 (expression -> expression MINUS term .)
    MINUS           reduce using rule 23 (expression -> expression MINUS term .)
    POWER           reduce using rule 23 (expression -> expression MINUS term .)
    $end            reduce using rule 23 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 23 (expression -> expression MINUS term .)
    RBRACKET        reduce using rule 23 (expression -> expression MINUS term .)
    COMMA           reduce using rule 23 (expression -> expression MINUS term .)
    IS_LESS_THAN    reduce using rule 23 (expression -> expression MINUS term .)
    IS_EQUAL_TO     reduce using rule 23 (expression -> expression MINUS term .)
    IS_GREATER_THAN reduce using rule 23 (expression -> expression MINUS term .)
    IS_NOT_EQUAL_TO reduce using rule 23 (expression -> expression MINUS term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 23 (expression -> expression MINUS term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 23 (expression -> expression MINUS term .)
    LET             reduce using rule 23 (expression -> expression MINUS term .)
    IF              reduce using rule 23 (expression -> expression MINUS term .)
    FOR             reduce using rule 23 (expression -> expression MINUS term .)
    WHILE           reduce using rule 23 (expression -> expression MINUS term .)
    FUNCTION        reduce using rule 23 (expression -> expression MINUS term .)
    SHOW            reduce using rule 23 (expression -> expression MINUS term .)
    ELSE            reduce using rule 23 (expression -> expression MINUS term .)
    END             reduce using rule 23 (expression -> expression MINUS term .)
    RBRACE          reduce using rule 23 (expression -> expression MINUS term .)
    THEN            reduce using rule 23 (expression -> expression MINUS term .)
    DO              reduce using rule 23 (expression -> expression MINUS term .)
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33


state 70

    (25) expression -> expression POWER term .
    (32) term -> term . TIMES factor
    (33) term -> term . DIVIDE factor

    PLUS            reduce using rule 25 (expression -> expression POWER term .)
    MINUS           reduce using rule 25 (expression -> expression POWER term .)
    POWER           reduce using rule 25 (expression -> expression POWER term .)
    $end            reduce using rule 25 (expression -> expression POWER term .)
    RPAREN          reduce using rule 25 (expression -> expression POWER term .)
    RBRACKET        reduce using rule 25 (expression -> expression POWER term .)
    COMMA           reduce using rule 25 (expression -> expression POWER term .)
    IS_LESS_THAN    reduce using rule 25 (expression -> expression POWER term .)
    IS_EQUAL_TO     reduce using rule 25 (expression -> expression POWER term .)
    IS_GREATER_THAN reduce using rule 25 (expression -> expression POWER term .)
    IS_NOT_EQUAL_TO reduce using rule 25 (expression -> expression POWER term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 25 (expression -> expression POWER term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 25 (expression -> expression POWER term .)
    LET             reduce using rule 25 (expression -> expression POWER term .)
    IF              reduce using rule 25 (expression -> expression POWER term .)
    FOR             reduce using rule 25 (expression -> expression POWER term .)
    WHILE           reduce using rule 25 (expression -> expression POWER term .)
    FUNCTION        reduce using rule 25 (expression -> expression POWER term .)
    SHOW            reduce using rule 25 (expression -> expression POWER term .)
    ELSE            reduce using rule 25 (expression -> expression POWER term .)
    END             reduce using rule 25 (expression -> expression POWER term .)
    RBRACE          reduce using rule 25 (expression -> expression POWER term .)
    THEN            reduce using rule 25 (expression -> expression POWER term .)
    DO              reduce using rule 25 (expression -> expression POWER term .)
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33


state 71

    (32) term -> term TIMES factor .

    TIMES           reduce using rule 32 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 32 (term -> term TIMES factor .)
    PLUS            reduce using rule 32 (term -> term TIMES factor .)
    MINUS           reduce using rule 32 (term -> term TIMES factor .)
    POWER           reduce using rule 32 (term -> term TIMES factor .)
    $end            reduce using rule 32 (term -> term TIMES factor .)
    RPAREN          reduce using rule 32 (term -> term TIMES factor .)
    RBRACKET        reduce using rule 32 (term -> term TIMES factor .)
    COMMA           reduce using rule 32 (term -> term TIMES factor .)
    IS_LESS_THAN    reduce using rule 32 (term -> term TIMES factor .)
    IS_EQUAL_TO     reduce using rule 32 (term -> term TIMES factor .)
    IS_GREATER_THAN reduce using rule 32 (term -> term TIMES factor .)
    IS_NOT_EQUAL_TO reduce using rule 32 (term -> term TIMES factor .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 32 (term -> term TIMES factor .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 32 (term -> term TIMES factor .)
    LET             reduce using rule 32 (term -> term TIMES factor .)
    IF              reduce using rule 32 (term -> term TIMES factor .)
    FOR             reduce using rule 32 (term -> term TIMES factor .)
    WHILE           reduce using rule 32 (term -> term TIMES factor .)
    FUNCTION        reduce using rule 32 (term -> term TIMES factor .)
    SHOW            reduce using rule 32 (term -> term TIMES factor .)
    ELSE            reduce using rule 32 (term -> term TIMES factor .)
    END             reduce using rule 32 (term -> term TIMES factor .)
    RBRACE          reduce using rule 32 (term -> term TIMES factor .)
    THEN            reduce using rule 32 (term -> term TIMES factor .)
    DO              reduce using rule 32 (term -> term TIMES factor .)


state 72

    (33) term -> term DIVIDE factor .

    TIMES           reduce using rule 33 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 33 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 33 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 33 (term -> term DIVIDE factor .)
    POWER           reduce using rule 33 (term -> term DIVIDE factor .)
    $end            reduce using rule 33 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 33 (term -> term DIVIDE factor .)
    RBRACKET        reduce using rule 33 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 33 (term -> term DIVIDE factor .)
    IS_LESS_THAN    reduce using rule 33 (term -> term DIVIDE factor .)
    IS_EQUAL_TO     reduce using rule 33 (term -> term DIVIDE factor .)
    IS_GREATER_THAN reduce using rule 33 (term -> term DIVIDE factor .)
    IS_NOT_EQUAL_TO reduce using rule 33 (term -> term DIVIDE factor .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 33 (term -> term DIVIDE factor .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 33 (term -> term DIVIDE factor .)
    LET             reduce using rule 33 (term -> term DIVIDE factor .)
    IF              reduce using rule 33 (term -> term DIVIDE factor .)
    FOR             reduce using rule 33 (term -> term DIVIDE factor .)
    WHILE           reduce using rule 33 (term -> term DIVIDE factor .)
    FUNCTION        reduce using rule 33 (term -> term DIVIDE factor .)
    SHOW            reduce using rule 33 (term -> term DIVIDE factor .)
    ELSE            reduce using rule 33 (term -> term DIVIDE factor .)
    END             reduce using rule 33 (term -> term DIVIDE factor .)
    RBRACE          reduce using rule 33 (term -> term DIVIDE factor .)
    THEN            reduce using rule 33 (term -> term DIVIDE factor .)
    DO              reduce using rule 33 (term -> term DIVIDE factor .)


state 73

    (27) expression -> LPAREN expression RPAREN .
    (37) factor -> LPAREN expression RPAREN .

  ! reduce/reduce conflict for PLUS resolved using rule 27 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for MINUS resolved using rule 27 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for POWER resolved using rule 27 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 27 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for RPAREN resolved using rule 27 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 27 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for COMMA resolved using rule 27 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for IS_LESS_THAN resolved using rule 27 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for IS_EQUAL_TO resolved using rule 27 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for IS_GREATER_THAN resolved using rule 27 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for IS_NOT_EQUAL_TO resolved using rule 27 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUAL_TO resolved using rule 27 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQUAL_TO resolved using rule 27 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for LET resolved using rule 27 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for IF resolved using rule 27 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for FOR resolved using rule 27 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for WHILE resolved using rule 27 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 27 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for SHOW resolved using rule 27 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for ELSE resolved using rule 27 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for END resolved using rule 27 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for RBRACE resolved using rule 27 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for THEN resolved using rule 27 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for DO resolved using rule 27 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    IS_LESS_THAN    reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    IS_EQUAL_TO     reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    IS_GREATER_THAN reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    IS_NOT_EQUAL_TO reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    LET             reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    SHOW            reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    END             reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 37 (factor -> LPAREN expression RPAREN .)

  ! PLUS            [ reduce using rule 37 (factor -> LPAREN expression RPAREN .) ]
  ! MINUS           [ reduce using rule 37 (factor -> LPAREN expression RPAREN .) ]
  ! POWER           [ reduce using rule 37 (factor -> LPAREN expression RPAREN .) ]
  ! $end            [ reduce using rule 37 (factor -> LPAREN expression RPAREN .) ]
  ! RPAREN          [ reduce using rule 37 (factor -> LPAREN expression RPAREN .) ]
  ! RBRACKET        [ reduce using rule 37 (factor -> LPAREN expression RPAREN .) ]
  ! COMMA           [ reduce using rule 37 (factor -> LPAREN expression RPAREN .) ]
  ! IS_LESS_THAN    [ reduce using rule 37 (factor -> LPAREN expression RPAREN .) ]
  ! IS_EQUAL_TO     [ reduce using rule 37 (factor -> LPAREN expression RPAREN .) ]
  ! IS_GREATER_THAN [ reduce using rule 37 (factor -> LPAREN expression RPAREN .) ]
  ! IS_NOT_EQUAL_TO [ reduce using rule 37 (factor -> LPAREN expression RPAREN .) ]
  ! GREATER_THAN_OR_EQUAL_TO [ reduce using rule 37 (factor -> LPAREN expression RPAREN .) ]
  ! LESS_THAN_OR_EQUAL_TO [ reduce using rule 37 (factor -> LPAREN expression RPAREN .) ]
  ! LET             [ reduce using rule 37 (factor -> LPAREN expression RPAREN .) ]
  ! IF              [ reduce using rule 37 (factor -> LPAREN expression RPAREN .) ]
  ! FOR             [ reduce using rule 37 (factor -> LPAREN expression RPAREN .) ]
  ! WHILE           [ reduce using rule 37 (factor -> LPAREN expression RPAREN .) ]
  ! FUNCTION        [ reduce using rule 37 (factor -> LPAREN expression RPAREN .) ]
  ! SHOW            [ reduce using rule 37 (factor -> LPAREN expression RPAREN .) ]
  ! ELSE            [ reduce using rule 37 (factor -> LPAREN expression RPAREN .) ]
  ! END             [ reduce using rule 37 (factor -> LPAREN expression RPAREN .) ]
  ! RBRACE          [ reduce using rule 37 (factor -> LPAREN expression RPAREN .) ]
  ! THEN            [ reduce using rule 37 (factor -> LPAREN expression RPAREN .) ]
  ! DO              [ reduce using rule 37 (factor -> LPAREN expression RPAREN .) ]


state 74

    (28) expression -> NUMBER MINUS term .
    (32) term -> term . TIMES factor
    (33) term -> term . DIVIDE factor

    PLUS            reduce using rule 28 (expression -> NUMBER MINUS term .)
    MINUS           reduce using rule 28 (expression -> NUMBER MINUS term .)
    POWER           reduce using rule 28 (expression -> NUMBER MINUS term .)
    $end            reduce using rule 28 (expression -> NUMBER MINUS term .)
    RPAREN          reduce using rule 28 (expression -> NUMBER MINUS term .)
    RBRACKET        reduce using rule 28 (expression -> NUMBER MINUS term .)
    COMMA           reduce using rule 28 (expression -> NUMBER MINUS term .)
    IS_LESS_THAN    reduce using rule 28 (expression -> NUMBER MINUS term .)
    IS_EQUAL_TO     reduce using rule 28 (expression -> NUMBER MINUS term .)
    IS_GREATER_THAN reduce using rule 28 (expression -> NUMBER MINUS term .)
    IS_NOT_EQUAL_TO reduce using rule 28 (expression -> NUMBER MINUS term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 28 (expression -> NUMBER MINUS term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 28 (expression -> NUMBER MINUS term .)
    LET             reduce using rule 28 (expression -> NUMBER MINUS term .)
    IF              reduce using rule 28 (expression -> NUMBER MINUS term .)
    FOR             reduce using rule 28 (expression -> NUMBER MINUS term .)
    WHILE           reduce using rule 28 (expression -> NUMBER MINUS term .)
    FUNCTION        reduce using rule 28 (expression -> NUMBER MINUS term .)
    SHOW            reduce using rule 28 (expression -> NUMBER MINUS term .)
    ELSE            reduce using rule 28 (expression -> NUMBER MINUS term .)
    END             reduce using rule 28 (expression -> NUMBER MINUS term .)
    RBRACE          reduce using rule 28 (expression -> NUMBER MINUS term .)
    THEN            reduce using rule 28 (expression -> NUMBER MINUS term .)
    DO              reduce using rule 28 (expression -> NUMBER MINUS term .)
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33


state 75

    (29) expression -> REAL MINUS term .
    (32) term -> term . TIMES factor
    (33) term -> term . DIVIDE factor

    PLUS            reduce using rule 29 (expression -> REAL MINUS term .)
    MINUS           reduce using rule 29 (expression -> REAL MINUS term .)
    POWER           reduce using rule 29 (expression -> REAL MINUS term .)
    $end            reduce using rule 29 (expression -> REAL MINUS term .)
    RPAREN          reduce using rule 29 (expression -> REAL MINUS term .)
    RBRACKET        reduce using rule 29 (expression -> REAL MINUS term .)
    COMMA           reduce using rule 29 (expression -> REAL MINUS term .)
    IS_LESS_THAN    reduce using rule 29 (expression -> REAL MINUS term .)
    IS_EQUAL_TO     reduce using rule 29 (expression -> REAL MINUS term .)
    IS_GREATER_THAN reduce using rule 29 (expression -> REAL MINUS term .)
    IS_NOT_EQUAL_TO reduce using rule 29 (expression -> REAL MINUS term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 29 (expression -> REAL MINUS term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 29 (expression -> REAL MINUS term .)
    LET             reduce using rule 29 (expression -> REAL MINUS term .)
    IF              reduce using rule 29 (expression -> REAL MINUS term .)
    FOR             reduce using rule 29 (expression -> REAL MINUS term .)
    WHILE           reduce using rule 29 (expression -> REAL MINUS term .)
    FUNCTION        reduce using rule 29 (expression -> REAL MINUS term .)
    SHOW            reduce using rule 29 (expression -> REAL MINUS term .)
    ELSE            reduce using rule 29 (expression -> REAL MINUS term .)
    END             reduce using rule 29 (expression -> REAL MINUS term .)
    RBRACE          reduce using rule 29 (expression -> REAL MINUS term .)
    THEN            reduce using rule 29 (expression -> REAL MINUS term .)
    DO              reduce using rule 29 (expression -> REAL MINUS term .)
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33


state 76

    (30) expression -> CHARACTER PLUS term .
    (32) term -> term . TIMES factor
    (33) term -> term . DIVIDE factor

    PLUS            reduce using rule 30 (expression -> CHARACTER PLUS term .)
    MINUS           reduce using rule 30 (expression -> CHARACTER PLUS term .)
    POWER           reduce using rule 30 (expression -> CHARACTER PLUS term .)
    $end            reduce using rule 30 (expression -> CHARACTER PLUS term .)
    RPAREN          reduce using rule 30 (expression -> CHARACTER PLUS term .)
    RBRACKET        reduce using rule 30 (expression -> CHARACTER PLUS term .)
    COMMA           reduce using rule 30 (expression -> CHARACTER PLUS term .)
    IS_LESS_THAN    reduce using rule 30 (expression -> CHARACTER PLUS term .)
    IS_EQUAL_TO     reduce using rule 30 (expression -> CHARACTER PLUS term .)
    IS_GREATER_THAN reduce using rule 30 (expression -> CHARACTER PLUS term .)
    IS_NOT_EQUAL_TO reduce using rule 30 (expression -> CHARACTER PLUS term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 30 (expression -> CHARACTER PLUS term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 30 (expression -> CHARACTER PLUS term .)
    LET             reduce using rule 30 (expression -> CHARACTER PLUS term .)
    IF              reduce using rule 30 (expression -> CHARACTER PLUS term .)
    FOR             reduce using rule 30 (expression -> CHARACTER PLUS term .)
    WHILE           reduce using rule 30 (expression -> CHARACTER PLUS term .)
    FUNCTION        reduce using rule 30 (expression -> CHARACTER PLUS term .)
    SHOW            reduce using rule 30 (expression -> CHARACTER PLUS term .)
    ELSE            reduce using rule 30 (expression -> CHARACTER PLUS term .)
    END             reduce using rule 30 (expression -> CHARACTER PLUS term .)
    RBRACE          reduce using rule 30 (expression -> CHARACTER PLUS term .)
    THEN            reduce using rule 30 (expression -> CHARACTER PLUS term .)
    DO              reduce using rule 30 (expression -> CHARACTER PLUS term .)
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33


state 77

    (58) list -> LBRACKET expression_list RBRACKET .

    PLUS            reduce using rule 58 (list -> LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 58 (list -> LBRACKET expression_list RBRACKET .)
    POWER           reduce using rule 58 (list -> LBRACKET expression_list RBRACKET .)
    $end            reduce using rule 58 (list -> LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 58 (list -> LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 58 (list -> LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 58 (list -> LBRACKET expression_list RBRACKET .)
    IS_LESS_THAN    reduce using rule 58 (list -> LBRACKET expression_list RBRACKET .)
    IS_EQUAL_TO     reduce using rule 58 (list -> LBRACKET expression_list RBRACKET .)
    IS_GREATER_THAN reduce using rule 58 (list -> LBRACKET expression_list RBRACKET .)
    IS_NOT_EQUAL_TO reduce using rule 58 (list -> LBRACKET expression_list RBRACKET .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 58 (list -> LBRACKET expression_list RBRACKET .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 58 (list -> LBRACKET expression_list RBRACKET .)
    LET             reduce using rule 58 (list -> LBRACKET expression_list RBRACKET .)
    IF              reduce using rule 58 (list -> LBRACKET expression_list RBRACKET .)
    FOR             reduce using rule 58 (list -> LBRACKET expression_list RBRACKET .)
    WHILE           reduce using rule 58 (list -> LBRACKET expression_list RBRACKET .)
    FUNCTION        reduce using rule 58 (list -> LBRACKET expression_list RBRACKET .)
    SHOW            reduce using rule 58 (list -> LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 58 (list -> LBRACKET expression_list RBRACKET .)
    END             reduce using rule 58 (list -> LBRACKET expression_list RBRACKET .)
    RBRACE          reduce using rule 58 (list -> LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 58 (list -> LBRACKET expression_list RBRACKET .)
    DO              reduce using rule 58 (list -> LBRACKET expression_list RBRACKET .)


state 78

    (61) expression_list -> expression_list COMMA . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) expression -> . expression POWER term
    (26) expression -> . NOT expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . NUMBER MINUS term
    (29) expression -> . REAL MINUS term
    (30) expression -> . CHARACTER PLUS term
    (31) expression -> . list
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) term -> . IDENTIFIER
    (35) term -> . factor
    (58) list -> . LBRACKET expression_list RBRACKET
    (59) list -> . empty
    (36) factor -> . NUMBER
    (37) factor -> . LPAREN expression RPAREN
    (67) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    POWER           reduce using rule 67 (empty -> .)
    RBRACKET        reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)
    LET             reduce using rule 67 (empty -> .)
    IF              reduce using rule 67 (empty -> .)
    FOR             reduce using rule 67 (empty -> .)
    WHILE           reduce using rule 67 (empty -> .)
    FUNCTION        reduce using rule 67 (empty -> .)
    SHOW            reduce using rule 67 (empty -> .)
    $end            reduce using rule 67 (empty -> .)
    ELSE            reduce using rule 67 (empty -> .)
    END             reduce using rule 67 (empty -> .)
    RBRACE          reduce using rule 67 (empty -> .)

    expression                     shift and go to state 92
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 79

    (11) assignment -> LET IDENTIFIER EQUAL . expression
    (38) input -> LET IDENTIFIER EQUAL . SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) expression -> . expression POWER term
    (26) expression -> . NOT expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . NUMBER MINUS term
    (29) expression -> . REAL MINUS term
    (30) expression -> . CHARACTER PLUS term
    (31) expression -> . list
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) term -> . IDENTIFIER
    (35) term -> . factor
    (58) list -> . LBRACKET expression_list RBRACKET
    (59) list -> . empty
    (36) factor -> . NUMBER
    (37) factor -> . LPAREN expression RPAREN
    (67) empty -> .

  ! shift/reduce conflict for SHOW resolved as shift
    SHOW            shift and go to state 94
    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    POWER           reduce using rule 67 (empty -> .)
    LET             reduce using rule 67 (empty -> .)
    IF              reduce using rule 67 (empty -> .)
    FOR             reduce using rule 67 (empty -> .)
    WHILE           reduce using rule 67 (empty -> .)
    FUNCTION        reduce using rule 67 (empty -> .)
    $end            reduce using rule 67 (empty -> .)
    ELSE            reduce using rule 67 (empty -> .)
    END             reduce using rule 67 (empty -> .)
    RBRACE          reduce using rule 67 (empty -> .)

  ! SHOW            [ reduce using rule 67 (empty -> .) ]

    expression                     shift and go to state 93
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 80

    (13) conditional -> IF condition THEN . statements else_statements_opt END
    (3) statements -> . statements statement
    (4) statements -> . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (13) conditional -> . IF condition THEN statements else_statements_opt END
    (56) loop -> . FOR IDENTIFIER IN list DO statements
    (57) loop -> . WHILE condition DO statements
    (62) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (39) display -> . SHOW expression
    (40) display -> . SHOW STRING_LITERAL
    (41) display -> . SHOW IDENTIFIER
    (42) display -> . SHOW NUMBER
    (43) display -> . SHOW REAL
    (44) display -> . SHOW CHARACTER
    (45) display -> . SHOW list
    (46) display -> . SHOW function
    (47) display -> . SHOW conditional
    (48) display -> . SHOW loop
    (49) display -> . SHOW input
    (50) display -> . SHOW comment
    (51) display -> . SHOW program
    (52) display -> . SHOW statements
    (53) display -> . SHOW expression_list
    (54) display -> . SHOW assignment
    (55) display -> . SHOW display
    (38) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    LET             shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25
    FUNCTION        shift and go to state 26
    SHOW            shift and go to state 27

    statements                     shift and go to state 95
    statement                      shift and go to state 4
    assignment                     shift and go to state 12
    conditional                    shift and go to state 13
    loop                           shift and go to state 14
    function                       shift and go to state 15
    display                        shift and go to state 16
    input                          shift and go to state 17

state 81

    (16) condition -> expression IS_LESS_THAN . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) expression -> . expression POWER term
    (26) expression -> . NOT expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . NUMBER MINUS term
    (29) expression -> . REAL MINUS term
    (30) expression -> . CHARACTER PLUS term
    (31) expression -> . list
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) term -> . IDENTIFIER
    (35) term -> . factor
    (58) list -> . LBRACKET expression_list RBRACKET
    (59) list -> . empty
    (36) factor -> . NUMBER
    (37) factor -> . LPAREN expression RPAREN
    (67) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    POWER           reduce using rule 67 (empty -> .)
    THEN            reduce using rule 67 (empty -> .)
    DO              reduce using rule 67 (empty -> .)

    expression                     shift and go to state 96
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 82

    (17) condition -> expression IS_EQUAL_TO . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) expression -> . expression POWER term
    (26) expression -> . NOT expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . NUMBER MINUS term
    (29) expression -> . REAL MINUS term
    (30) expression -> . CHARACTER PLUS term
    (31) expression -> . list
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) term -> . IDENTIFIER
    (35) term -> . factor
    (58) list -> . LBRACKET expression_list RBRACKET
    (59) list -> . empty
    (36) factor -> . NUMBER
    (37) factor -> . LPAREN expression RPAREN
    (67) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    POWER           reduce using rule 67 (empty -> .)
    THEN            reduce using rule 67 (empty -> .)
    DO              reduce using rule 67 (empty -> .)

    expression                     shift and go to state 97
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 83

    (18) condition -> expression IS_GREATER_THAN . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) expression -> . expression POWER term
    (26) expression -> . NOT expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . NUMBER MINUS term
    (29) expression -> . REAL MINUS term
    (30) expression -> . CHARACTER PLUS term
    (31) expression -> . list
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) term -> . IDENTIFIER
    (35) term -> . factor
    (58) list -> . LBRACKET expression_list RBRACKET
    (59) list -> . empty
    (36) factor -> . NUMBER
    (37) factor -> . LPAREN expression RPAREN
    (67) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    POWER           reduce using rule 67 (empty -> .)
    THEN            reduce using rule 67 (empty -> .)
    DO              reduce using rule 67 (empty -> .)

    expression                     shift and go to state 98
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 84

    (19) condition -> expression IS_NOT_EQUAL_TO . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) expression -> . expression POWER term
    (26) expression -> . NOT expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . NUMBER MINUS term
    (29) expression -> . REAL MINUS term
    (30) expression -> . CHARACTER PLUS term
    (31) expression -> . list
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) term -> . IDENTIFIER
    (35) term -> . factor
    (58) list -> . LBRACKET expression_list RBRACKET
    (59) list -> . empty
    (36) factor -> . NUMBER
    (37) factor -> . LPAREN expression RPAREN
    (67) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    POWER           reduce using rule 67 (empty -> .)
    THEN            reduce using rule 67 (empty -> .)
    DO              reduce using rule 67 (empty -> .)

    expression                     shift and go to state 99
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 85

    (20) condition -> expression GREATER_THAN_OR_EQUAL_TO . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) expression -> . expression POWER term
    (26) expression -> . NOT expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . NUMBER MINUS term
    (29) expression -> . REAL MINUS term
    (30) expression -> . CHARACTER PLUS term
    (31) expression -> . list
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) term -> . IDENTIFIER
    (35) term -> . factor
    (58) list -> . LBRACKET expression_list RBRACKET
    (59) list -> . empty
    (36) factor -> . NUMBER
    (37) factor -> . LPAREN expression RPAREN
    (67) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    POWER           reduce using rule 67 (empty -> .)
    THEN            reduce using rule 67 (empty -> .)
    DO              reduce using rule 67 (empty -> .)

    expression                     shift and go to state 100
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 86

    (21) condition -> expression LESS_THAN_OR_EQUAL_TO . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) expression -> . expression POWER term
    (26) expression -> . NOT expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . NUMBER MINUS term
    (29) expression -> . REAL MINUS term
    (30) expression -> . CHARACTER PLUS term
    (31) expression -> . list
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) term -> . IDENTIFIER
    (35) term -> . factor
    (58) list -> . LBRACKET expression_list RBRACKET
    (59) list -> . empty
    (36) factor -> . NUMBER
    (37) factor -> . LPAREN expression RPAREN
    (67) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    POWER           reduce using rule 67 (empty -> .)
    THEN            reduce using rule 67 (empty -> .)
    DO              reduce using rule 67 (empty -> .)

    expression                     shift and go to state 101
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 87

    (56) loop -> FOR IDENTIFIER IN . list DO statements
    (58) list -> . LBRACKET expression_list RBRACKET
    (59) list -> . empty
    (67) empty -> .

    LBRACKET        shift and go to state 20
    DO              reduce using rule 67 (empty -> .)

    list                           shift and go to state 102
    empty                          shift and go to state 21

state 88

    (57) loop -> WHILE condition DO . statements
    (3) statements -> . statements statement
    (4) statements -> . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (13) conditional -> . IF condition THEN statements else_statements_opt END
    (56) loop -> . FOR IDENTIFIER IN list DO statements
    (57) loop -> . WHILE condition DO statements
    (62) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (39) display -> . SHOW expression
    (40) display -> . SHOW STRING_LITERAL
    (41) display -> . SHOW IDENTIFIER
    (42) display -> . SHOW NUMBER
    (43) display -> . SHOW REAL
    (44) display -> . SHOW CHARACTER
    (45) display -> . SHOW list
    (46) display -> . SHOW function
    (47) display -> . SHOW conditional
    (48) display -> . SHOW loop
    (49) display -> . SHOW input
    (50) display -> . SHOW comment
    (51) display -> . SHOW program
    (52) display -> . SHOW statements
    (53) display -> . SHOW expression_list
    (54) display -> . SHOW assignment
    (55) display -> . SHOW display
    (38) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    LET             shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25
    FUNCTION        shift and go to state 26
    SHOW            shift and go to state 27

    statements                     shift and go to state 103
    statement                      shift and go to state 4
    assignment                     shift and go to state 12
    conditional                    shift and go to state 13
    loop                           shift and go to state 14
    function                       shift and go to state 15
    display                        shift and go to state 16
    input                          shift and go to state 17

state 89

    (62) function -> FUNCTION IDENTIFIER LPAREN . parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (63) parameters -> . IDENTIFIER
    (64) parameters -> . parameters COMMA IDENTIFIER

    IDENTIFIER      shift and go to state 104

    parameters                     shift and go to state 105

state 90

    (38) input -> LET IDENTIFIER . EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN
    (11) assignment -> LET IDENTIFIER . EQUAL expression

    EQUAL           shift and go to state 106


state 91

    (37) factor -> LPAREN expression . RPAREN
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term
    (25) expression -> expression . POWER term

    RPAREN          shift and go to state 107
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    POWER           shift and go to state 31


state 92

    (61) expression_list -> expression_list COMMA expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term
    (25) expression -> expression . POWER term

    RBRACKET        reduce using rule 61 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 61 (expression_list -> expression_list COMMA expression .)
    LET             reduce using rule 61 (expression_list -> expression_list COMMA expression .)
    IF              reduce using rule 61 (expression_list -> expression_list COMMA expression .)
    FOR             reduce using rule 61 (expression_list -> expression_list COMMA expression .)
    WHILE           reduce using rule 61 (expression_list -> expression_list COMMA expression .)
    FUNCTION        reduce using rule 61 (expression_list -> expression_list COMMA expression .)
    SHOW            reduce using rule 61 (expression_list -> expression_list COMMA expression .)
    $end            reduce using rule 61 (expression_list -> expression_list COMMA expression .)
    ELSE            reduce using rule 61 (expression_list -> expression_list COMMA expression .)
    END             reduce using rule 61 (expression_list -> expression_list COMMA expression .)
    RBRACE          reduce using rule 61 (expression_list -> expression_list COMMA expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    POWER           shift and go to state 31


state 93

    (11) assignment -> LET IDENTIFIER EQUAL expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term
    (25) expression -> expression . POWER term

    LET             reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    IF              reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    FOR             reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    WHILE           reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    FUNCTION        reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    SHOW            reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    $end            reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    ELSE            reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    END             reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    RBRACE          reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    POWER           shift and go to state 31


state 94

    (38) input -> LET IDENTIFIER EQUAL SHOW . IDENTIFIER LPAREN STRING_LITERAL RPAREN

    IDENTIFIER      shift and go to state 108


state 95

    (13) conditional -> IF condition THEN statements . else_statements_opt END
    (3) statements -> statements . statement
    (14) else_statements_opt -> . ELSE statements
    (15) else_statements_opt -> . empty
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (67) empty -> .
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (13) conditional -> . IF condition THEN statements else_statements_opt END
    (56) loop -> . FOR IDENTIFIER IN list DO statements
    (57) loop -> . WHILE condition DO statements
    (62) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (39) display -> . SHOW expression
    (40) display -> . SHOW STRING_LITERAL
    (41) display -> . SHOW IDENTIFIER
    (42) display -> . SHOW NUMBER
    (43) display -> . SHOW REAL
    (44) display -> . SHOW CHARACTER
    (45) display -> . SHOW list
    (46) display -> . SHOW function
    (47) display -> . SHOW conditional
    (48) display -> . SHOW loop
    (49) display -> . SHOW input
    (50) display -> . SHOW comment
    (51) display -> . SHOW program
    (52) display -> . SHOW statements
    (53) display -> . SHOW expression_list
    (54) display -> . SHOW assignment
    (55) display -> . SHOW display
    (38) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    ELSE            shift and go to state 110
    END             reduce using rule 67 (empty -> .)
    LET             shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25
    FUNCTION        shift and go to state 26
    SHOW            shift and go to state 27

    else_statements_opt            shift and go to state 109
    statement                      shift and go to state 28
    empty                          shift and go to state 111
    assignment                     shift and go to state 12
    conditional                    shift and go to state 13
    loop                           shift and go to state 14
    function                       shift and go to state 15
    display                        shift and go to state 16
    input                          shift and go to state 17

state 96

    (16) condition -> expression IS_LESS_THAN expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term
    (25) expression -> expression . POWER term

    THEN            reduce using rule 16 (condition -> expression IS_LESS_THAN expression .)
    DO              reduce using rule 16 (condition -> expression IS_LESS_THAN expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    POWER           shift and go to state 31


state 97

    (17) condition -> expression IS_EQUAL_TO expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term
    (25) expression -> expression . POWER term

    THEN            reduce using rule 17 (condition -> expression IS_EQUAL_TO expression .)
    DO              reduce using rule 17 (condition -> expression IS_EQUAL_TO expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    POWER           shift and go to state 31


state 98

    (18) condition -> expression IS_GREATER_THAN expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term
    (25) expression -> expression . POWER term

    THEN            reduce using rule 18 (condition -> expression IS_GREATER_THAN expression .)
    DO              reduce using rule 18 (condition -> expression IS_GREATER_THAN expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    POWER           shift and go to state 31


state 99

    (19) condition -> expression IS_NOT_EQUAL_TO expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term
    (25) expression -> expression . POWER term

    THEN            reduce using rule 19 (condition -> expression IS_NOT_EQUAL_TO expression .)
    DO              reduce using rule 19 (condition -> expression IS_NOT_EQUAL_TO expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    POWER           shift and go to state 31


state 100

    (20) condition -> expression GREATER_THAN_OR_EQUAL_TO expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term
    (25) expression -> expression . POWER term

    THEN            reduce using rule 20 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    DO              reduce using rule 20 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    POWER           shift and go to state 31


state 101

    (21) condition -> expression LESS_THAN_OR_EQUAL_TO expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term
    (25) expression -> expression . POWER term

    THEN            reduce using rule 21 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    DO              reduce using rule 21 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    POWER           shift and go to state 31


state 102

    (56) loop -> FOR IDENTIFIER IN list . DO statements

    DO              shift and go to state 112


state 103

    (57) loop -> WHILE condition DO statements .
    (3) statements -> statements . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (13) conditional -> . IF condition THEN statements else_statements_opt END
    (56) loop -> . FOR IDENTIFIER IN list DO statements
    (57) loop -> . WHILE condition DO statements
    (62) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (39) display -> . SHOW expression
    (40) display -> . SHOW STRING_LITERAL
    (41) display -> . SHOW IDENTIFIER
    (42) display -> . SHOW NUMBER
    (43) display -> . SHOW REAL
    (44) display -> . SHOW CHARACTER
    (45) display -> . SHOW list
    (46) display -> . SHOW function
    (47) display -> . SHOW conditional
    (48) display -> . SHOW loop
    (49) display -> . SHOW input
    (50) display -> . SHOW comment
    (51) display -> . SHOW program
    (52) display -> . SHOW statements
    (53) display -> . SHOW expression_list
    (54) display -> . SHOW assignment
    (55) display -> . SHOW display
    (38) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for SHOW resolved as shift
    $end            reduce using rule 57 (loop -> WHILE condition DO statements .)
    ELSE            reduce using rule 57 (loop -> WHILE condition DO statements .)
    END             reduce using rule 57 (loop -> WHILE condition DO statements .)
    RBRACE          reduce using rule 57 (loop -> WHILE condition DO statements .)
    LET             shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25
    FUNCTION        shift and go to state 26
    SHOW            shift and go to state 27

  ! LET             [ reduce using rule 57 (loop -> WHILE condition DO statements .) ]
  ! IF              [ reduce using rule 57 (loop -> WHILE condition DO statements .) ]
  ! FOR             [ reduce using rule 57 (loop -> WHILE condition DO statements .) ]
  ! WHILE           [ reduce using rule 57 (loop -> WHILE condition DO statements .) ]
  ! FUNCTION        [ reduce using rule 57 (loop -> WHILE condition DO statements .) ]
  ! SHOW            [ reduce using rule 57 (loop -> WHILE condition DO statements .) ]

    statement                      shift and go to state 28
    assignment                     shift and go to state 12
    conditional                    shift and go to state 13
    loop                           shift and go to state 14
    function                       shift and go to state 15
    display                        shift and go to state 16
    input                          shift and go to state 17

state 104

    (63) parameters -> IDENTIFIER .

    RPAREN          reduce using rule 63 (parameters -> IDENTIFIER .)
    COMMA           reduce using rule 63 (parameters -> IDENTIFIER .)


state 105

    (62) function -> FUNCTION IDENTIFIER LPAREN parameters . RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (64) parameters -> parameters . COMMA IDENTIFIER

    RPAREN          shift and go to state 113
    COMMA           shift and go to state 114


state 106

    (38) input -> LET IDENTIFIER EQUAL . SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN
    (11) assignment -> LET IDENTIFIER EQUAL . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) expression -> . expression POWER term
    (26) expression -> . NOT expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . NUMBER MINUS term
    (29) expression -> . REAL MINUS term
    (30) expression -> . CHARACTER PLUS term
    (31) expression -> . list
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) term -> . IDENTIFIER
    (35) term -> . factor
    (58) list -> . LBRACKET expression_list RBRACKET
    (59) list -> . empty
    (36) factor -> . NUMBER
    (37) factor -> . LPAREN expression RPAREN
    (67) empty -> .

  ! shift/reduce conflict for SHOW resolved as shift
    SHOW            shift and go to state 94
    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    POWER           reduce using rule 67 (empty -> .)
    LET             reduce using rule 67 (empty -> .)
    IF              reduce using rule 67 (empty -> .)
    FOR             reduce using rule 67 (empty -> .)
    WHILE           reduce using rule 67 (empty -> .)
    FUNCTION        reduce using rule 67 (empty -> .)
    $end            reduce using rule 67 (empty -> .)
    ELSE            reduce using rule 67 (empty -> .)
    END             reduce using rule 67 (empty -> .)
    RBRACE          reduce using rule 67 (empty -> .)

  ! SHOW            [ reduce using rule 67 (empty -> .) ]

    expression                     shift and go to state 93
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 107

    (37) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    POWER           reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    IS_LESS_THAN    reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    IS_EQUAL_TO     reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    IS_GREATER_THAN reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    IS_NOT_EQUAL_TO reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    LET             reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    FOR             reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    SHOW            reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 37 (factor -> LPAREN expression RPAREN .)


state 108

    (38) input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER . LPAREN STRING_LITERAL RPAREN

    LPAREN          shift and go to state 115


state 109

    (13) conditional -> IF condition THEN statements else_statements_opt . END

    END             shift and go to state 116


state 110

    (14) else_statements_opt -> ELSE . statements
    (3) statements -> . statements statement
    (4) statements -> . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (13) conditional -> . IF condition THEN statements else_statements_opt END
    (56) loop -> . FOR IDENTIFIER IN list DO statements
    (57) loop -> . WHILE condition DO statements
    (62) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (39) display -> . SHOW expression
    (40) display -> . SHOW STRING_LITERAL
    (41) display -> . SHOW IDENTIFIER
    (42) display -> . SHOW NUMBER
    (43) display -> . SHOW REAL
    (44) display -> . SHOW CHARACTER
    (45) display -> . SHOW list
    (46) display -> . SHOW function
    (47) display -> . SHOW conditional
    (48) display -> . SHOW loop
    (49) display -> . SHOW input
    (50) display -> . SHOW comment
    (51) display -> . SHOW program
    (52) display -> . SHOW statements
    (53) display -> . SHOW expression_list
    (54) display -> . SHOW assignment
    (55) display -> . SHOW display
    (38) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    LET             shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25
    FUNCTION        shift and go to state 26
    SHOW            shift and go to state 27

    statements                     shift and go to state 117
    statement                      shift and go to state 4
    assignment                     shift and go to state 12
    conditional                    shift and go to state 13
    loop                           shift and go to state 14
    function                       shift and go to state 15
    display                        shift and go to state 16
    input                          shift and go to state 17

state 111

    (15) else_statements_opt -> empty .

    END             reduce using rule 15 (else_statements_opt -> empty .)


state 112

    (56) loop -> FOR IDENTIFIER IN list DO . statements
    (3) statements -> . statements statement
    (4) statements -> . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (13) conditional -> . IF condition THEN statements else_statements_opt END
    (56) loop -> . FOR IDENTIFIER IN list DO statements
    (57) loop -> . WHILE condition DO statements
    (62) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (39) display -> . SHOW expression
    (40) display -> . SHOW STRING_LITERAL
    (41) display -> . SHOW IDENTIFIER
    (42) display -> . SHOW NUMBER
    (43) display -> . SHOW REAL
    (44) display -> . SHOW CHARACTER
    (45) display -> . SHOW list
    (46) display -> . SHOW function
    (47) display -> . SHOW conditional
    (48) display -> . SHOW loop
    (49) display -> . SHOW input
    (50) display -> . SHOW comment
    (51) display -> . SHOW program
    (52) display -> . SHOW statements
    (53) display -> . SHOW expression_list
    (54) display -> . SHOW assignment
    (55) display -> . SHOW display
    (38) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    LET             shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25
    FUNCTION        shift and go to state 26
    SHOW            shift and go to state 27

    statements                     shift and go to state 118
    statement                      shift and go to state 4
    assignment                     shift and go to state 12
    conditional                    shift and go to state 13
    loop                           shift and go to state 14
    function                       shift and go to state 15
    display                        shift and go to state 16
    input                          shift and go to state 17

state 113

    (62) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN . LBRACE statements RBRACE return_statement_opt RBRACE

    LBRACE          shift and go to state 119


state 114

    (64) parameters -> parameters COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 120


state 115

    (38) input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN . STRING_LITERAL RPAREN

    STRING_LITERAL  shift and go to state 121


state 116

    (13) conditional -> IF condition THEN statements else_statements_opt END .

    LET             reduce using rule 13 (conditional -> IF condition THEN statements else_statements_opt END .)
    IF              reduce using rule 13 (conditional -> IF condition THEN statements else_statements_opt END .)
    FOR             reduce using rule 13 (conditional -> IF condition THEN statements else_statements_opt END .)
    WHILE           reduce using rule 13 (conditional -> IF condition THEN statements else_statements_opt END .)
    FUNCTION        reduce using rule 13 (conditional -> IF condition THEN statements else_statements_opt END .)
    SHOW            reduce using rule 13 (conditional -> IF condition THEN statements else_statements_opt END .)
    $end            reduce using rule 13 (conditional -> IF condition THEN statements else_statements_opt END .)
    ELSE            reduce using rule 13 (conditional -> IF condition THEN statements else_statements_opt END .)
    END             reduce using rule 13 (conditional -> IF condition THEN statements else_statements_opt END .)
    RBRACE          reduce using rule 13 (conditional -> IF condition THEN statements else_statements_opt END .)


state 117

    (14) else_statements_opt -> ELSE statements .
    (3) statements -> statements . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (13) conditional -> . IF condition THEN statements else_statements_opt END
    (56) loop -> . FOR IDENTIFIER IN list DO statements
    (57) loop -> . WHILE condition DO statements
    (62) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (39) display -> . SHOW expression
    (40) display -> . SHOW STRING_LITERAL
    (41) display -> . SHOW IDENTIFIER
    (42) display -> . SHOW NUMBER
    (43) display -> . SHOW REAL
    (44) display -> . SHOW CHARACTER
    (45) display -> . SHOW list
    (46) display -> . SHOW function
    (47) display -> . SHOW conditional
    (48) display -> . SHOW loop
    (49) display -> . SHOW input
    (50) display -> . SHOW comment
    (51) display -> . SHOW program
    (52) display -> . SHOW statements
    (53) display -> . SHOW expression_list
    (54) display -> . SHOW assignment
    (55) display -> . SHOW display
    (38) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    END             reduce using rule 14 (else_statements_opt -> ELSE statements .)
    LET             shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25
    FUNCTION        shift and go to state 26
    SHOW            shift and go to state 27

    statement                      shift and go to state 28
    assignment                     shift and go to state 12
    conditional                    shift and go to state 13
    loop                           shift and go to state 14
    function                       shift and go to state 15
    display                        shift and go to state 16
    input                          shift and go to state 17

state 118

    (56) loop -> FOR IDENTIFIER IN list DO statements .
    (3) statements -> statements . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (13) conditional -> . IF condition THEN statements else_statements_opt END
    (56) loop -> . FOR IDENTIFIER IN list DO statements
    (57) loop -> . WHILE condition DO statements
    (62) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (39) display -> . SHOW expression
    (40) display -> . SHOW STRING_LITERAL
    (41) display -> . SHOW IDENTIFIER
    (42) display -> . SHOW NUMBER
    (43) display -> . SHOW REAL
    (44) display -> . SHOW CHARACTER
    (45) display -> . SHOW list
    (46) display -> . SHOW function
    (47) display -> . SHOW conditional
    (48) display -> . SHOW loop
    (49) display -> . SHOW input
    (50) display -> . SHOW comment
    (51) display -> . SHOW program
    (52) display -> . SHOW statements
    (53) display -> . SHOW expression_list
    (54) display -> . SHOW assignment
    (55) display -> . SHOW display
    (38) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for SHOW resolved as shift
    $end            reduce using rule 56 (loop -> FOR IDENTIFIER IN list DO statements .)
    ELSE            reduce using rule 56 (loop -> FOR IDENTIFIER IN list DO statements .)
    END             reduce using rule 56 (loop -> FOR IDENTIFIER IN list DO statements .)
    RBRACE          reduce using rule 56 (loop -> FOR IDENTIFIER IN list DO statements .)
    LET             shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25
    FUNCTION        shift and go to state 26
    SHOW            shift and go to state 27

  ! LET             [ reduce using rule 56 (loop -> FOR IDENTIFIER IN list DO statements .) ]
  ! IF              [ reduce using rule 56 (loop -> FOR IDENTIFIER IN list DO statements .) ]
  ! FOR             [ reduce using rule 56 (loop -> FOR IDENTIFIER IN list DO statements .) ]
  ! WHILE           [ reduce using rule 56 (loop -> FOR IDENTIFIER IN list DO statements .) ]
  ! FUNCTION        [ reduce using rule 56 (loop -> FOR IDENTIFIER IN list DO statements .) ]
  ! SHOW            [ reduce using rule 56 (loop -> FOR IDENTIFIER IN list DO statements .) ]

    statement                      shift and go to state 28
    assignment                     shift and go to state 12
    conditional                    shift and go to state 13
    loop                           shift and go to state 14
    function                       shift and go to state 15
    display                        shift and go to state 16
    input                          shift and go to state 17

state 119

    (62) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE . statements RBRACE return_statement_opt RBRACE
    (3) statements -> . statements statement
    (4) statements -> . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (13) conditional -> . IF condition THEN statements else_statements_opt END
    (56) loop -> . FOR IDENTIFIER IN list DO statements
    (57) loop -> . WHILE condition DO statements
    (62) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (39) display -> . SHOW expression
    (40) display -> . SHOW STRING_LITERAL
    (41) display -> . SHOW IDENTIFIER
    (42) display -> . SHOW NUMBER
    (43) display -> . SHOW REAL
    (44) display -> . SHOW CHARACTER
    (45) display -> . SHOW list
    (46) display -> . SHOW function
    (47) display -> . SHOW conditional
    (48) display -> . SHOW loop
    (49) display -> . SHOW input
    (50) display -> . SHOW comment
    (51) display -> . SHOW program
    (52) display -> . SHOW statements
    (53) display -> . SHOW expression_list
    (54) display -> . SHOW assignment
    (55) display -> . SHOW display
    (38) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    LET             shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25
    FUNCTION        shift and go to state 26
    SHOW            shift and go to state 27

    statements                     shift and go to state 122
    statement                      shift and go to state 4
    assignment                     shift and go to state 12
    conditional                    shift and go to state 13
    loop                           shift and go to state 14
    function                       shift and go to state 15
    display                        shift and go to state 16
    input                          shift and go to state 17

state 120

    (64) parameters -> parameters COMMA IDENTIFIER .

    RPAREN          reduce using rule 64 (parameters -> parameters COMMA IDENTIFIER .)
    COMMA           reduce using rule 64 (parameters -> parameters COMMA IDENTIFIER .)


state 121

    (38) input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL . RPAREN

    RPAREN          shift and go to state 123


state 122

    (62) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements . RBRACE return_statement_opt RBRACE
    (3) statements -> statements . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (13) conditional -> . IF condition THEN statements else_statements_opt END
    (56) loop -> . FOR IDENTIFIER IN list DO statements
    (57) loop -> . WHILE condition DO statements
    (62) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (39) display -> . SHOW expression
    (40) display -> . SHOW STRING_LITERAL
    (41) display -> . SHOW IDENTIFIER
    (42) display -> . SHOW NUMBER
    (43) display -> . SHOW REAL
    (44) display -> . SHOW CHARACTER
    (45) display -> . SHOW list
    (46) display -> . SHOW function
    (47) display -> . SHOW conditional
    (48) display -> . SHOW loop
    (49) display -> . SHOW input
    (50) display -> . SHOW comment
    (51) display -> . SHOW program
    (52) display -> . SHOW statements
    (53) display -> . SHOW expression_list
    (54) display -> . SHOW assignment
    (55) display -> . SHOW display
    (38) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    RBRACE          shift and go to state 124
    LET             shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25
    FUNCTION        shift and go to state 26
    SHOW            shift and go to state 27

    statement                      shift and go to state 28
    assignment                     shift and go to state 12
    conditional                    shift and go to state 13
    loop                           shift and go to state 14
    function                       shift and go to state 15
    display                        shift and go to state 16
    input                          shift and go to state 17

state 123

    (38) input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .

    LET             reduce using rule 38 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    IF              reduce using rule 38 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    FOR             reduce using rule 38 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    WHILE           reduce using rule 38 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    FUNCTION        reduce using rule 38 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    SHOW            reduce using rule 38 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    $end            reduce using rule 38 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    ELSE            reduce using rule 38 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    END             reduce using rule 38 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    RBRACE          reduce using rule 38 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)


state 124

    (62) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE . return_statement_opt RBRACE
    (65) return_statement_opt -> . RETURN expression
    (66) return_statement_opt -> . empty
    (67) empty -> .

    RETURN          shift and go to state 126
    RBRACE          reduce using rule 67 (empty -> .)

    return_statement_opt           shift and go to state 125
    empty                          shift and go to state 127

state 125

    (62) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt . RBRACE

    RBRACE          shift and go to state 128


state 126

    (65) return_statement_opt -> RETURN . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) expression -> . expression POWER term
    (26) expression -> . NOT expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . NUMBER MINUS term
    (29) expression -> . REAL MINUS term
    (30) expression -> . CHARACTER PLUS term
    (31) expression -> . list
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) term -> . IDENTIFIER
    (35) term -> . factor
    (58) list -> . LBRACKET expression_list RBRACKET
    (59) list -> . empty
    (36) factor -> . NUMBER
    (37) factor -> . LPAREN expression RPAREN
    (67) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    POWER           reduce using rule 67 (empty -> .)
    RBRACE          reduce using rule 67 (empty -> .)

    expression                     shift and go to state 129
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 127

    (66) return_statement_opt -> empty .

    RBRACE          reduce using rule 66 (return_statement_opt -> empty .)


state 128

    (62) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .

    LET             reduce using rule 62 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    IF              reduce using rule 62 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    FOR             reduce using rule 62 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    WHILE           reduce using rule 62 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    FUNCTION        reduce using rule 62 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    SHOW            reduce using rule 62 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    $end            reduce using rule 62 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    ELSE            reduce using rule 62 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    END             reduce using rule 62 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    RBRACE          reduce using rule 62 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)


state 129

    (65) return_statement_opt -> RETURN expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term
    (25) expression -> expression . POWER term

    RBRACE          reduce using rule 65 (return_statement_opt -> RETURN expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    POWER           shift and go to state 31

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MINUS in state 8 resolved as shift
WARNING: shift/reduce conflict for LET in state 27 resolved as shift
WARNING: shift/reduce conflict for IF in state 27 resolved as shift
WARNING: shift/reduce conflict for FOR in state 27 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 27 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 27 resolved as shift
WARNING: shift/reduce conflict for SHOW in state 27 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 34 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 34 resolved as shift
WARNING: shift/reduce conflict for POWER in state 34 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 50 resolved as shift
WARNING: shift/reduce conflict for LET in state 60 resolved as shift
WARNING: shift/reduce conflict for IF in state 60 resolved as shift
WARNING: shift/reduce conflict for FOR in state 60 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 60 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 60 resolved as shift
WARNING: shift/reduce conflict for SHOW in state 60 resolved as shift
WARNING: shift/reduce conflict for SHOW in state 79 resolved as shift
WARNING: shift/reduce conflict for LET in state 103 resolved as shift
WARNING: shift/reduce conflict for IF in state 103 resolved as shift
WARNING: shift/reduce conflict for FOR in state 103 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 103 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 103 resolved as shift
WARNING: shift/reduce conflict for SHOW in state 103 resolved as shift
WARNING: shift/reduce conflict for SHOW in state 106 resolved as shift
WARNING: shift/reduce conflict for LET in state 118 resolved as shift
WARNING: shift/reduce conflict for IF in state 118 resolved as shift
WARNING: shift/reduce conflict for FOR in state 118 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 118 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 118 resolved as shift
WARNING: shift/reduce conflict for SHOW in state 118 resolved as shift
WARNING: reduce/reduce conflict in state 47 resolved using rule (program -> expression)
WARNING: rejected rule (display -> SHOW expression) in state 47
WARNING: reduce/reduce conflict in state 47 resolved using rule (program -> expression)
WARNING: rejected rule (expression_list -> expression) in state 47
WARNING: reduce/reduce conflict in state 49 resolved using rule (term -> IDENTIFIER)
WARNING: rejected rule (display -> SHOW IDENTIFIER) in state 49
WARNING: reduce/reduce conflict in state 50 resolved using rule (factor -> NUMBER)
WARNING: rejected rule (display -> SHOW NUMBER) in state 50
WARNING: reduce/reduce conflict in state 53 resolved using rule (expression -> list)
WARNING: rejected rule (display -> SHOW list) in state 53
WARNING: reduce/reduce conflict in state 54 resolved using rule (statement -> function)
WARNING: rejected rule (display -> SHOW function) in state 54
WARNING: reduce/reduce conflict in state 55 resolved using rule (statement -> conditional)
WARNING: rejected rule (display -> SHOW conditional) in state 55
WARNING: reduce/reduce conflict in state 56 resolved using rule (statement -> loop)
WARNING: rejected rule (display -> SHOW loop) in state 56
WARNING: reduce/reduce conflict in state 57 resolved using rule (statement -> input)
WARNING: rejected rule (display -> SHOW input) in state 57
WARNING: reduce/reduce conflict in state 60 resolved using rule (program -> statements)
WARNING: rejected rule (display -> SHOW statements) in state 60
WARNING: reduce/reduce conflict in state 62 resolved using rule (statement -> assignment)
WARNING: rejected rule (display -> SHOW assignment) in state 62
WARNING: reduce/reduce conflict in state 63 resolved using rule (statement -> display)
WARNING: rejected rule (display -> SHOW display) in state 63
WARNING: reduce/reduce conflict in state 73 resolved using rule (expression -> LPAREN expression RPAREN)
WARNING: rejected rule (factor -> LPAREN expression RPAREN) in state 73
WARNING: Rule (display -> SHOW expression) is never reduced
WARNING: Rule (display -> SHOW IDENTIFIER) is never reduced
WARNING: Rule (display -> SHOW NUMBER) is never reduced
WARNING: Rule (display -> SHOW list) is never reduced
WARNING: Rule (display -> SHOW function) is never reduced
WARNING: Rule (display -> SHOW conditional) is never reduced
WARNING: Rule (display -> SHOW loop) is never reduced
WARNING: Rule (display -> SHOW input) is never reduced
WARNING: Rule (display -> SHOW statements) is never reduced
WARNING: Rule (display -> SHOW assignment) is never reduced
WARNING: Rule (display -> SHOW display) is never reduced
