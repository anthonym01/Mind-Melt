Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    CHARACTER
    COMMENT
    DECREASE
    INCREASE
    JOIN
    LETTER
    NOT
    OR
    RISK
    SAVE

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statement statements
Rule 3     statements -> statement
Rule 4     statement -> assignment
Rule 5     statement -> conditional
Rule 6     statement -> loop
Rule 7     statement -> function
Rule 8     statement -> display
Rule 9     statement -> expression
Rule 10    assignment -> LET IDENTIFIER EQUAL expression
Rule 11    assignment -> LET IDENTIFIER EQUAL expression_list
Rule 12    conditional -> IF condition THEN statements else_statements_opt END
Rule 13    else_statements_opt -> ELSE statements
Rule 14    else_statements_opt -> empty
Rule 15    condition -> expression IS_LESS_THAN expression
Rule 16    condition -> expression IS_EQUAL_TO expression
Rule 17    condition -> expression IS_GREATER_THAN expression
Rule 18    condition -> expression IS_NOT_EQUAL_TO expression
Rule 19    condition -> expression GREATER_THAN_OR_EQUAL_TO expression
Rule 20    condition -> expression LESS_THAN_OR_EQUAL_TO expression
Rule 21    expression -> expression PLUS expression
Rule 22    expression -> expression MINUS expression
Rule 23    expression -> expression TIMES expression
Rule 24    expression -> expression DIVIDE expression
Rule 25    expression -> expression POWER expression
Rule 26    expression -> LPAREN expression RPAREN
Rule 27    expression -> term
Rule 28    term -> NUMBER
Rule 29    term -> STRING_LITERAL
Rule 30    term -> BOOLEAN
Rule 31    term -> IDENTIFIER
Rule 32    boolean -> TRUE
Rule 33    boolean -> FALSE
Rule 34    display -> SHOW STRING_LITERAL
Rule 35    display -> SHOW IDENTIFIER
Rule 36    loop -> FOR IDENTIFIER IN list DO statements
Rule 37    loop -> WHILE condition DO statements
Rule 38    loop -> DO statements WHILE condition
Rule 39    list -> LBRACKET expression_list RBRACKET
Rule 40    list -> empty
Rule 41    expression_list -> expression
Rule 42    expression_list -> expression COMMA expression_list
Rule 43    expression_list -> empty
Rule 44    function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
Rule 45    function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
Rule 46    parameters -> IDENTIFIER
Rule 47    parameters -> IDENTIFIER COMMA parameters
Rule 48    parameters -> empty
Rule 49    return_statement_opt -> RETURN expression
Rule 50    return_statement_opt -> empty
Rule 51    empty -> <empty>

Terminals, with rules where they appear

AND                  : 
BOOLEAN              : 30
CHARACTER            : 
COMMA                : 42 47
COMMENT              : 
DECREASE             : 
DIVIDE               : 24
DO                   : 36 37 38
ELSE                 : 13
END                  : 12
EQUAL                : 10 11
FALSE                : 33
FOR                  : 36
FUNCTION             : 44 45
GREATER_THAN_OR_EQUAL_TO : 19
IDENTIFIER           : 10 11 31 35 36 44 45 46 47
IF                   : 12
IN                   : 36
INCREASE             : 
IS_EQUAL_TO          : 16
IS_GREATER_THAN      : 17
IS_LESS_THAN         : 15
IS_NOT_EQUAL_TO      : 18
JOIN                 : 
LBRACE               : 44 45
LBRACKET             : 39
LESS_THAN_OR_EQUAL_TO : 20
LET                  : 10 11
LETTER               : 
LPAREN               : 26 44 45
MINUS                : 22
NOT                  : 
NUMBER               : 28
OR                   : 
PLUS                 : 21
POWER                : 25
RBRACE               : 44 44 45
RBRACKET             : 39
RETURN               : 49
RISK                 : 
RPAREN               : 26 44 45
SAVE                 : 
SHOW                 : 34 35
STRING_LITERAL       : 29 34
THEN                 : 12
TIMES                : 23
TRUE                 : 32
WHILE                : 37 38
error                : 

Nonterminals, with rules where they appear

assignment           : 4
boolean              : 
condition            : 12 37 38
conditional          : 5
display              : 8
else_statements_opt  : 12
empty                : 14 40 43 48 50
expression           : 9 10 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 41 42 49
expression_list      : 11 39 42
function             : 7
list                 : 36
loop                 : 6
parameters           : 44 45 47
program              : 0
return_statement_opt : 44
statement            : 2 3
statements           : 1 2 12 13 36 37 38 44 45
term                 : 27

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statement statements
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function
    (8) statement -> . display
    (9) statement -> . expression
    (10) assignment -> . LET IDENTIFIER EQUAL expression
    (11) assignment -> . LET IDENTIFIER EQUAL expression_list
    (12) conditional -> . IF condition THEN statements else_statements_opt END
    (36) loop -> . FOR IDENTIFIER IN list DO statements
    (37) loop -> . WHILE condition DO statements
    (38) loop -> . DO statements WHILE condition
    (44) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (34) display -> . SHOW STRING_LITERAL
    (35) display -> . SHOW IDENTIFIER
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression POWER expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . term
    (28) term -> . NUMBER
    (29) term -> . STRING_LITERAL
    (30) term -> . BOOLEAN
    (31) term -> . IDENTIFIER

    LET             shift and go to state 10
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 15
    DO              shift and go to state 14
    FUNCTION        shift and go to state 16
    SHOW            shift and go to state 18
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 21
    STRING_LITERAL  shift and go to state 19
    BOOLEAN         shift and go to state 22
    IDENTIFIER      shift and go to state 11

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function                       shift and go to state 7
    display                        shift and go to state 8
    expression                     shift and go to state 9
    term                           shift and go to state 20

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .

    $end            reduce using rule 1 (program -> statements .)


state 3

    (2) statements -> statement . statements
    (3) statements -> statement .
    (2) statements -> . statement statements
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function
    (8) statement -> . display
    (9) statement -> . expression
    (10) assignment -> . LET IDENTIFIER EQUAL expression
    (11) assignment -> . LET IDENTIFIER EQUAL expression_list
    (12) conditional -> . IF condition THEN statements else_statements_opt END
    (36) loop -> . FOR IDENTIFIER IN list DO statements
    (37) loop -> . WHILE condition DO statements
    (38) loop -> . DO statements WHILE condition
    (44) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (34) display -> . SHOW STRING_LITERAL
    (35) display -> . SHOW IDENTIFIER
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression POWER expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . term
    (28) term -> . NUMBER
    (29) term -> . STRING_LITERAL
    (30) term -> . BOOLEAN
    (31) term -> . IDENTIFIER

  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for SHOW resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    $end            reduce using rule 3 (statements -> statement .)
    ELSE            reduce using rule 3 (statements -> statement .)
    END             reduce using rule 3 (statements -> statement .)
    RBRACE          reduce using rule 3 (statements -> statement .)
    LET             shift and go to state 10
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 15
    DO              shift and go to state 14
    FUNCTION        shift and go to state 16
    SHOW            shift and go to state 18
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 21
    STRING_LITERAL  shift and go to state 19
    BOOLEAN         shift and go to state 22
    IDENTIFIER      shift and go to state 11

  ! WHILE           [ reduce using rule 3 (statements -> statement .) ]
  ! LET             [ reduce using rule 3 (statements -> statement .) ]
  ! IF              [ reduce using rule 3 (statements -> statement .) ]
  ! FOR             [ reduce using rule 3 (statements -> statement .) ]
  ! DO              [ reduce using rule 3 (statements -> statement .) ]
  ! FUNCTION        [ reduce using rule 3 (statements -> statement .) ]
  ! SHOW            [ reduce using rule 3 (statements -> statement .) ]
  ! LPAREN          [ reduce using rule 3 (statements -> statement .) ]
  ! NUMBER          [ reduce using rule 3 (statements -> statement .) ]
  ! STRING_LITERAL  [ reduce using rule 3 (statements -> statement .) ]
  ! BOOLEAN         [ reduce using rule 3 (statements -> statement .) ]
  ! IDENTIFIER      [ reduce using rule 3 (statements -> statement .) ]

    statement                      shift and go to state 3
    statements                     shift and go to state 23
    assignment                     shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function                       shift and go to state 7
    display                        shift and go to state 8
    expression                     shift and go to state 9
    term                           shift and go to state 20

state 4

    (4) statement -> assignment .

    LET             reduce using rule 4 (statement -> assignment .)
    IF              reduce using rule 4 (statement -> assignment .)
    FOR             reduce using rule 4 (statement -> assignment .)
    WHILE           reduce using rule 4 (statement -> assignment .)
    DO              reduce using rule 4 (statement -> assignment .)
    FUNCTION        reduce using rule 4 (statement -> assignment .)
    SHOW            reduce using rule 4 (statement -> assignment .)
    LPAREN          reduce using rule 4 (statement -> assignment .)
    NUMBER          reduce using rule 4 (statement -> assignment .)
    STRING_LITERAL  reduce using rule 4 (statement -> assignment .)
    BOOLEAN         reduce using rule 4 (statement -> assignment .)
    IDENTIFIER      reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)
    ELSE            reduce using rule 4 (statement -> assignment .)
    END             reduce using rule 4 (statement -> assignment .)
    RBRACE          reduce using rule 4 (statement -> assignment .)


state 5

    (5) statement -> conditional .

    LET             reduce using rule 5 (statement -> conditional .)
    IF              reduce using rule 5 (statement -> conditional .)
    FOR             reduce using rule 5 (statement -> conditional .)
    WHILE           reduce using rule 5 (statement -> conditional .)
    DO              reduce using rule 5 (statement -> conditional .)
    FUNCTION        reduce using rule 5 (statement -> conditional .)
    SHOW            reduce using rule 5 (statement -> conditional .)
    LPAREN          reduce using rule 5 (statement -> conditional .)
    NUMBER          reduce using rule 5 (statement -> conditional .)
    STRING_LITERAL  reduce using rule 5 (statement -> conditional .)
    BOOLEAN         reduce using rule 5 (statement -> conditional .)
    IDENTIFIER      reduce using rule 5 (statement -> conditional .)
    $end            reduce using rule 5 (statement -> conditional .)
    ELSE            reduce using rule 5 (statement -> conditional .)
    END             reduce using rule 5 (statement -> conditional .)
    RBRACE          reduce using rule 5 (statement -> conditional .)


state 6

    (6) statement -> loop .

    LET             reduce using rule 6 (statement -> loop .)
    IF              reduce using rule 6 (statement -> loop .)
    FOR             reduce using rule 6 (statement -> loop .)
    WHILE           reduce using rule 6 (statement -> loop .)
    DO              reduce using rule 6 (statement -> loop .)
    FUNCTION        reduce using rule 6 (statement -> loop .)
    SHOW            reduce using rule 6 (statement -> loop .)
    LPAREN          reduce using rule 6 (statement -> loop .)
    NUMBER          reduce using rule 6 (statement -> loop .)
    STRING_LITERAL  reduce using rule 6 (statement -> loop .)
    BOOLEAN         reduce using rule 6 (statement -> loop .)
    IDENTIFIER      reduce using rule 6 (statement -> loop .)
    $end            reduce using rule 6 (statement -> loop .)
    ELSE            reduce using rule 6 (statement -> loop .)
    END             reduce using rule 6 (statement -> loop .)
    RBRACE          reduce using rule 6 (statement -> loop .)


state 7

    (7) statement -> function .

    LET             reduce using rule 7 (statement -> function .)
    IF              reduce using rule 7 (statement -> function .)
    FOR             reduce using rule 7 (statement -> function .)
    WHILE           reduce using rule 7 (statement -> function .)
    DO              reduce using rule 7 (statement -> function .)
    FUNCTION        reduce using rule 7 (statement -> function .)
    SHOW            reduce using rule 7 (statement -> function .)
    LPAREN          reduce using rule 7 (statement -> function .)
    NUMBER          reduce using rule 7 (statement -> function .)
    STRING_LITERAL  reduce using rule 7 (statement -> function .)
    BOOLEAN         reduce using rule 7 (statement -> function .)
    IDENTIFIER      reduce using rule 7 (statement -> function .)
    $end            reduce using rule 7 (statement -> function .)
    ELSE            reduce using rule 7 (statement -> function .)
    END             reduce using rule 7 (statement -> function .)
    RBRACE          reduce using rule 7 (statement -> function .)


state 8

    (8) statement -> display .

    LET             reduce using rule 8 (statement -> display .)
    IF              reduce using rule 8 (statement -> display .)
    FOR             reduce using rule 8 (statement -> display .)
    WHILE           reduce using rule 8 (statement -> display .)
    DO              reduce using rule 8 (statement -> display .)
    FUNCTION        reduce using rule 8 (statement -> display .)
    SHOW            reduce using rule 8 (statement -> display .)
    LPAREN          reduce using rule 8 (statement -> display .)
    NUMBER          reduce using rule 8 (statement -> display .)
    STRING_LITERAL  reduce using rule 8 (statement -> display .)
    BOOLEAN         reduce using rule 8 (statement -> display .)
    IDENTIFIER      reduce using rule 8 (statement -> display .)
    $end            reduce using rule 8 (statement -> display .)
    ELSE            reduce using rule 8 (statement -> display .)
    END             reduce using rule 8 (statement -> display .)
    RBRACE          reduce using rule 8 (statement -> display .)


state 9

    (9) statement -> expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . POWER expression

    LET             reduce using rule 9 (statement -> expression .)
    IF              reduce using rule 9 (statement -> expression .)
    FOR             reduce using rule 9 (statement -> expression .)
    WHILE           reduce using rule 9 (statement -> expression .)
    DO              reduce using rule 9 (statement -> expression .)
    FUNCTION        reduce using rule 9 (statement -> expression .)
    SHOW            reduce using rule 9 (statement -> expression .)
    LPAREN          reduce using rule 9 (statement -> expression .)
    NUMBER          reduce using rule 9 (statement -> expression .)
    STRING_LITERAL  reduce using rule 9 (statement -> expression .)
    BOOLEAN         reduce using rule 9 (statement -> expression .)
    IDENTIFIER      reduce using rule 9 (statement -> expression .)
    $end            reduce using rule 9 (statement -> expression .)
    ELSE            reduce using rule 9 (statement -> expression .)
    END             reduce using rule 9 (statement -> expression .)
    RBRACE          reduce using rule 9 (statement -> expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    POWER           shift and go to state 28


state 10

    (10) assignment -> LET . IDENTIFIER EQUAL expression
    (11) assignment -> LET . IDENTIFIER EQUAL expression_list

    IDENTIFIER      shift and go to state 29


state 11

    (31) term -> IDENTIFIER .

    PLUS            reduce using rule 31 (term -> IDENTIFIER .)
    MINUS           reduce using rule 31 (term -> IDENTIFIER .)
    TIMES           reduce using rule 31 (term -> IDENTIFIER .)
    DIVIDE          reduce using rule 31 (term -> IDENTIFIER .)
    POWER           reduce using rule 31 (term -> IDENTIFIER .)
    LET             reduce using rule 31 (term -> IDENTIFIER .)
    IF              reduce using rule 31 (term -> IDENTIFIER .)
    FOR             reduce using rule 31 (term -> IDENTIFIER .)
    WHILE           reduce using rule 31 (term -> IDENTIFIER .)
    DO              reduce using rule 31 (term -> IDENTIFIER .)
    FUNCTION        reduce using rule 31 (term -> IDENTIFIER .)
    SHOW            reduce using rule 31 (term -> IDENTIFIER .)
    LPAREN          reduce using rule 31 (term -> IDENTIFIER .)
    NUMBER          reduce using rule 31 (term -> IDENTIFIER .)
    STRING_LITERAL  reduce using rule 31 (term -> IDENTIFIER .)
    BOOLEAN         reduce using rule 31 (term -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 31 (term -> IDENTIFIER .)
    $end            reduce using rule 31 (term -> IDENTIFIER .)
    ELSE            reduce using rule 31 (term -> IDENTIFIER .)
    END             reduce using rule 31 (term -> IDENTIFIER .)
    RBRACE          reduce using rule 31 (term -> IDENTIFIER .)
    IS_LESS_THAN    reduce using rule 31 (term -> IDENTIFIER .)
    IS_EQUAL_TO     reduce using rule 31 (term -> IDENTIFIER .)
    IS_GREATER_THAN reduce using rule 31 (term -> IDENTIFIER .)
    IS_NOT_EQUAL_TO reduce using rule 31 (term -> IDENTIFIER .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 31 (term -> IDENTIFIER .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 31 (term -> IDENTIFIER .)
    RPAREN          reduce using rule 31 (term -> IDENTIFIER .)
    COMMA           reduce using rule 31 (term -> IDENTIFIER .)
    THEN            reduce using rule 31 (term -> IDENTIFIER .)
    RBRACKET        reduce using rule 31 (term -> IDENTIFIER .)


state 12

    (12) conditional -> IF . condition THEN statements else_statements_opt END
    (15) condition -> . expression IS_LESS_THAN expression
    (16) condition -> . expression IS_EQUAL_TO expression
    (17) condition -> . expression IS_GREATER_THAN expression
    (18) condition -> . expression IS_NOT_EQUAL_TO expression
    (19) condition -> . expression GREATER_THAN_OR_EQUAL_TO expression
    (20) condition -> . expression LESS_THAN_OR_EQUAL_TO expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression POWER expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . term
    (28) term -> . NUMBER
    (29) term -> . STRING_LITERAL
    (30) term -> . BOOLEAN
    (31) term -> . IDENTIFIER

    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 21
    STRING_LITERAL  shift and go to state 19
    BOOLEAN         shift and go to state 22
    IDENTIFIER      shift and go to state 11

    condition                      shift and go to state 30
    expression                     shift and go to state 31
    term                           shift and go to state 20

state 13

    (36) loop -> FOR . IDENTIFIER IN list DO statements

    IDENTIFIER      shift and go to state 32


state 14

    (38) loop -> DO . statements WHILE condition
    (2) statements -> . statement statements
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function
    (8) statement -> . display
    (9) statement -> . expression
    (10) assignment -> . LET IDENTIFIER EQUAL expression
    (11) assignment -> . LET IDENTIFIER EQUAL expression_list
    (12) conditional -> . IF condition THEN statements else_statements_opt END
    (36) loop -> . FOR IDENTIFIER IN list DO statements
    (37) loop -> . WHILE condition DO statements
    (38) loop -> . DO statements WHILE condition
    (44) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (34) display -> . SHOW STRING_LITERAL
    (35) display -> . SHOW IDENTIFIER
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression POWER expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . term
    (28) term -> . NUMBER
    (29) term -> . STRING_LITERAL
    (30) term -> . BOOLEAN
    (31) term -> . IDENTIFIER

    LET             shift and go to state 10
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 15
    DO              shift and go to state 14
    FUNCTION        shift and go to state 16
    SHOW            shift and go to state 18
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 21
    STRING_LITERAL  shift and go to state 19
    BOOLEAN         shift and go to state 22
    IDENTIFIER      shift and go to state 11

    statements                     shift and go to state 33
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function                       shift and go to state 7
    display                        shift and go to state 8
    expression                     shift and go to state 9
    term                           shift and go to state 20

state 15

    (37) loop -> WHILE . condition DO statements
    (15) condition -> . expression IS_LESS_THAN expression
    (16) condition -> . expression IS_EQUAL_TO expression
    (17) condition -> . expression IS_GREATER_THAN expression
    (18) condition -> . expression IS_NOT_EQUAL_TO expression
    (19) condition -> . expression GREATER_THAN_OR_EQUAL_TO expression
    (20) condition -> . expression LESS_THAN_OR_EQUAL_TO expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression POWER expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . term
    (28) term -> . NUMBER
    (29) term -> . STRING_LITERAL
    (30) term -> . BOOLEAN
    (31) term -> . IDENTIFIER

    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 21
    STRING_LITERAL  shift and go to state 19
    BOOLEAN         shift and go to state 22
    IDENTIFIER      shift and go to state 11

    condition                      shift and go to state 34
    expression                     shift and go to state 31
    term                           shift and go to state 20

state 16

    (44) function -> FUNCTION . IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (45) function -> FUNCTION . IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE

    IDENTIFIER      shift and go to state 35


state 17

    (26) expression -> LPAREN . expression RPAREN
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression POWER expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . term
    (28) term -> . NUMBER
    (29) term -> . STRING_LITERAL
    (30) term -> . BOOLEAN
    (31) term -> . IDENTIFIER

    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 21
    STRING_LITERAL  shift and go to state 19
    BOOLEAN         shift and go to state 22
    IDENTIFIER      shift and go to state 11

    expression                     shift and go to state 36
    term                           shift and go to state 20

state 18

    (34) display -> SHOW . STRING_LITERAL
    (35) display -> SHOW . IDENTIFIER

    STRING_LITERAL  shift and go to state 37
    IDENTIFIER      shift and go to state 38


state 19

    (29) term -> STRING_LITERAL .

    PLUS            reduce using rule 29 (term -> STRING_LITERAL .)
    MINUS           reduce using rule 29 (term -> STRING_LITERAL .)
    TIMES           reduce using rule 29 (term -> STRING_LITERAL .)
    DIVIDE          reduce using rule 29 (term -> STRING_LITERAL .)
    POWER           reduce using rule 29 (term -> STRING_LITERAL .)
    LET             reduce using rule 29 (term -> STRING_LITERAL .)
    IF              reduce using rule 29 (term -> STRING_LITERAL .)
    FOR             reduce using rule 29 (term -> STRING_LITERAL .)
    WHILE           reduce using rule 29 (term -> STRING_LITERAL .)
    DO              reduce using rule 29 (term -> STRING_LITERAL .)
    FUNCTION        reduce using rule 29 (term -> STRING_LITERAL .)
    SHOW            reduce using rule 29 (term -> STRING_LITERAL .)
    LPAREN          reduce using rule 29 (term -> STRING_LITERAL .)
    NUMBER          reduce using rule 29 (term -> STRING_LITERAL .)
    STRING_LITERAL  reduce using rule 29 (term -> STRING_LITERAL .)
    BOOLEAN         reduce using rule 29 (term -> STRING_LITERAL .)
    IDENTIFIER      reduce using rule 29 (term -> STRING_LITERAL .)
    $end            reduce using rule 29 (term -> STRING_LITERAL .)
    ELSE            reduce using rule 29 (term -> STRING_LITERAL .)
    END             reduce using rule 29 (term -> STRING_LITERAL .)
    RBRACE          reduce using rule 29 (term -> STRING_LITERAL .)
    IS_LESS_THAN    reduce using rule 29 (term -> STRING_LITERAL .)
    IS_EQUAL_TO     reduce using rule 29 (term -> STRING_LITERAL .)
    IS_GREATER_THAN reduce using rule 29 (term -> STRING_LITERAL .)
    IS_NOT_EQUAL_TO reduce using rule 29 (term -> STRING_LITERAL .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 29 (term -> STRING_LITERAL .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 29 (term -> STRING_LITERAL .)
    RPAREN          reduce using rule 29 (term -> STRING_LITERAL .)
    COMMA           reduce using rule 29 (term -> STRING_LITERAL .)
    THEN            reduce using rule 29 (term -> STRING_LITERAL .)
    RBRACKET        reduce using rule 29 (term -> STRING_LITERAL .)


state 20

    (27) expression -> term .

    PLUS            reduce using rule 27 (expression -> term .)
    MINUS           reduce using rule 27 (expression -> term .)
    TIMES           reduce using rule 27 (expression -> term .)
    DIVIDE          reduce using rule 27 (expression -> term .)
    POWER           reduce using rule 27 (expression -> term .)
    LET             reduce using rule 27 (expression -> term .)
    IF              reduce using rule 27 (expression -> term .)
    FOR             reduce using rule 27 (expression -> term .)
    WHILE           reduce using rule 27 (expression -> term .)
    DO              reduce using rule 27 (expression -> term .)
    FUNCTION        reduce using rule 27 (expression -> term .)
    SHOW            reduce using rule 27 (expression -> term .)
    LPAREN          reduce using rule 27 (expression -> term .)
    NUMBER          reduce using rule 27 (expression -> term .)
    STRING_LITERAL  reduce using rule 27 (expression -> term .)
    BOOLEAN         reduce using rule 27 (expression -> term .)
    IDENTIFIER      reduce using rule 27 (expression -> term .)
    $end            reduce using rule 27 (expression -> term .)
    ELSE            reduce using rule 27 (expression -> term .)
    END             reduce using rule 27 (expression -> term .)
    RBRACE          reduce using rule 27 (expression -> term .)
    IS_LESS_THAN    reduce using rule 27 (expression -> term .)
    IS_EQUAL_TO     reduce using rule 27 (expression -> term .)
    IS_GREATER_THAN reduce using rule 27 (expression -> term .)
    IS_NOT_EQUAL_TO reduce using rule 27 (expression -> term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 27 (expression -> term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 27 (expression -> term .)
    RPAREN          reduce using rule 27 (expression -> term .)
    COMMA           reduce using rule 27 (expression -> term .)
    THEN            reduce using rule 27 (expression -> term .)
    RBRACKET        reduce using rule 27 (expression -> term .)


state 21

    (28) term -> NUMBER .

    PLUS            reduce using rule 28 (term -> NUMBER .)
    MINUS           reduce using rule 28 (term -> NUMBER .)
    TIMES           reduce using rule 28 (term -> NUMBER .)
    DIVIDE          reduce using rule 28 (term -> NUMBER .)
    POWER           reduce using rule 28 (term -> NUMBER .)
    LET             reduce using rule 28 (term -> NUMBER .)
    IF              reduce using rule 28 (term -> NUMBER .)
    FOR             reduce using rule 28 (term -> NUMBER .)
    WHILE           reduce using rule 28 (term -> NUMBER .)
    DO              reduce using rule 28 (term -> NUMBER .)
    FUNCTION        reduce using rule 28 (term -> NUMBER .)
    SHOW            reduce using rule 28 (term -> NUMBER .)
    LPAREN          reduce using rule 28 (term -> NUMBER .)
    NUMBER          reduce using rule 28 (term -> NUMBER .)
    STRING_LITERAL  reduce using rule 28 (term -> NUMBER .)
    BOOLEAN         reduce using rule 28 (term -> NUMBER .)
    IDENTIFIER      reduce using rule 28 (term -> NUMBER .)
    $end            reduce using rule 28 (term -> NUMBER .)
    ELSE            reduce using rule 28 (term -> NUMBER .)
    END             reduce using rule 28 (term -> NUMBER .)
    RBRACE          reduce using rule 28 (term -> NUMBER .)
    IS_LESS_THAN    reduce using rule 28 (term -> NUMBER .)
    IS_EQUAL_TO     reduce using rule 28 (term -> NUMBER .)
    IS_GREATER_THAN reduce using rule 28 (term -> NUMBER .)
    IS_NOT_EQUAL_TO reduce using rule 28 (term -> NUMBER .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 28 (term -> NUMBER .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 28 (term -> NUMBER .)
    RPAREN          reduce using rule 28 (term -> NUMBER .)
    COMMA           reduce using rule 28 (term -> NUMBER .)
    THEN            reduce using rule 28 (term -> NUMBER .)
    RBRACKET        reduce using rule 28 (term -> NUMBER .)


state 22

    (30) term -> BOOLEAN .

    PLUS            reduce using rule 30 (term -> BOOLEAN .)
    MINUS           reduce using rule 30 (term -> BOOLEAN .)
    TIMES           reduce using rule 30 (term -> BOOLEAN .)
    DIVIDE          reduce using rule 30 (term -> BOOLEAN .)
    POWER           reduce using rule 30 (term -> BOOLEAN .)
    LET             reduce using rule 30 (term -> BOOLEAN .)
    IF              reduce using rule 30 (term -> BOOLEAN .)
    FOR             reduce using rule 30 (term -> BOOLEAN .)
    WHILE           reduce using rule 30 (term -> BOOLEAN .)
    DO              reduce using rule 30 (term -> BOOLEAN .)
    FUNCTION        reduce using rule 30 (term -> BOOLEAN .)
    SHOW            reduce using rule 30 (term -> BOOLEAN .)
    LPAREN          reduce using rule 30 (term -> BOOLEAN .)
    NUMBER          reduce using rule 30 (term -> BOOLEAN .)
    STRING_LITERAL  reduce using rule 30 (term -> BOOLEAN .)
    BOOLEAN         reduce using rule 30 (term -> BOOLEAN .)
    IDENTIFIER      reduce using rule 30 (term -> BOOLEAN .)
    $end            reduce using rule 30 (term -> BOOLEAN .)
    ELSE            reduce using rule 30 (term -> BOOLEAN .)
    END             reduce using rule 30 (term -> BOOLEAN .)
    RBRACE          reduce using rule 30 (term -> BOOLEAN .)
    IS_LESS_THAN    reduce using rule 30 (term -> BOOLEAN .)
    IS_EQUAL_TO     reduce using rule 30 (term -> BOOLEAN .)
    IS_GREATER_THAN reduce using rule 30 (term -> BOOLEAN .)
    IS_NOT_EQUAL_TO reduce using rule 30 (term -> BOOLEAN .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 30 (term -> BOOLEAN .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 30 (term -> BOOLEAN .)
    RPAREN          reduce using rule 30 (term -> BOOLEAN .)
    COMMA           reduce using rule 30 (term -> BOOLEAN .)
    THEN            reduce using rule 30 (term -> BOOLEAN .)
    RBRACKET        reduce using rule 30 (term -> BOOLEAN .)


state 23

    (2) statements -> statement statements .

    $end            reduce using rule 2 (statements -> statement statements .)
    WHILE           reduce using rule 2 (statements -> statement statements .)
    ELSE            reduce using rule 2 (statements -> statement statements .)
    END             reduce using rule 2 (statements -> statement statements .)
    LET             reduce using rule 2 (statements -> statement statements .)
    IF              reduce using rule 2 (statements -> statement statements .)
    FOR             reduce using rule 2 (statements -> statement statements .)
    DO              reduce using rule 2 (statements -> statement statements .)
    FUNCTION        reduce using rule 2 (statements -> statement statements .)
    SHOW            reduce using rule 2 (statements -> statement statements .)
    LPAREN          reduce using rule 2 (statements -> statement statements .)
    NUMBER          reduce using rule 2 (statements -> statement statements .)
    STRING_LITERAL  reduce using rule 2 (statements -> statement statements .)
    BOOLEAN         reduce using rule 2 (statements -> statement statements .)
    IDENTIFIER      reduce using rule 2 (statements -> statement statements .)
    RBRACE          reduce using rule 2 (statements -> statement statements .)


state 24

    (21) expression -> expression PLUS . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression POWER expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . term
    (28) term -> . NUMBER
    (29) term -> . STRING_LITERAL
    (30) term -> . BOOLEAN
    (31) term -> . IDENTIFIER

    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 21
    STRING_LITERAL  shift and go to state 19
    BOOLEAN         shift and go to state 22
    IDENTIFIER      shift and go to state 11

    expression                     shift and go to state 39
    term                           shift and go to state 20

state 25

    (22) expression -> expression MINUS . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression POWER expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . term
    (28) term -> . NUMBER
    (29) term -> . STRING_LITERAL
    (30) term -> . BOOLEAN
    (31) term -> . IDENTIFIER

    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 21
    STRING_LITERAL  shift and go to state 19
    BOOLEAN         shift and go to state 22
    IDENTIFIER      shift and go to state 11

    expression                     shift and go to state 40
    term                           shift and go to state 20

state 26

    (23) expression -> expression TIMES . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression POWER expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . term
    (28) term -> . NUMBER
    (29) term -> . STRING_LITERAL
    (30) term -> . BOOLEAN
    (31) term -> . IDENTIFIER

    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 21
    STRING_LITERAL  shift and go to state 19
    BOOLEAN         shift and go to state 22
    IDENTIFIER      shift and go to state 11

    expression                     shift and go to state 41
    term                           shift and go to state 20

state 27

    (24) expression -> expression DIVIDE . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression POWER expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . term
    (28) term -> . NUMBER
    (29) term -> . STRING_LITERAL
    (30) term -> . BOOLEAN
    (31) term -> . IDENTIFIER

    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 21
    STRING_LITERAL  shift and go to state 19
    BOOLEAN         shift and go to state 22
    IDENTIFIER      shift and go to state 11

    expression                     shift and go to state 42
    term                           shift and go to state 20

state 28

    (25) expression -> expression POWER . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression POWER expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . term
    (28) term -> . NUMBER
    (29) term -> . STRING_LITERAL
    (30) term -> . BOOLEAN
    (31) term -> . IDENTIFIER

    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 21
    STRING_LITERAL  shift and go to state 19
    BOOLEAN         shift and go to state 22
    IDENTIFIER      shift and go to state 11

    expression                     shift and go to state 43
    term                           shift and go to state 20

state 29

    (10) assignment -> LET IDENTIFIER . EQUAL expression
    (11) assignment -> LET IDENTIFIER . EQUAL expression_list

    EQUAL           shift and go to state 44


state 30

    (12) conditional -> IF condition . THEN statements else_statements_opt END

    THEN            shift and go to state 45


state 31

    (15) condition -> expression . IS_LESS_THAN expression
    (16) condition -> expression . IS_EQUAL_TO expression
    (17) condition -> expression . IS_GREATER_THAN expression
    (18) condition -> expression . IS_NOT_EQUAL_TO expression
    (19) condition -> expression . GREATER_THAN_OR_EQUAL_TO expression
    (20) condition -> expression . LESS_THAN_OR_EQUAL_TO expression
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . POWER expression

    IS_LESS_THAN    shift and go to state 46
    IS_EQUAL_TO     shift and go to state 47
    IS_GREATER_THAN shift and go to state 48
    IS_NOT_EQUAL_TO shift and go to state 49
    GREATER_THAN_OR_EQUAL_TO shift and go to state 50
    LESS_THAN_OR_EQUAL_TO shift and go to state 51
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    POWER           shift and go to state 28


state 32

    (36) loop -> FOR IDENTIFIER . IN list DO statements

    IN              shift and go to state 52


state 33

    (38) loop -> DO statements . WHILE condition

    WHILE           shift and go to state 53


state 34

    (37) loop -> WHILE condition . DO statements

    DO              shift and go to state 54


state 35

    (44) function -> FUNCTION IDENTIFIER . LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (45) function -> FUNCTION IDENTIFIER . LPAREN parameters RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 55


state 36

    (26) expression -> LPAREN expression . RPAREN
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . POWER expression

    RPAREN          shift and go to state 56
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    POWER           shift and go to state 28


state 37

    (34) display -> SHOW STRING_LITERAL .

    LET             reduce using rule 34 (display -> SHOW STRING_LITERAL .)
    IF              reduce using rule 34 (display -> SHOW STRING_LITERAL .)
    FOR             reduce using rule 34 (display -> SHOW STRING_LITERAL .)
    WHILE           reduce using rule 34 (display -> SHOW STRING_LITERAL .)
    DO              reduce using rule 34 (display -> SHOW STRING_LITERAL .)
    FUNCTION        reduce using rule 34 (display -> SHOW STRING_LITERAL .)
    SHOW            reduce using rule 34 (display -> SHOW STRING_LITERAL .)
    LPAREN          reduce using rule 34 (display -> SHOW STRING_LITERAL .)
    NUMBER          reduce using rule 34 (display -> SHOW STRING_LITERAL .)
    STRING_LITERAL  reduce using rule 34 (display -> SHOW STRING_LITERAL .)
    BOOLEAN         reduce using rule 34 (display -> SHOW STRING_LITERAL .)
    IDENTIFIER      reduce using rule 34 (display -> SHOW STRING_LITERAL .)
    $end            reduce using rule 34 (display -> SHOW STRING_LITERAL .)
    ELSE            reduce using rule 34 (display -> SHOW STRING_LITERAL .)
    END             reduce using rule 34 (display -> SHOW STRING_LITERAL .)
    RBRACE          reduce using rule 34 (display -> SHOW STRING_LITERAL .)


state 38

    (35) display -> SHOW IDENTIFIER .

    LET             reduce using rule 35 (display -> SHOW IDENTIFIER .)
    IF              reduce using rule 35 (display -> SHOW IDENTIFIER .)
    FOR             reduce using rule 35 (display -> SHOW IDENTIFIER .)
    WHILE           reduce using rule 35 (display -> SHOW IDENTIFIER .)
    DO              reduce using rule 35 (display -> SHOW IDENTIFIER .)
    FUNCTION        reduce using rule 35 (display -> SHOW IDENTIFIER .)
    SHOW            reduce using rule 35 (display -> SHOW IDENTIFIER .)
    LPAREN          reduce using rule 35 (display -> SHOW IDENTIFIER .)
    NUMBER          reduce using rule 35 (display -> SHOW IDENTIFIER .)
    STRING_LITERAL  reduce using rule 35 (display -> SHOW IDENTIFIER .)
    BOOLEAN         reduce using rule 35 (display -> SHOW IDENTIFIER .)
    IDENTIFIER      reduce using rule 35 (display -> SHOW IDENTIFIER .)
    $end            reduce using rule 35 (display -> SHOW IDENTIFIER .)
    ELSE            reduce using rule 35 (display -> SHOW IDENTIFIER .)
    END             reduce using rule 35 (display -> SHOW IDENTIFIER .)
    RBRACE          reduce using rule 35 (display -> SHOW IDENTIFIER .)


state 39

    (21) expression -> expression PLUS expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . POWER expression

    PLUS            reduce using rule 21 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 21 (expression -> expression PLUS expression .)
    LET             reduce using rule 21 (expression -> expression PLUS expression .)
    IF              reduce using rule 21 (expression -> expression PLUS expression .)
    FOR             reduce using rule 21 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 21 (expression -> expression PLUS expression .)
    DO              reduce using rule 21 (expression -> expression PLUS expression .)
    FUNCTION        reduce using rule 21 (expression -> expression PLUS expression .)
    SHOW            reduce using rule 21 (expression -> expression PLUS expression .)
    LPAREN          reduce using rule 21 (expression -> expression PLUS expression .)
    NUMBER          reduce using rule 21 (expression -> expression PLUS expression .)
    STRING_LITERAL  reduce using rule 21 (expression -> expression PLUS expression .)
    BOOLEAN         reduce using rule 21 (expression -> expression PLUS expression .)
    IDENTIFIER      reduce using rule 21 (expression -> expression PLUS expression .)
    $end            reduce using rule 21 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 21 (expression -> expression PLUS expression .)
    END             reduce using rule 21 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 21 (expression -> expression PLUS expression .)
    IS_LESS_THAN    reduce using rule 21 (expression -> expression PLUS expression .)
    IS_EQUAL_TO     reduce using rule 21 (expression -> expression PLUS expression .)
    IS_GREATER_THAN reduce using rule 21 (expression -> expression PLUS expression .)
    IS_NOT_EQUAL_TO reduce using rule 21 (expression -> expression PLUS expression .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 21 (expression -> expression PLUS expression .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 21 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 21 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 21 (expression -> expression PLUS expression .)
    THEN            reduce using rule 21 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 21 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    POWER           shift and go to state 28

  ! TIMES           [ reduce using rule 21 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 21 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 21 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 24 ]
  ! MINUS           [ shift and go to state 25 ]


state 40

    (22) expression -> expression MINUS expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . POWER expression

    PLUS            reduce using rule 22 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 22 (expression -> expression MINUS expression .)
    LET             reduce using rule 22 (expression -> expression MINUS expression .)
    IF              reduce using rule 22 (expression -> expression MINUS expression .)
    FOR             reduce using rule 22 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 22 (expression -> expression MINUS expression .)
    DO              reduce using rule 22 (expression -> expression MINUS expression .)
    FUNCTION        reduce using rule 22 (expression -> expression MINUS expression .)
    SHOW            reduce using rule 22 (expression -> expression MINUS expression .)
    LPAREN          reduce using rule 22 (expression -> expression MINUS expression .)
    NUMBER          reduce using rule 22 (expression -> expression MINUS expression .)
    STRING_LITERAL  reduce using rule 22 (expression -> expression MINUS expression .)
    BOOLEAN         reduce using rule 22 (expression -> expression MINUS expression .)
    IDENTIFIER      reduce using rule 22 (expression -> expression MINUS expression .)
    $end            reduce using rule 22 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 22 (expression -> expression MINUS expression .)
    END             reduce using rule 22 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 22 (expression -> expression MINUS expression .)
    IS_LESS_THAN    reduce using rule 22 (expression -> expression MINUS expression .)
    IS_EQUAL_TO     reduce using rule 22 (expression -> expression MINUS expression .)
    IS_GREATER_THAN reduce using rule 22 (expression -> expression MINUS expression .)
    IS_NOT_EQUAL_TO reduce using rule 22 (expression -> expression MINUS expression .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 22 (expression -> expression MINUS expression .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 22 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 22 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 22 (expression -> expression MINUS expression .)
    THEN            reduce using rule 22 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 22 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    POWER           shift and go to state 28

  ! TIMES           [ reduce using rule 22 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 22 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 22 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 24 ]
  ! MINUS           [ shift and go to state 25 ]


state 41

    (23) expression -> expression TIMES expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . POWER expression

    PLUS            reduce using rule 23 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 23 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 23 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 23 (expression -> expression TIMES expression .)
    LET             reduce using rule 23 (expression -> expression TIMES expression .)
    IF              reduce using rule 23 (expression -> expression TIMES expression .)
    FOR             reduce using rule 23 (expression -> expression TIMES expression .)
    WHILE           reduce using rule 23 (expression -> expression TIMES expression .)
    DO              reduce using rule 23 (expression -> expression TIMES expression .)
    FUNCTION        reduce using rule 23 (expression -> expression TIMES expression .)
    SHOW            reduce using rule 23 (expression -> expression TIMES expression .)
    LPAREN          reduce using rule 23 (expression -> expression TIMES expression .)
    NUMBER          reduce using rule 23 (expression -> expression TIMES expression .)
    STRING_LITERAL  reduce using rule 23 (expression -> expression TIMES expression .)
    BOOLEAN         reduce using rule 23 (expression -> expression TIMES expression .)
    IDENTIFIER      reduce using rule 23 (expression -> expression TIMES expression .)
    $end            reduce using rule 23 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 23 (expression -> expression TIMES expression .)
    END             reduce using rule 23 (expression -> expression TIMES expression .)
    RBRACE          reduce using rule 23 (expression -> expression TIMES expression .)
    IS_LESS_THAN    reduce using rule 23 (expression -> expression TIMES expression .)
    IS_EQUAL_TO     reduce using rule 23 (expression -> expression TIMES expression .)
    IS_GREATER_THAN reduce using rule 23 (expression -> expression TIMES expression .)
    IS_NOT_EQUAL_TO reduce using rule 23 (expression -> expression TIMES expression .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 23 (expression -> expression TIMES expression .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 23 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 23 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 23 (expression -> expression TIMES expression .)
    THEN            reduce using rule 23 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 23 (expression -> expression TIMES expression .)
    POWER           shift and go to state 28

  ! POWER           [ reduce using rule 23 (expression -> expression TIMES expression .) ]
  ! PLUS            [ shift and go to state 24 ]
  ! MINUS           [ shift and go to state 25 ]
  ! TIMES           [ shift and go to state 26 ]
  ! DIVIDE          [ shift and go to state 27 ]


state 42

    (24) expression -> expression DIVIDE expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . POWER expression

    PLUS            reduce using rule 24 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 24 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 24 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 24 (expression -> expression DIVIDE expression .)
    LET             reduce using rule 24 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 24 (expression -> expression DIVIDE expression .)
    FOR             reduce using rule 24 (expression -> expression DIVIDE expression .)
    WHILE           reduce using rule 24 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 24 (expression -> expression DIVIDE expression .)
    FUNCTION        reduce using rule 24 (expression -> expression DIVIDE expression .)
    SHOW            reduce using rule 24 (expression -> expression DIVIDE expression .)
    LPAREN          reduce using rule 24 (expression -> expression DIVIDE expression .)
    NUMBER          reduce using rule 24 (expression -> expression DIVIDE expression .)
    STRING_LITERAL  reduce using rule 24 (expression -> expression DIVIDE expression .)
    BOOLEAN         reduce using rule 24 (expression -> expression DIVIDE expression .)
    IDENTIFIER      reduce using rule 24 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 24 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 24 (expression -> expression DIVIDE expression .)
    END             reduce using rule 24 (expression -> expression DIVIDE expression .)
    RBRACE          reduce using rule 24 (expression -> expression DIVIDE expression .)
    IS_LESS_THAN    reduce using rule 24 (expression -> expression DIVIDE expression .)
    IS_EQUAL_TO     reduce using rule 24 (expression -> expression DIVIDE expression .)
    IS_GREATER_THAN reduce using rule 24 (expression -> expression DIVIDE expression .)
    IS_NOT_EQUAL_TO reduce using rule 24 (expression -> expression DIVIDE expression .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 24 (expression -> expression DIVIDE expression .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 24 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 24 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 24 (expression -> expression DIVIDE expression .)
    THEN            reduce using rule 24 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 24 (expression -> expression DIVIDE expression .)
    POWER           shift and go to state 28

  ! POWER           [ reduce using rule 24 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 24 ]
  ! MINUS           [ shift and go to state 25 ]
  ! TIMES           [ shift and go to state 26 ]
  ! DIVIDE          [ shift and go to state 27 ]


state 43

    (25) expression -> expression POWER expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . POWER expression

    PLUS            reduce using rule 25 (expression -> expression POWER expression .)
    MINUS           reduce using rule 25 (expression -> expression POWER expression .)
    TIMES           reduce using rule 25 (expression -> expression POWER expression .)
    DIVIDE          reduce using rule 25 (expression -> expression POWER expression .)
    LET             reduce using rule 25 (expression -> expression POWER expression .)
    IF              reduce using rule 25 (expression -> expression POWER expression .)
    FOR             reduce using rule 25 (expression -> expression POWER expression .)
    WHILE           reduce using rule 25 (expression -> expression POWER expression .)
    DO              reduce using rule 25 (expression -> expression POWER expression .)
    FUNCTION        reduce using rule 25 (expression -> expression POWER expression .)
    SHOW            reduce using rule 25 (expression -> expression POWER expression .)
    LPAREN          reduce using rule 25 (expression -> expression POWER expression .)
    NUMBER          reduce using rule 25 (expression -> expression POWER expression .)
    STRING_LITERAL  reduce using rule 25 (expression -> expression POWER expression .)
    BOOLEAN         reduce using rule 25 (expression -> expression POWER expression .)
    IDENTIFIER      reduce using rule 25 (expression -> expression POWER expression .)
    $end            reduce using rule 25 (expression -> expression POWER expression .)
    ELSE            reduce using rule 25 (expression -> expression POWER expression .)
    END             reduce using rule 25 (expression -> expression POWER expression .)
    RBRACE          reduce using rule 25 (expression -> expression POWER expression .)
    IS_LESS_THAN    reduce using rule 25 (expression -> expression POWER expression .)
    IS_EQUAL_TO     reduce using rule 25 (expression -> expression POWER expression .)
    IS_GREATER_THAN reduce using rule 25 (expression -> expression POWER expression .)
    IS_NOT_EQUAL_TO reduce using rule 25 (expression -> expression POWER expression .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 25 (expression -> expression POWER expression .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 25 (expression -> expression POWER expression .)
    RPAREN          reduce using rule 25 (expression -> expression POWER expression .)
    COMMA           reduce using rule 25 (expression -> expression POWER expression .)
    THEN            reduce using rule 25 (expression -> expression POWER expression .)
    RBRACKET        reduce using rule 25 (expression -> expression POWER expression .)
    POWER           shift and go to state 28

  ! POWER           [ reduce using rule 25 (expression -> expression POWER expression .) ]
  ! PLUS            [ shift and go to state 24 ]
  ! MINUS           [ shift and go to state 25 ]
  ! TIMES           [ shift and go to state 26 ]
  ! DIVIDE          [ shift and go to state 27 ]


state 44

    (10) assignment -> LET IDENTIFIER EQUAL . expression
    (11) assignment -> LET IDENTIFIER EQUAL . expression_list
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression POWER expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . term
    (41) expression_list -> . expression
    (42) expression_list -> . expression COMMA expression_list
    (43) expression_list -> . empty
    (28) term -> . NUMBER
    (29) term -> . STRING_LITERAL
    (30) term -> . BOOLEAN
    (31) term -> . IDENTIFIER
    (51) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 21
    STRING_LITERAL  shift and go to state 19
    BOOLEAN         shift and go to state 22
    IDENTIFIER      shift and go to state 11
    LET             reduce using rule 51 (empty -> .)
    IF              reduce using rule 51 (empty -> .)
    FOR             reduce using rule 51 (empty -> .)
    WHILE           reduce using rule 51 (empty -> .)
    DO              reduce using rule 51 (empty -> .)
    FUNCTION        reduce using rule 51 (empty -> .)
    SHOW            reduce using rule 51 (empty -> .)
    $end            reduce using rule 51 (empty -> .)
    ELSE            reduce using rule 51 (empty -> .)
    END             reduce using rule 51 (empty -> .)
    RBRACE          reduce using rule 51 (empty -> .)

  ! LPAREN          [ reduce using rule 51 (empty -> .) ]
  ! NUMBER          [ reduce using rule 51 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 51 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 51 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 51 (empty -> .) ]

    expression                     shift and go to state 57
    expression_list                shift and go to state 58
    term                           shift and go to state 20
    empty                          shift and go to state 59

state 45

    (12) conditional -> IF condition THEN . statements else_statements_opt END
    (2) statements -> . statement statements
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function
    (8) statement -> . display
    (9) statement -> . expression
    (10) assignment -> . LET IDENTIFIER EQUAL expression
    (11) assignment -> . LET IDENTIFIER EQUAL expression_list
    (12) conditional -> . IF condition THEN statements else_statements_opt END
    (36) loop -> . FOR IDENTIFIER IN list DO statements
    (37) loop -> . WHILE condition DO statements
    (38) loop -> . DO statements WHILE condition
    (44) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (34) display -> . SHOW STRING_LITERAL
    (35) display -> . SHOW IDENTIFIER
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression POWER expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . term
    (28) term -> . NUMBER
    (29) term -> . STRING_LITERAL
    (30) term -> . BOOLEAN
    (31) term -> . IDENTIFIER

    LET             shift and go to state 10
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 15
    DO              shift and go to state 14
    FUNCTION        shift and go to state 16
    SHOW            shift and go to state 18
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 21
    STRING_LITERAL  shift and go to state 19
    BOOLEAN         shift and go to state 22
    IDENTIFIER      shift and go to state 11

    statements                     shift and go to state 60
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function                       shift and go to state 7
    display                        shift and go to state 8
    expression                     shift and go to state 9
    term                           shift and go to state 20

state 46

    (15) condition -> expression IS_LESS_THAN . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression POWER expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . term
    (28) term -> . NUMBER
    (29) term -> . STRING_LITERAL
    (30) term -> . BOOLEAN
    (31) term -> . IDENTIFIER

    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 21
    STRING_LITERAL  shift and go to state 19
    BOOLEAN         shift and go to state 22
    IDENTIFIER      shift and go to state 11

    expression                     shift and go to state 61
    term                           shift and go to state 20

state 47

    (16) condition -> expression IS_EQUAL_TO . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression POWER expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . term
    (28) term -> . NUMBER
    (29) term -> . STRING_LITERAL
    (30) term -> . BOOLEAN
    (31) term -> . IDENTIFIER

    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 21
    STRING_LITERAL  shift and go to state 19
    BOOLEAN         shift and go to state 22
    IDENTIFIER      shift and go to state 11

    expression                     shift and go to state 62
    term                           shift and go to state 20

state 48

    (17) condition -> expression IS_GREATER_THAN . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression POWER expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . term
    (28) term -> . NUMBER
    (29) term -> . STRING_LITERAL
    (30) term -> . BOOLEAN
    (31) term -> . IDENTIFIER

    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 21
    STRING_LITERAL  shift and go to state 19
    BOOLEAN         shift and go to state 22
    IDENTIFIER      shift and go to state 11

    expression                     shift and go to state 63
    term                           shift and go to state 20

state 49

    (18) condition -> expression IS_NOT_EQUAL_TO . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression POWER expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . term
    (28) term -> . NUMBER
    (29) term -> . STRING_LITERAL
    (30) term -> . BOOLEAN
    (31) term -> . IDENTIFIER

    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 21
    STRING_LITERAL  shift and go to state 19
    BOOLEAN         shift and go to state 22
    IDENTIFIER      shift and go to state 11

    expression                     shift and go to state 64
    term                           shift and go to state 20

state 50

    (19) condition -> expression GREATER_THAN_OR_EQUAL_TO . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression POWER expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . term
    (28) term -> . NUMBER
    (29) term -> . STRING_LITERAL
    (30) term -> . BOOLEAN
    (31) term -> . IDENTIFIER

    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 21
    STRING_LITERAL  shift and go to state 19
    BOOLEAN         shift and go to state 22
    IDENTIFIER      shift and go to state 11

    expression                     shift and go to state 65
    term                           shift and go to state 20

state 51

    (20) condition -> expression LESS_THAN_OR_EQUAL_TO . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression POWER expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . term
    (28) term -> . NUMBER
    (29) term -> . STRING_LITERAL
    (30) term -> . BOOLEAN
    (31) term -> . IDENTIFIER

    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 21
    STRING_LITERAL  shift and go to state 19
    BOOLEAN         shift and go to state 22
    IDENTIFIER      shift and go to state 11

    expression                     shift and go to state 66
    term                           shift and go to state 20

state 52

    (36) loop -> FOR IDENTIFIER IN . list DO statements
    (39) list -> . LBRACKET expression_list RBRACKET
    (40) list -> . empty
    (51) empty -> .

    LBRACKET        shift and go to state 68
    DO              reduce using rule 51 (empty -> .)

    list                           shift and go to state 67
    empty                          shift and go to state 69

state 53

    (38) loop -> DO statements WHILE . condition
    (15) condition -> . expression IS_LESS_THAN expression
    (16) condition -> . expression IS_EQUAL_TO expression
    (17) condition -> . expression IS_GREATER_THAN expression
    (18) condition -> . expression IS_NOT_EQUAL_TO expression
    (19) condition -> . expression GREATER_THAN_OR_EQUAL_TO expression
    (20) condition -> . expression LESS_THAN_OR_EQUAL_TO expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression POWER expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . term
    (28) term -> . NUMBER
    (29) term -> . STRING_LITERAL
    (30) term -> . BOOLEAN
    (31) term -> . IDENTIFIER

    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 21
    STRING_LITERAL  shift and go to state 19
    BOOLEAN         shift and go to state 22
    IDENTIFIER      shift and go to state 11

    condition                      shift and go to state 70
    expression                     shift and go to state 31
    term                           shift and go to state 20

state 54

    (37) loop -> WHILE condition DO . statements
    (2) statements -> . statement statements
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function
    (8) statement -> . display
    (9) statement -> . expression
    (10) assignment -> . LET IDENTIFIER EQUAL expression
    (11) assignment -> . LET IDENTIFIER EQUAL expression_list
    (12) conditional -> . IF condition THEN statements else_statements_opt END
    (36) loop -> . FOR IDENTIFIER IN list DO statements
    (37) loop -> . WHILE condition DO statements
    (38) loop -> . DO statements WHILE condition
    (44) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (34) display -> . SHOW STRING_LITERAL
    (35) display -> . SHOW IDENTIFIER
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression POWER expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . term
    (28) term -> . NUMBER
    (29) term -> . STRING_LITERAL
    (30) term -> . BOOLEAN
    (31) term -> . IDENTIFIER

    LET             shift and go to state 10
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 15
    DO              shift and go to state 14
    FUNCTION        shift and go to state 16
    SHOW            shift and go to state 18
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 21
    STRING_LITERAL  shift and go to state 19
    BOOLEAN         shift and go to state 22
    IDENTIFIER      shift and go to state 11

    statements                     shift and go to state 71
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function                       shift and go to state 7
    display                        shift and go to state 8
    expression                     shift and go to state 9
    term                           shift and go to state 20

state 55

    (44) function -> FUNCTION IDENTIFIER LPAREN . parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (45) function -> FUNCTION IDENTIFIER LPAREN . parameters RPAREN LBRACE statements RBRACE
    (46) parameters -> . IDENTIFIER
    (47) parameters -> . IDENTIFIER COMMA parameters
    (48) parameters -> . empty
    (51) empty -> .

    IDENTIFIER      shift and go to state 72
    RPAREN          reduce using rule 51 (empty -> .)

    parameters                     shift and go to state 73
    empty                          shift and go to state 74

state 56

    (26) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    LET             reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    SHOW            reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    STRING_LITERAL  reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    BOOLEAN         reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    END             reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    IS_LESS_THAN    reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    IS_EQUAL_TO     reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    IS_GREATER_THAN reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    IS_NOT_EQUAL_TO reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 26 (expression -> LPAREN expression RPAREN .)


state 57

    (10) assignment -> LET IDENTIFIER EQUAL expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . POWER expression
    (41) expression_list -> expression .
    (42) expression_list -> expression . COMMA expression_list

  ! reduce/reduce conflict for LET resolved using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
  ! reduce/reduce conflict for IF resolved using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
  ! reduce/reduce conflict for FOR resolved using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
  ! reduce/reduce conflict for DO resolved using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
  ! reduce/reduce conflict for SHOW resolved using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
  ! reduce/reduce conflict for STRING_LITERAL resolved using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
  ! reduce/reduce conflict for $end resolved using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
  ! reduce/reduce conflict for END resolved using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
  ! reduce/reduce conflict for RBRACE resolved using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
    LET             reduce using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
    IF              reduce using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
    FOR             reduce using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
    WHILE           reduce using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
    DO              reduce using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
    FUNCTION        reduce using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
    SHOW            reduce using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
    LPAREN          reduce using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
    NUMBER          reduce using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
    STRING_LITERAL  reduce using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
    BOOLEAN         reduce using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
    IDENTIFIER      reduce using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
    $end            reduce using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
    ELSE            reduce using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
    END             reduce using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
    RBRACE          reduce using rule 10 (assignment -> LET IDENTIFIER EQUAL expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    POWER           shift and go to state 28
    COMMA           shift and go to state 75

  ! LET             [ reduce using rule 41 (expression_list -> expression .) ]
  ! IF              [ reduce using rule 41 (expression_list -> expression .) ]
  ! FOR             [ reduce using rule 41 (expression_list -> expression .) ]
  ! WHILE           [ reduce using rule 41 (expression_list -> expression .) ]
  ! DO              [ reduce using rule 41 (expression_list -> expression .) ]
  ! FUNCTION        [ reduce using rule 41 (expression_list -> expression .) ]
  ! SHOW            [ reduce using rule 41 (expression_list -> expression .) ]
  ! LPAREN          [ reduce using rule 41 (expression_list -> expression .) ]
  ! NUMBER          [ reduce using rule 41 (expression_list -> expression .) ]
  ! STRING_LITERAL  [ reduce using rule 41 (expression_list -> expression .) ]
  ! BOOLEAN         [ reduce using rule 41 (expression_list -> expression .) ]
  ! IDENTIFIER      [ reduce using rule 41 (expression_list -> expression .) ]
  ! $end            [ reduce using rule 41 (expression_list -> expression .) ]
  ! ELSE            [ reduce using rule 41 (expression_list -> expression .) ]
  ! END             [ reduce using rule 41 (expression_list -> expression .) ]
  ! RBRACE          [ reduce using rule 41 (expression_list -> expression .) ]


state 58

    (11) assignment -> LET IDENTIFIER EQUAL expression_list .

    LET             reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression_list .)
    IF              reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression_list .)
    FOR             reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression_list .)
    WHILE           reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression_list .)
    DO              reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression_list .)
    FUNCTION        reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression_list .)
    SHOW            reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression_list .)
    LPAREN          reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression_list .)
    NUMBER          reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression_list .)
    STRING_LITERAL  reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression_list .)
    BOOLEAN         reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression_list .)
    IDENTIFIER      reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression_list .)
    $end            reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression_list .)
    ELSE            reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression_list .)
    END             reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression_list .)
    RBRACE          reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression_list .)


state 59

    (43) expression_list -> empty .

    LET             reduce using rule 43 (expression_list -> empty .)
    IF              reduce using rule 43 (expression_list -> empty .)
    FOR             reduce using rule 43 (expression_list -> empty .)
    WHILE           reduce using rule 43 (expression_list -> empty .)
    DO              reduce using rule 43 (expression_list -> empty .)
    FUNCTION        reduce using rule 43 (expression_list -> empty .)
    SHOW            reduce using rule 43 (expression_list -> empty .)
    LPAREN          reduce using rule 43 (expression_list -> empty .)
    NUMBER          reduce using rule 43 (expression_list -> empty .)
    STRING_LITERAL  reduce using rule 43 (expression_list -> empty .)
    BOOLEAN         reduce using rule 43 (expression_list -> empty .)
    IDENTIFIER      reduce using rule 43 (expression_list -> empty .)
    $end            reduce using rule 43 (expression_list -> empty .)
    ELSE            reduce using rule 43 (expression_list -> empty .)
    END             reduce using rule 43 (expression_list -> empty .)
    RBRACE          reduce using rule 43 (expression_list -> empty .)
    RBRACKET        reduce using rule 43 (expression_list -> empty .)


state 60

    (12) conditional -> IF condition THEN statements . else_statements_opt END
    (13) else_statements_opt -> . ELSE statements
    (14) else_statements_opt -> . empty
    (51) empty -> .

    ELSE            shift and go to state 77
    END             reduce using rule 51 (empty -> .)

    else_statements_opt            shift and go to state 76
    empty                          shift and go to state 78

state 61

    (15) condition -> expression IS_LESS_THAN expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . POWER expression

    THEN            reduce using rule 15 (condition -> expression IS_LESS_THAN expression .)
    DO              reduce using rule 15 (condition -> expression IS_LESS_THAN expression .)
    LET             reduce using rule 15 (condition -> expression IS_LESS_THAN expression .)
    IF              reduce using rule 15 (condition -> expression IS_LESS_THAN expression .)
    FOR             reduce using rule 15 (condition -> expression IS_LESS_THAN expression .)
    WHILE           reduce using rule 15 (condition -> expression IS_LESS_THAN expression .)
    FUNCTION        reduce using rule 15 (condition -> expression IS_LESS_THAN expression .)
    SHOW            reduce using rule 15 (condition -> expression IS_LESS_THAN expression .)
    LPAREN          reduce using rule 15 (condition -> expression IS_LESS_THAN expression .)
    NUMBER          reduce using rule 15 (condition -> expression IS_LESS_THAN expression .)
    STRING_LITERAL  reduce using rule 15 (condition -> expression IS_LESS_THAN expression .)
    BOOLEAN         reduce using rule 15 (condition -> expression IS_LESS_THAN expression .)
    IDENTIFIER      reduce using rule 15 (condition -> expression IS_LESS_THAN expression .)
    $end            reduce using rule 15 (condition -> expression IS_LESS_THAN expression .)
    ELSE            reduce using rule 15 (condition -> expression IS_LESS_THAN expression .)
    END             reduce using rule 15 (condition -> expression IS_LESS_THAN expression .)
    RBRACE          reduce using rule 15 (condition -> expression IS_LESS_THAN expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    POWER           shift and go to state 28


state 62

    (16) condition -> expression IS_EQUAL_TO expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . POWER expression

    THEN            reduce using rule 16 (condition -> expression IS_EQUAL_TO expression .)
    DO              reduce using rule 16 (condition -> expression IS_EQUAL_TO expression .)
    LET             reduce using rule 16 (condition -> expression IS_EQUAL_TO expression .)
    IF              reduce using rule 16 (condition -> expression IS_EQUAL_TO expression .)
    FOR             reduce using rule 16 (condition -> expression IS_EQUAL_TO expression .)
    WHILE           reduce using rule 16 (condition -> expression IS_EQUAL_TO expression .)
    FUNCTION        reduce using rule 16 (condition -> expression IS_EQUAL_TO expression .)
    SHOW            reduce using rule 16 (condition -> expression IS_EQUAL_TO expression .)
    LPAREN          reduce using rule 16 (condition -> expression IS_EQUAL_TO expression .)
    NUMBER          reduce using rule 16 (condition -> expression IS_EQUAL_TO expression .)
    STRING_LITERAL  reduce using rule 16 (condition -> expression IS_EQUAL_TO expression .)
    BOOLEAN         reduce using rule 16 (condition -> expression IS_EQUAL_TO expression .)
    IDENTIFIER      reduce using rule 16 (condition -> expression IS_EQUAL_TO expression .)
    $end            reduce using rule 16 (condition -> expression IS_EQUAL_TO expression .)
    ELSE            reduce using rule 16 (condition -> expression IS_EQUAL_TO expression .)
    END             reduce using rule 16 (condition -> expression IS_EQUAL_TO expression .)
    RBRACE          reduce using rule 16 (condition -> expression IS_EQUAL_TO expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    POWER           shift and go to state 28


state 63

    (17) condition -> expression IS_GREATER_THAN expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . POWER expression

    THEN            reduce using rule 17 (condition -> expression IS_GREATER_THAN expression .)
    DO              reduce using rule 17 (condition -> expression IS_GREATER_THAN expression .)
    LET             reduce using rule 17 (condition -> expression IS_GREATER_THAN expression .)
    IF              reduce using rule 17 (condition -> expression IS_GREATER_THAN expression .)
    FOR             reduce using rule 17 (condition -> expression IS_GREATER_THAN expression .)
    WHILE           reduce using rule 17 (condition -> expression IS_GREATER_THAN expression .)
    FUNCTION        reduce using rule 17 (condition -> expression IS_GREATER_THAN expression .)
    SHOW            reduce using rule 17 (condition -> expression IS_GREATER_THAN expression .)
    LPAREN          reduce using rule 17 (condition -> expression IS_GREATER_THAN expression .)
    NUMBER          reduce using rule 17 (condition -> expression IS_GREATER_THAN expression .)
    STRING_LITERAL  reduce using rule 17 (condition -> expression IS_GREATER_THAN expression .)
    BOOLEAN         reduce using rule 17 (condition -> expression IS_GREATER_THAN expression .)
    IDENTIFIER      reduce using rule 17 (condition -> expression IS_GREATER_THAN expression .)
    $end            reduce using rule 17 (condition -> expression IS_GREATER_THAN expression .)
    ELSE            reduce using rule 17 (condition -> expression IS_GREATER_THAN expression .)
    END             reduce using rule 17 (condition -> expression IS_GREATER_THAN expression .)
    RBRACE          reduce using rule 17 (condition -> expression IS_GREATER_THAN expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    POWER           shift and go to state 28


state 64

    (18) condition -> expression IS_NOT_EQUAL_TO expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . POWER expression

    THEN            reduce using rule 18 (condition -> expression IS_NOT_EQUAL_TO expression .)
    DO              reduce using rule 18 (condition -> expression IS_NOT_EQUAL_TO expression .)
    LET             reduce using rule 18 (condition -> expression IS_NOT_EQUAL_TO expression .)
    IF              reduce using rule 18 (condition -> expression IS_NOT_EQUAL_TO expression .)
    FOR             reduce using rule 18 (condition -> expression IS_NOT_EQUAL_TO expression .)
    WHILE           reduce using rule 18 (condition -> expression IS_NOT_EQUAL_TO expression .)
    FUNCTION        reduce using rule 18 (condition -> expression IS_NOT_EQUAL_TO expression .)
    SHOW            reduce using rule 18 (condition -> expression IS_NOT_EQUAL_TO expression .)
    LPAREN          reduce using rule 18 (condition -> expression IS_NOT_EQUAL_TO expression .)
    NUMBER          reduce using rule 18 (condition -> expression IS_NOT_EQUAL_TO expression .)
    STRING_LITERAL  reduce using rule 18 (condition -> expression IS_NOT_EQUAL_TO expression .)
    BOOLEAN         reduce using rule 18 (condition -> expression IS_NOT_EQUAL_TO expression .)
    IDENTIFIER      reduce using rule 18 (condition -> expression IS_NOT_EQUAL_TO expression .)
    $end            reduce using rule 18 (condition -> expression IS_NOT_EQUAL_TO expression .)
    ELSE            reduce using rule 18 (condition -> expression IS_NOT_EQUAL_TO expression .)
    END             reduce using rule 18 (condition -> expression IS_NOT_EQUAL_TO expression .)
    RBRACE          reduce using rule 18 (condition -> expression IS_NOT_EQUAL_TO expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    POWER           shift and go to state 28


state 65

    (19) condition -> expression GREATER_THAN_OR_EQUAL_TO expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . POWER expression

    THEN            reduce using rule 19 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    DO              reduce using rule 19 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    LET             reduce using rule 19 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    IF              reduce using rule 19 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    FOR             reduce using rule 19 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    WHILE           reduce using rule 19 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    FUNCTION        reduce using rule 19 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    SHOW            reduce using rule 19 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    LPAREN          reduce using rule 19 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    NUMBER          reduce using rule 19 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    STRING_LITERAL  reduce using rule 19 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    BOOLEAN         reduce using rule 19 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    IDENTIFIER      reduce using rule 19 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    $end            reduce using rule 19 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    ELSE            reduce using rule 19 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    END             reduce using rule 19 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    RBRACE          reduce using rule 19 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    POWER           shift and go to state 28


state 66

    (20) condition -> expression LESS_THAN_OR_EQUAL_TO expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . POWER expression

    THEN            reduce using rule 20 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    DO              reduce using rule 20 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    LET             reduce using rule 20 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    IF              reduce using rule 20 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    FOR             reduce using rule 20 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    WHILE           reduce using rule 20 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    FUNCTION        reduce using rule 20 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    SHOW            reduce using rule 20 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    LPAREN          reduce using rule 20 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    NUMBER          reduce using rule 20 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    STRING_LITERAL  reduce using rule 20 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    BOOLEAN         reduce using rule 20 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    IDENTIFIER      reduce using rule 20 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    $end            reduce using rule 20 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    ELSE            reduce using rule 20 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    END             reduce using rule 20 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    RBRACE          reduce using rule 20 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    POWER           shift and go to state 28


state 67

    (36) loop -> FOR IDENTIFIER IN list . DO statements

    DO              shift and go to state 79


state 68

    (39) list -> LBRACKET . expression_list RBRACKET
    (41) expression_list -> . expression
    (42) expression_list -> . expression COMMA expression_list
    (43) expression_list -> . empty
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression POWER expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . term
    (51) empty -> .
    (28) term -> . NUMBER
    (29) term -> . STRING_LITERAL
    (30) term -> . BOOLEAN
    (31) term -> . IDENTIFIER

    LPAREN          shift and go to state 17
    RBRACKET        reduce using rule 51 (empty -> .)
    NUMBER          shift and go to state 21
    STRING_LITERAL  shift and go to state 19
    BOOLEAN         shift and go to state 22
    IDENTIFIER      shift and go to state 11

    expression_list                shift and go to state 80
    expression                     shift and go to state 81
    empty                          shift and go to state 59
    term                           shift and go to state 20

state 69

    (40) list -> empty .

    DO              reduce using rule 40 (list -> empty .)


state 70

    (38) loop -> DO statements WHILE condition .

    LET             reduce using rule 38 (loop -> DO statements WHILE condition .)
    IF              reduce using rule 38 (loop -> DO statements WHILE condition .)
    FOR             reduce using rule 38 (loop -> DO statements WHILE condition .)
    WHILE           reduce using rule 38 (loop -> DO statements WHILE condition .)
    DO              reduce using rule 38 (loop -> DO statements WHILE condition .)
    FUNCTION        reduce using rule 38 (loop -> DO statements WHILE condition .)
    SHOW            reduce using rule 38 (loop -> DO statements WHILE condition .)
    LPAREN          reduce using rule 38 (loop -> DO statements WHILE condition .)
    NUMBER          reduce using rule 38 (loop -> DO statements WHILE condition .)
    STRING_LITERAL  reduce using rule 38 (loop -> DO statements WHILE condition .)
    BOOLEAN         reduce using rule 38 (loop -> DO statements WHILE condition .)
    IDENTIFIER      reduce using rule 38 (loop -> DO statements WHILE condition .)
    $end            reduce using rule 38 (loop -> DO statements WHILE condition .)
    ELSE            reduce using rule 38 (loop -> DO statements WHILE condition .)
    END             reduce using rule 38 (loop -> DO statements WHILE condition .)
    RBRACE          reduce using rule 38 (loop -> DO statements WHILE condition .)


state 71

    (37) loop -> WHILE condition DO statements .

    LET             reduce using rule 37 (loop -> WHILE condition DO statements .)
    IF              reduce using rule 37 (loop -> WHILE condition DO statements .)
    FOR             reduce using rule 37 (loop -> WHILE condition DO statements .)
    WHILE           reduce using rule 37 (loop -> WHILE condition DO statements .)
    DO              reduce using rule 37 (loop -> WHILE condition DO statements .)
    FUNCTION        reduce using rule 37 (loop -> WHILE condition DO statements .)
    SHOW            reduce using rule 37 (loop -> WHILE condition DO statements .)
    LPAREN          reduce using rule 37 (loop -> WHILE condition DO statements .)
    NUMBER          reduce using rule 37 (loop -> WHILE condition DO statements .)
    STRING_LITERAL  reduce using rule 37 (loop -> WHILE condition DO statements .)
    BOOLEAN         reduce using rule 37 (loop -> WHILE condition DO statements .)
    IDENTIFIER      reduce using rule 37 (loop -> WHILE condition DO statements .)
    $end            reduce using rule 37 (loop -> WHILE condition DO statements .)
    ELSE            reduce using rule 37 (loop -> WHILE condition DO statements .)
    END             reduce using rule 37 (loop -> WHILE condition DO statements .)
    RBRACE          reduce using rule 37 (loop -> WHILE condition DO statements .)


state 72

    (46) parameters -> IDENTIFIER .
    (47) parameters -> IDENTIFIER . COMMA parameters

    RPAREN          reduce using rule 46 (parameters -> IDENTIFIER .)
    COMMA           shift and go to state 82


state 73

    (44) function -> FUNCTION IDENTIFIER LPAREN parameters . RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (45) function -> FUNCTION IDENTIFIER LPAREN parameters . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 83


state 74

    (48) parameters -> empty .

    RPAREN          reduce using rule 48 (parameters -> empty .)


state 75

    (42) expression_list -> expression COMMA . expression_list
    (41) expression_list -> . expression
    (42) expression_list -> . expression COMMA expression_list
    (43) expression_list -> . empty
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression POWER expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . term
    (51) empty -> .
    (28) term -> . NUMBER
    (29) term -> . STRING_LITERAL
    (30) term -> . BOOLEAN
    (31) term -> . IDENTIFIER

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LPAREN          shift and go to state 17
    LET             reduce using rule 51 (empty -> .)
    IF              reduce using rule 51 (empty -> .)
    FOR             reduce using rule 51 (empty -> .)
    WHILE           reduce using rule 51 (empty -> .)
    DO              reduce using rule 51 (empty -> .)
    FUNCTION        reduce using rule 51 (empty -> .)
    SHOW            reduce using rule 51 (empty -> .)
    $end            reduce using rule 51 (empty -> .)
    ELSE            reduce using rule 51 (empty -> .)
    END             reduce using rule 51 (empty -> .)
    RBRACE          reduce using rule 51 (empty -> .)
    RBRACKET        reduce using rule 51 (empty -> .)
    NUMBER          shift and go to state 21
    STRING_LITERAL  shift and go to state 19
    BOOLEAN         shift and go to state 22
    IDENTIFIER      shift and go to state 11

  ! LPAREN          [ reduce using rule 51 (empty -> .) ]
  ! NUMBER          [ reduce using rule 51 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 51 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 51 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 51 (empty -> .) ]

    expression                     shift and go to state 81
    expression_list                shift and go to state 84
    empty                          shift and go to state 59
    term                           shift and go to state 20

state 76

    (12) conditional -> IF condition THEN statements else_statements_opt . END

    END             shift and go to state 85


state 77

    (13) else_statements_opt -> ELSE . statements
    (2) statements -> . statement statements
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function
    (8) statement -> . display
    (9) statement -> . expression
    (10) assignment -> . LET IDENTIFIER EQUAL expression
    (11) assignment -> . LET IDENTIFIER EQUAL expression_list
    (12) conditional -> . IF condition THEN statements else_statements_opt END
    (36) loop -> . FOR IDENTIFIER IN list DO statements
    (37) loop -> . WHILE condition DO statements
    (38) loop -> . DO statements WHILE condition
    (44) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (34) display -> . SHOW STRING_LITERAL
    (35) display -> . SHOW IDENTIFIER
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression POWER expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . term
    (28) term -> . NUMBER
    (29) term -> . STRING_LITERAL
    (30) term -> . BOOLEAN
    (31) term -> . IDENTIFIER

    LET             shift and go to state 10
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 15
    DO              shift and go to state 14
    FUNCTION        shift and go to state 16
    SHOW            shift and go to state 18
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 21
    STRING_LITERAL  shift and go to state 19
    BOOLEAN         shift and go to state 22
    IDENTIFIER      shift and go to state 11

    statements                     shift and go to state 86
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function                       shift and go to state 7
    display                        shift and go to state 8
    expression                     shift and go to state 9
    term                           shift and go to state 20

state 78

    (14) else_statements_opt -> empty .

    END             reduce using rule 14 (else_statements_opt -> empty .)


state 79

    (36) loop -> FOR IDENTIFIER IN list DO . statements
    (2) statements -> . statement statements
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function
    (8) statement -> . display
    (9) statement -> . expression
    (10) assignment -> . LET IDENTIFIER EQUAL expression
    (11) assignment -> . LET IDENTIFIER EQUAL expression_list
    (12) conditional -> . IF condition THEN statements else_statements_opt END
    (36) loop -> . FOR IDENTIFIER IN list DO statements
    (37) loop -> . WHILE condition DO statements
    (38) loop -> . DO statements WHILE condition
    (44) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (34) display -> . SHOW STRING_LITERAL
    (35) display -> . SHOW IDENTIFIER
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression POWER expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . term
    (28) term -> . NUMBER
    (29) term -> . STRING_LITERAL
    (30) term -> . BOOLEAN
    (31) term -> . IDENTIFIER

    LET             shift and go to state 10
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 15
    DO              shift and go to state 14
    FUNCTION        shift and go to state 16
    SHOW            shift and go to state 18
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 21
    STRING_LITERAL  shift and go to state 19
    BOOLEAN         shift and go to state 22
    IDENTIFIER      shift and go to state 11

    statements                     shift and go to state 87
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function                       shift and go to state 7
    display                        shift and go to state 8
    expression                     shift and go to state 9
    term                           shift and go to state 20

state 80

    (39) list -> LBRACKET expression_list . RBRACKET

    RBRACKET        shift and go to state 88


state 81

    (41) expression_list -> expression .
    (42) expression_list -> expression . COMMA expression_list
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . POWER expression

    RBRACKET        reduce using rule 41 (expression_list -> expression .)
    LET             reduce using rule 41 (expression_list -> expression .)
    IF              reduce using rule 41 (expression_list -> expression .)
    FOR             reduce using rule 41 (expression_list -> expression .)
    WHILE           reduce using rule 41 (expression_list -> expression .)
    DO              reduce using rule 41 (expression_list -> expression .)
    FUNCTION        reduce using rule 41 (expression_list -> expression .)
    SHOW            reduce using rule 41 (expression_list -> expression .)
    LPAREN          reduce using rule 41 (expression_list -> expression .)
    NUMBER          reduce using rule 41 (expression_list -> expression .)
    STRING_LITERAL  reduce using rule 41 (expression_list -> expression .)
    BOOLEAN         reduce using rule 41 (expression_list -> expression .)
    IDENTIFIER      reduce using rule 41 (expression_list -> expression .)
    $end            reduce using rule 41 (expression_list -> expression .)
    ELSE            reduce using rule 41 (expression_list -> expression .)
    END             reduce using rule 41 (expression_list -> expression .)
    RBRACE          reduce using rule 41 (expression_list -> expression .)
    COMMA           shift and go to state 75
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    POWER           shift and go to state 28


state 82

    (47) parameters -> IDENTIFIER COMMA . parameters
    (46) parameters -> . IDENTIFIER
    (47) parameters -> . IDENTIFIER COMMA parameters
    (48) parameters -> . empty
    (51) empty -> .

    IDENTIFIER      shift and go to state 72
    RPAREN          reduce using rule 51 (empty -> .)

    parameters                     shift and go to state 89
    empty                          shift and go to state 74

state 83

    (44) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN . LBRACE statements RBRACE return_statement_opt RBRACE
    (45) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 90


state 84

    (42) expression_list -> expression COMMA expression_list .

    LET             reduce using rule 42 (expression_list -> expression COMMA expression_list .)
    IF              reduce using rule 42 (expression_list -> expression COMMA expression_list .)
    FOR             reduce using rule 42 (expression_list -> expression COMMA expression_list .)
    WHILE           reduce using rule 42 (expression_list -> expression COMMA expression_list .)
    DO              reduce using rule 42 (expression_list -> expression COMMA expression_list .)
    FUNCTION        reduce using rule 42 (expression_list -> expression COMMA expression_list .)
    SHOW            reduce using rule 42 (expression_list -> expression COMMA expression_list .)
    LPAREN          reduce using rule 42 (expression_list -> expression COMMA expression_list .)
    NUMBER          reduce using rule 42 (expression_list -> expression COMMA expression_list .)
    STRING_LITERAL  reduce using rule 42 (expression_list -> expression COMMA expression_list .)
    BOOLEAN         reduce using rule 42 (expression_list -> expression COMMA expression_list .)
    IDENTIFIER      reduce using rule 42 (expression_list -> expression COMMA expression_list .)
    $end            reduce using rule 42 (expression_list -> expression COMMA expression_list .)
    ELSE            reduce using rule 42 (expression_list -> expression COMMA expression_list .)
    END             reduce using rule 42 (expression_list -> expression COMMA expression_list .)
    RBRACE          reduce using rule 42 (expression_list -> expression COMMA expression_list .)
    RBRACKET        reduce using rule 42 (expression_list -> expression COMMA expression_list .)


state 85

    (12) conditional -> IF condition THEN statements else_statements_opt END .

    LET             reduce using rule 12 (conditional -> IF condition THEN statements else_statements_opt END .)
    IF              reduce using rule 12 (conditional -> IF condition THEN statements else_statements_opt END .)
    FOR             reduce using rule 12 (conditional -> IF condition THEN statements else_statements_opt END .)
    WHILE           reduce using rule 12 (conditional -> IF condition THEN statements else_statements_opt END .)
    DO              reduce using rule 12 (conditional -> IF condition THEN statements else_statements_opt END .)
    FUNCTION        reduce using rule 12 (conditional -> IF condition THEN statements else_statements_opt END .)
    SHOW            reduce using rule 12 (conditional -> IF condition THEN statements else_statements_opt END .)
    LPAREN          reduce using rule 12 (conditional -> IF condition THEN statements else_statements_opt END .)
    NUMBER          reduce using rule 12 (conditional -> IF condition THEN statements else_statements_opt END .)
    STRING_LITERAL  reduce using rule 12 (conditional -> IF condition THEN statements else_statements_opt END .)
    BOOLEAN         reduce using rule 12 (conditional -> IF condition THEN statements else_statements_opt END .)
    IDENTIFIER      reduce using rule 12 (conditional -> IF condition THEN statements else_statements_opt END .)
    $end            reduce using rule 12 (conditional -> IF condition THEN statements else_statements_opt END .)
    ELSE            reduce using rule 12 (conditional -> IF condition THEN statements else_statements_opt END .)
    END             reduce using rule 12 (conditional -> IF condition THEN statements else_statements_opt END .)
    RBRACE          reduce using rule 12 (conditional -> IF condition THEN statements else_statements_opt END .)


state 86

    (13) else_statements_opt -> ELSE statements .

    END             reduce using rule 13 (else_statements_opt -> ELSE statements .)


state 87

    (36) loop -> FOR IDENTIFIER IN list DO statements .

    LET             reduce using rule 36 (loop -> FOR IDENTIFIER IN list DO statements .)
    IF              reduce using rule 36 (loop -> FOR IDENTIFIER IN list DO statements .)
    FOR             reduce using rule 36 (loop -> FOR IDENTIFIER IN list DO statements .)
    WHILE           reduce using rule 36 (loop -> FOR IDENTIFIER IN list DO statements .)
    DO              reduce using rule 36 (loop -> FOR IDENTIFIER IN list DO statements .)
    FUNCTION        reduce using rule 36 (loop -> FOR IDENTIFIER IN list DO statements .)
    SHOW            reduce using rule 36 (loop -> FOR IDENTIFIER IN list DO statements .)
    LPAREN          reduce using rule 36 (loop -> FOR IDENTIFIER IN list DO statements .)
    NUMBER          reduce using rule 36 (loop -> FOR IDENTIFIER IN list DO statements .)
    STRING_LITERAL  reduce using rule 36 (loop -> FOR IDENTIFIER IN list DO statements .)
    BOOLEAN         reduce using rule 36 (loop -> FOR IDENTIFIER IN list DO statements .)
    IDENTIFIER      reduce using rule 36 (loop -> FOR IDENTIFIER IN list DO statements .)
    $end            reduce using rule 36 (loop -> FOR IDENTIFIER IN list DO statements .)
    ELSE            reduce using rule 36 (loop -> FOR IDENTIFIER IN list DO statements .)
    END             reduce using rule 36 (loop -> FOR IDENTIFIER IN list DO statements .)
    RBRACE          reduce using rule 36 (loop -> FOR IDENTIFIER IN list DO statements .)


state 88

    (39) list -> LBRACKET expression_list RBRACKET .

    DO              reduce using rule 39 (list -> LBRACKET expression_list RBRACKET .)


state 89

    (47) parameters -> IDENTIFIER COMMA parameters .

    RPAREN          reduce using rule 47 (parameters -> IDENTIFIER COMMA parameters .)


state 90

    (44) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE . statements RBRACE return_statement_opt RBRACE
    (45) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE . statements RBRACE
    (2) statements -> . statement statements
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function
    (8) statement -> . display
    (9) statement -> . expression
    (10) assignment -> . LET IDENTIFIER EQUAL expression
    (11) assignment -> . LET IDENTIFIER EQUAL expression_list
    (12) conditional -> . IF condition THEN statements else_statements_opt END
    (36) loop -> . FOR IDENTIFIER IN list DO statements
    (37) loop -> . WHILE condition DO statements
    (38) loop -> . DO statements WHILE condition
    (44) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (45) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (34) display -> . SHOW STRING_LITERAL
    (35) display -> . SHOW IDENTIFIER
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression POWER expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . term
    (28) term -> . NUMBER
    (29) term -> . STRING_LITERAL
    (30) term -> . BOOLEAN
    (31) term -> . IDENTIFIER

    LET             shift and go to state 10
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 15
    DO              shift and go to state 14
    FUNCTION        shift and go to state 16
    SHOW            shift and go to state 18
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 21
    STRING_LITERAL  shift and go to state 19
    BOOLEAN         shift and go to state 22
    IDENTIFIER      shift and go to state 11

    statements                     shift and go to state 91
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function                       shift and go to state 7
    display                        shift and go to state 8
    expression                     shift and go to state 9
    term                           shift and go to state 20

state 91

    (44) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements . RBRACE return_statement_opt RBRACE
    (45) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 92


state 92

    (44) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE . return_statement_opt RBRACE
    (45) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .
    (49) return_statement_opt -> . RETURN expression
    (50) return_statement_opt -> . empty
    (51) empty -> .

  ! reduce/reduce conflict for RBRACE resolved using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    LET             reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    DO              reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    SHOW            reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    LPAREN          reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    NUMBER          reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    STRING_LITERAL  reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    BOOLEAN         reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    ELSE            reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    END             reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 45 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    RETURN          shift and go to state 94

  ! RBRACE          [ reduce using rule 51 (empty -> .) ]

    return_statement_opt           shift and go to state 93
    empty                          shift and go to state 95

state 93

    (44) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt . RBRACE

    RBRACE          shift and go to state 96


state 94

    (49) return_statement_opt -> RETURN . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression POWER expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . term
    (28) term -> . NUMBER
    (29) term -> . STRING_LITERAL
    (30) term -> . BOOLEAN
    (31) term -> . IDENTIFIER

    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 21
    STRING_LITERAL  shift and go to state 19
    BOOLEAN         shift and go to state 22
    IDENTIFIER      shift and go to state 11

    expression                     shift and go to state 97
    term                           shift and go to state 20

state 95

    (50) return_statement_opt -> empty .

    RBRACE          reduce using rule 50 (return_statement_opt -> empty .)


state 96

    (44) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .

    LET             reduce using rule 44 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    IF              reduce using rule 44 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    FOR             reduce using rule 44 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    WHILE           reduce using rule 44 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    DO              reduce using rule 44 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    FUNCTION        reduce using rule 44 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    SHOW            reduce using rule 44 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    LPAREN          reduce using rule 44 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    NUMBER          reduce using rule 44 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    STRING_LITERAL  reduce using rule 44 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    BOOLEAN         reduce using rule 44 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    IDENTIFIER      reduce using rule 44 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    $end            reduce using rule 44 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    ELSE            reduce using rule 44 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    END             reduce using rule 44 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    RBRACE          reduce using rule 44 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)


state 97

    (49) return_statement_opt -> RETURN expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . POWER expression

    RBRACE          reduce using rule 49 (return_statement_opt -> RETURN expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    POWER           shift and go to state 28

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LET in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for FOR in state 3 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 3 resolved as shift
WARNING: shift/reduce conflict for DO in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 3 resolved as shift
WARNING: shift/reduce conflict for SHOW in state 3 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 3 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 3 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 3 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 3 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 3 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 44 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 44 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 44 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 44 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 44 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 75 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 75 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 75 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 75 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 75 resolved as shift
WARNING: reduce/reduce conflict in state 57 resolved using rule (assignment -> LET IDENTIFIER EQUAL expression)
WARNING: rejected rule (expression_list -> expression) in state 57
WARNING: reduce/reduce conflict in state 92 resolved using rule (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE)
WARNING: rejected rule (empty -> <empty>) in state 92
