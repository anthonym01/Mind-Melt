Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    DECREASE
    FALSE
    INCREASE
    INTEGER
    JOIN
    LETTER
    OR
    RISK
    SAVE
    TRUE

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     program -> expression
Rule 3     statements -> statements statement
Rule 4     statements -> statement
Rule 5     statement -> assignment
Rule 6     statement -> conditional
Rule 7     statement -> loop
Rule 8     statement -> function
Rule 9     statement -> display
Rule 10    statement -> input
Rule 11    assignment -> LET IDENTIFIER EQUAL expression
Rule 12    assignment -> LET IDENTIFIER EQUAL expression_list
Rule 13    assignment -> LET IDENTIFIER EQUAL REAL
Rule 14    assignment -> LET IDENTIFIER EQUAL NUMBER
Rule 15    comment -> COMMENT
Rule 16    conditional -> IF condition THEN statements else_statements_opt END
Rule 17    else_statements_opt -> ELSE statements
Rule 18    else_statements_opt -> empty
Rule 19    condition -> expression IS_LESS_THAN expression
Rule 20    condition -> expression IS_EQUAL_TO expression
Rule 21    condition -> expression IS_GREATER_THAN expression
Rule 22    condition -> expression IS_NOT_EQUAL_TO expression
Rule 23    condition -> expression GREATER_THAN_OR_EQUAL_TO expression
Rule 24    condition -> expression LESS_THAN_OR_EQUAL_TO expression
Rule 25    expression -> expression PLUS term
Rule 26    expression -> expression MINUS term
Rule 27    expression -> term
Rule 28    expression -> expression POWER term
Rule 29    expression -> NOT expression
Rule 30    expression -> LPAREN expression RPAREN
Rule 31    expression -> NUMBER MINUS term
Rule 32    expression -> REAL MINUS term
Rule 33    expression -> CHARACTER PLUS term
Rule 34    expression -> list
Rule 35    term -> term TIMES factor
Rule 36    term -> term DIVIDE factor
Rule 37    term -> IDENTIFIER
Rule 38    term -> factor
Rule 39    factor -> NUMBER
Rule 40    factor -> LPAREN expression RPAREN
Rule 41    factor -> REAL
Rule 42    input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN
Rule 43    display -> SHOW expression
Rule 44    display -> SHOW STRING_LITERAL
Rule 45    display -> SHOW IDENTIFIER
Rule 46    display -> SHOW NUMBER
Rule 47    display -> SHOW REAL
Rule 48    display -> SHOW CHARACTER
Rule 49    display -> SHOW list
Rule 50    display -> SHOW function
Rule 51    display -> SHOW conditional
Rule 52    display -> SHOW loop
Rule 53    display -> SHOW input
Rule 54    display -> SHOW comment
Rule 55    display -> SHOW program
Rule 56    display -> SHOW statements
Rule 57    display -> SHOW expression_list
Rule 58    display -> SHOW assignment
Rule 59    display -> SHOW display
Rule 60    loop -> FOR IDENTIFIER IN list DO statements
Rule 61    loop -> WHILE condition DO statements
Rule 62    loop -> DO statements WHILE condition
Rule 63    list -> LBRACKET expression_list RBRACKET
Rule 64    list -> empty
Rule 65    expression_list -> expression
Rule 66    expression_list -> expression_list COMMA expression
Rule 67    expression_list -> empty
Rule 68    function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
Rule 69    parameters -> IDENTIFIER
Rule 70    parameters -> parameters COMMA IDENTIFIER
Rule 71    parameters -> empty
Rule 72    return_statement_opt -> RETURN expression
Rule 73    return_statement_opt -> empty
Rule 74    empty -> <empty>

Terminals, with rules where they appear

AND                  : 
CHARACTER            : 33 48
COMMA                : 66 70
COMMENT              : 15
DECREASE             : 
DIVIDE               : 36
DO                   : 60 61 62
ELSE                 : 17
END                  : 16
EQUAL                : 11 12 13 14 42
FALSE                : 
FOR                  : 60
FUNCTION             : 68
GREATER_THAN_OR_EQUAL_TO : 23
IDENTIFIER           : 11 12 13 14 37 42 42 45 60 68 69 70
IF                   : 16
IN                   : 60
INCREASE             : 
INTEGER              : 
IS_EQUAL_TO          : 20
IS_GREATER_THAN      : 21
IS_LESS_THAN         : 19
IS_NOT_EQUAL_TO      : 22
JOIN                 : 
LBRACE               : 68
LBRACKET             : 63
LESS_THAN_OR_EQUAL_TO : 24
LET                  : 11 12 13 14 42
LETTER               : 
LPAREN               : 30 40 42 68
MINUS                : 26 31 32
NOT                  : 29
NUMBER               : 14 31 39 46
OR                   : 
PLUS                 : 25 33
POWER                : 28
RBRACE               : 68 68
RBRACKET             : 63
REAL                 : 13 32 41 47
RETURN               : 72
RISK                 : 
RPAREN               : 30 40 42 68
SAVE                 : 
SHOW                 : 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59
STRING_LITERAL       : 42 44
THEN                 : 16
TIMES                : 35
TRUE                 : 
WHILE                : 61 62
error                : 

Nonterminals, with rules where they appear

assignment           : 5 58
comment              : 54
condition            : 16 61 62
conditional          : 6 51
display              : 9 59
else_statements_opt  : 16
empty                : 18 64 67 71 73
expression           : 2 11 19 19 20 20 21 21 22 22 23 23 24 24 25 26 28 29 30 40 43 65 66 72
expression_list      : 12 57 63 66
factor               : 35 36 38
function             : 8 50
input                : 10 53
list                 : 34 49 60
loop                 : 7 52
parameters           : 68 70
program              : 55 0
return_statement_opt : 68
statement            : 3 4
statements           : 1 3 16 17 56 60 61 62 68
term                 : 25 26 27 28 31 32 33 35 36

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) program -> . expression
    (3) statements -> . statements statement
    (4) statements -> . statement
    (25) expression -> . expression PLUS term
    (26) expression -> . expression MINUS term
    (27) expression -> . term
    (28) expression -> . expression POWER term
    (29) expression -> . NOT expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . NUMBER MINUS term
    (32) expression -> . REAL MINUS term
    (33) expression -> . CHARACTER PLUS term
    (34) expression -> . list
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) term -> . IDENTIFIER
    (38) term -> . factor
    (63) list -> . LBRACKET expression_list RBRACKET
    (64) list -> . empty
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (12) assignment -> . LET IDENTIFIER EQUAL expression_list
    (13) assignment -> . LET IDENTIFIER EQUAL REAL
    (14) assignment -> . LET IDENTIFIER EQUAL NUMBER
    (16) conditional -> . IF condition THEN statements else_statements_opt END
    (60) loop -> . FOR IDENTIFIER IN list DO statements
    (61) loop -> . WHILE condition DO statements
    (62) loop -> . DO statements WHILE condition
    (68) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (43) display -> . SHOW expression
    (44) display -> . SHOW STRING_LITERAL
    (45) display -> . SHOW IDENTIFIER
    (46) display -> . SHOW NUMBER
    (47) display -> . SHOW REAL
    (48) display -> . SHOW CHARACTER
    (49) display -> . SHOW list
    (50) display -> . SHOW function
    (51) display -> . SHOW conditional
    (52) display -> . SHOW loop
    (53) display -> . SHOW input
    (54) display -> . SHOW comment
    (55) display -> . SHOW program
    (56) display -> . SHOW statements
    (57) display -> . SHOW expression_list
    (58) display -> . SHOW assignment
    (59) display -> . SHOW display
    (42) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN
    (39) factor -> . NUMBER
    (40) factor -> . LPAREN expression RPAREN
    (41) factor -> . REAL
    (74) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    LET             shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 26
    DO              shift and go to state 25
    FUNCTION        shift and go to state 27
    SHOW            shift and go to state 28
    PLUS            reduce using rule 74 (empty -> .)
    MINUS           reduce using rule 74 (empty -> .)
    POWER           reduce using rule 74 (empty -> .)
    $end            reduce using rule 74 (empty -> .)

    program                        shift and go to state 1
    statements                     shift and go to state 2
    expression                     shift and go to state 3
    statement                      shift and go to state 4
    term                           shift and go to state 5
    list                           shift and go to state 11
    assignment                     shift and go to state 12
    conditional                    shift and go to state 13
    loop                           shift and go to state 14
    function                       shift and go to state 15
    display                        shift and go to state 16
    input                          shift and go to state 17
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (3) statements -> statements . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (12) assignment -> . LET IDENTIFIER EQUAL expression_list
    (13) assignment -> . LET IDENTIFIER EQUAL REAL
    (14) assignment -> . LET IDENTIFIER EQUAL NUMBER
    (16) conditional -> . IF condition THEN statements else_statements_opt END
    (60) loop -> . FOR IDENTIFIER IN list DO statements
    (61) loop -> . WHILE condition DO statements
    (62) loop -> . DO statements WHILE condition
    (68) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (43) display -> . SHOW expression
    (44) display -> . SHOW STRING_LITERAL
    (45) display -> . SHOW IDENTIFIER
    (46) display -> . SHOW NUMBER
    (47) display -> . SHOW REAL
    (48) display -> . SHOW CHARACTER
    (49) display -> . SHOW list
    (50) display -> . SHOW function
    (51) display -> . SHOW conditional
    (52) display -> . SHOW loop
    (53) display -> . SHOW input
    (54) display -> . SHOW comment
    (55) display -> . SHOW program
    (56) display -> . SHOW statements
    (57) display -> . SHOW expression_list
    (58) display -> . SHOW assignment
    (59) display -> . SHOW display
    (42) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    $end            reduce using rule 1 (program -> statements .)
    LET             shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 26
    DO              shift and go to state 25
    FUNCTION        shift and go to state 27
    SHOW            shift and go to state 28

    statement                      shift and go to state 29
    assignment                     shift and go to state 12
    conditional                    shift and go to state 13
    loop                           shift and go to state 14
    function                       shift and go to state 15
    display                        shift and go to state 16
    input                          shift and go to state 17

state 3

    (2) program -> expression .
    (25) expression -> expression . PLUS term
    (26) expression -> expression . MINUS term
    (28) expression -> expression . POWER term

    $end            reduce using rule 2 (program -> expression .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    POWER           shift and go to state 32


state 4

    (4) statements -> statement .

    LET             reduce using rule 4 (statements -> statement .)
    IF              reduce using rule 4 (statements -> statement .)
    FOR             reduce using rule 4 (statements -> statement .)
    WHILE           reduce using rule 4 (statements -> statement .)
    DO              reduce using rule 4 (statements -> statement .)
    FUNCTION        reduce using rule 4 (statements -> statement .)
    SHOW            reduce using rule 4 (statements -> statement .)
    $end            reduce using rule 4 (statements -> statement .)
    ELSE            reduce using rule 4 (statements -> statement .)
    END             reduce using rule 4 (statements -> statement .)
    RBRACE          reduce using rule 4 (statements -> statement .)


state 5

    (27) expression -> term .
    (35) term -> term . TIMES factor
    (36) term -> term . DIVIDE factor

    PLUS            reduce using rule 27 (expression -> term .)
    MINUS           reduce using rule 27 (expression -> term .)
    POWER           reduce using rule 27 (expression -> term .)
    $end            reduce using rule 27 (expression -> term .)
    RPAREN          reduce using rule 27 (expression -> term .)
    RBRACKET        reduce using rule 27 (expression -> term .)
    COMMA           reduce using rule 27 (expression -> term .)
    IS_LESS_THAN    reduce using rule 27 (expression -> term .)
    IS_EQUAL_TO     reduce using rule 27 (expression -> term .)
    IS_GREATER_THAN reduce using rule 27 (expression -> term .)
    IS_NOT_EQUAL_TO reduce using rule 27 (expression -> term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 27 (expression -> term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 27 (expression -> term .)
    LET             reduce using rule 27 (expression -> term .)
    IF              reduce using rule 27 (expression -> term .)
    FOR             reduce using rule 27 (expression -> term .)
    WHILE           reduce using rule 27 (expression -> term .)
    DO              reduce using rule 27 (expression -> term .)
    FUNCTION        reduce using rule 27 (expression -> term .)
    SHOW            reduce using rule 27 (expression -> term .)
    ELSE            reduce using rule 27 (expression -> term .)
    END             reduce using rule 27 (expression -> term .)
    RBRACE          reduce using rule 27 (expression -> term .)
    THEN            reduce using rule 27 (expression -> term .)
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34


state 6

    (29) expression -> NOT . expression
    (25) expression -> . expression PLUS term
    (26) expression -> . expression MINUS term
    (27) expression -> . term
    (28) expression -> . expression POWER term
    (29) expression -> . NOT expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . NUMBER MINUS term
    (32) expression -> . REAL MINUS term
    (33) expression -> . CHARACTER PLUS term
    (34) expression -> . list
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) term -> . IDENTIFIER
    (38) term -> . factor
    (63) list -> . LBRACKET expression_list RBRACKET
    (64) list -> . empty
    (39) factor -> . NUMBER
    (40) factor -> . LPAREN expression RPAREN
    (41) factor -> . REAL
    (74) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    PLUS            reduce using rule 74 (empty -> .)
    MINUS           reduce using rule 74 (empty -> .)
    POWER           reduce using rule 74 (empty -> .)
    $end            reduce using rule 74 (empty -> .)
    RPAREN          reduce using rule 74 (empty -> .)
    RBRACKET        reduce using rule 74 (empty -> .)
    COMMA           reduce using rule 74 (empty -> .)
    IS_LESS_THAN    reduce using rule 74 (empty -> .)
    IS_EQUAL_TO     reduce using rule 74 (empty -> .)
    IS_GREATER_THAN reduce using rule 74 (empty -> .)
    IS_NOT_EQUAL_TO reduce using rule 74 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 74 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 74 (empty -> .)
    LET             reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    FOR             reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    DO              reduce using rule 74 (empty -> .)
    FUNCTION        reduce using rule 74 (empty -> .)
    SHOW            reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)
    END             reduce using rule 74 (empty -> .)
    RBRACE          reduce using rule 74 (empty -> .)
    THEN            reduce using rule 74 (empty -> .)

    expression                     shift and go to state 35
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 7

    (30) expression -> LPAREN . expression RPAREN
    (40) factor -> LPAREN . expression RPAREN
    (25) expression -> . expression PLUS term
    (26) expression -> . expression MINUS term
    (27) expression -> . term
    (28) expression -> . expression POWER term
    (29) expression -> . NOT expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . NUMBER MINUS term
    (32) expression -> . REAL MINUS term
    (33) expression -> . CHARACTER PLUS term
    (34) expression -> . list
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) term -> . IDENTIFIER
    (38) term -> . factor
    (63) list -> . LBRACKET expression_list RBRACKET
    (64) list -> . empty
    (39) factor -> . NUMBER
    (40) factor -> . LPAREN expression RPAREN
    (41) factor -> . REAL
    (74) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    RPAREN          reduce using rule 74 (empty -> .)
    PLUS            reduce using rule 74 (empty -> .)
    MINUS           reduce using rule 74 (empty -> .)
    POWER           reduce using rule 74 (empty -> .)

    expression                     shift and go to state 36
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 8

    (31) expression -> NUMBER . MINUS term
    (39) factor -> NUMBER .

  ! shift/reduce conflict for MINUS resolved as shift
    MINUS           shift and go to state 37
    TIMES           reduce using rule 39 (factor -> NUMBER .)
    DIVIDE          reduce using rule 39 (factor -> NUMBER .)
    PLUS            reduce using rule 39 (factor -> NUMBER .)
    POWER           reduce using rule 39 (factor -> NUMBER .)
    $end            reduce using rule 39 (factor -> NUMBER .)
    RPAREN          reduce using rule 39 (factor -> NUMBER .)
    RBRACKET        reduce using rule 39 (factor -> NUMBER .)
    COMMA           reduce using rule 39 (factor -> NUMBER .)
    IS_LESS_THAN    reduce using rule 39 (factor -> NUMBER .)
    IS_EQUAL_TO     reduce using rule 39 (factor -> NUMBER .)
    IS_GREATER_THAN reduce using rule 39 (factor -> NUMBER .)
    IS_NOT_EQUAL_TO reduce using rule 39 (factor -> NUMBER .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 39 (factor -> NUMBER .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 39 (factor -> NUMBER .)
    LET             reduce using rule 39 (factor -> NUMBER .)
    IF              reduce using rule 39 (factor -> NUMBER .)
    FOR             reduce using rule 39 (factor -> NUMBER .)
    WHILE           reduce using rule 39 (factor -> NUMBER .)
    DO              reduce using rule 39 (factor -> NUMBER .)
    FUNCTION        reduce using rule 39 (factor -> NUMBER .)
    SHOW            reduce using rule 39 (factor -> NUMBER .)
    ELSE            reduce using rule 39 (factor -> NUMBER .)
    END             reduce using rule 39 (factor -> NUMBER .)
    RBRACE          reduce using rule 39 (factor -> NUMBER .)
    THEN            reduce using rule 39 (factor -> NUMBER .)

  ! MINUS           [ reduce using rule 39 (factor -> NUMBER .) ]


state 9

    (32) expression -> REAL . MINUS term
    (41) factor -> REAL .

  ! shift/reduce conflict for MINUS resolved as shift
    MINUS           shift and go to state 38
    TIMES           reduce using rule 41 (factor -> REAL .)
    DIVIDE          reduce using rule 41 (factor -> REAL .)
    PLUS            reduce using rule 41 (factor -> REAL .)
    POWER           reduce using rule 41 (factor -> REAL .)
    $end            reduce using rule 41 (factor -> REAL .)
    RPAREN          reduce using rule 41 (factor -> REAL .)
    RBRACKET        reduce using rule 41 (factor -> REAL .)
    COMMA           reduce using rule 41 (factor -> REAL .)
    IS_LESS_THAN    reduce using rule 41 (factor -> REAL .)
    IS_EQUAL_TO     reduce using rule 41 (factor -> REAL .)
    IS_GREATER_THAN reduce using rule 41 (factor -> REAL .)
    IS_NOT_EQUAL_TO reduce using rule 41 (factor -> REAL .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 41 (factor -> REAL .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 41 (factor -> REAL .)
    LET             reduce using rule 41 (factor -> REAL .)
    IF              reduce using rule 41 (factor -> REAL .)
    FOR             reduce using rule 41 (factor -> REAL .)
    WHILE           reduce using rule 41 (factor -> REAL .)
    DO              reduce using rule 41 (factor -> REAL .)
    FUNCTION        reduce using rule 41 (factor -> REAL .)
    SHOW            reduce using rule 41 (factor -> REAL .)
    ELSE            reduce using rule 41 (factor -> REAL .)
    END             reduce using rule 41 (factor -> REAL .)
    RBRACE          reduce using rule 41 (factor -> REAL .)
    THEN            reduce using rule 41 (factor -> REAL .)

  ! MINUS           [ reduce using rule 41 (factor -> REAL .) ]


state 10

    (33) expression -> CHARACTER . PLUS term

    PLUS            shift and go to state 39


state 11

    (34) expression -> list .

    PLUS            reduce using rule 34 (expression -> list .)
    MINUS           reduce using rule 34 (expression -> list .)
    POWER           reduce using rule 34 (expression -> list .)
    $end            reduce using rule 34 (expression -> list .)
    RPAREN          reduce using rule 34 (expression -> list .)
    RBRACKET        reduce using rule 34 (expression -> list .)
    COMMA           reduce using rule 34 (expression -> list .)
    IS_LESS_THAN    reduce using rule 34 (expression -> list .)
    IS_EQUAL_TO     reduce using rule 34 (expression -> list .)
    IS_GREATER_THAN reduce using rule 34 (expression -> list .)
    IS_NOT_EQUAL_TO reduce using rule 34 (expression -> list .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 34 (expression -> list .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 34 (expression -> list .)
    LET             reduce using rule 34 (expression -> list .)
    IF              reduce using rule 34 (expression -> list .)
    FOR             reduce using rule 34 (expression -> list .)
    WHILE           reduce using rule 34 (expression -> list .)
    DO              reduce using rule 34 (expression -> list .)
    FUNCTION        reduce using rule 34 (expression -> list .)
    SHOW            reduce using rule 34 (expression -> list .)
    ELSE            reduce using rule 34 (expression -> list .)
    END             reduce using rule 34 (expression -> list .)
    RBRACE          reduce using rule 34 (expression -> list .)
    THEN            reduce using rule 34 (expression -> list .)


state 12

    (5) statement -> assignment .

    LET             reduce using rule 5 (statement -> assignment .)
    IF              reduce using rule 5 (statement -> assignment .)
    FOR             reduce using rule 5 (statement -> assignment .)
    WHILE           reduce using rule 5 (statement -> assignment .)
    DO              reduce using rule 5 (statement -> assignment .)
    FUNCTION        reduce using rule 5 (statement -> assignment .)
    SHOW            reduce using rule 5 (statement -> assignment .)
    $end            reduce using rule 5 (statement -> assignment .)
    ELSE            reduce using rule 5 (statement -> assignment .)
    END             reduce using rule 5 (statement -> assignment .)
    RBRACE          reduce using rule 5 (statement -> assignment .)


state 13

    (6) statement -> conditional .

    LET             reduce using rule 6 (statement -> conditional .)
    IF              reduce using rule 6 (statement -> conditional .)
    FOR             reduce using rule 6 (statement -> conditional .)
    WHILE           reduce using rule 6 (statement -> conditional .)
    DO              reduce using rule 6 (statement -> conditional .)
    FUNCTION        reduce using rule 6 (statement -> conditional .)
    SHOW            reduce using rule 6 (statement -> conditional .)
    $end            reduce using rule 6 (statement -> conditional .)
    ELSE            reduce using rule 6 (statement -> conditional .)
    END             reduce using rule 6 (statement -> conditional .)
    RBRACE          reduce using rule 6 (statement -> conditional .)


state 14

    (7) statement -> loop .

    LET             reduce using rule 7 (statement -> loop .)
    IF              reduce using rule 7 (statement -> loop .)
    FOR             reduce using rule 7 (statement -> loop .)
    WHILE           reduce using rule 7 (statement -> loop .)
    DO              reduce using rule 7 (statement -> loop .)
    FUNCTION        reduce using rule 7 (statement -> loop .)
    SHOW            reduce using rule 7 (statement -> loop .)
    $end            reduce using rule 7 (statement -> loop .)
    ELSE            reduce using rule 7 (statement -> loop .)
    END             reduce using rule 7 (statement -> loop .)
    RBRACE          reduce using rule 7 (statement -> loop .)


state 15

    (8) statement -> function .

    LET             reduce using rule 8 (statement -> function .)
    IF              reduce using rule 8 (statement -> function .)
    FOR             reduce using rule 8 (statement -> function .)
    WHILE           reduce using rule 8 (statement -> function .)
    DO              reduce using rule 8 (statement -> function .)
    FUNCTION        reduce using rule 8 (statement -> function .)
    SHOW            reduce using rule 8 (statement -> function .)
    $end            reduce using rule 8 (statement -> function .)
    ELSE            reduce using rule 8 (statement -> function .)
    END             reduce using rule 8 (statement -> function .)
    RBRACE          reduce using rule 8 (statement -> function .)


state 16

    (9) statement -> display .

    LET             reduce using rule 9 (statement -> display .)
    IF              reduce using rule 9 (statement -> display .)
    FOR             reduce using rule 9 (statement -> display .)
    WHILE           reduce using rule 9 (statement -> display .)
    DO              reduce using rule 9 (statement -> display .)
    FUNCTION        reduce using rule 9 (statement -> display .)
    SHOW            reduce using rule 9 (statement -> display .)
    $end            reduce using rule 9 (statement -> display .)
    ELSE            reduce using rule 9 (statement -> display .)
    END             reduce using rule 9 (statement -> display .)
    RBRACE          reduce using rule 9 (statement -> display .)


state 17

    (10) statement -> input .

    LET             reduce using rule 10 (statement -> input .)
    IF              reduce using rule 10 (statement -> input .)
    FOR             reduce using rule 10 (statement -> input .)
    WHILE           reduce using rule 10 (statement -> input .)
    DO              reduce using rule 10 (statement -> input .)
    FUNCTION        reduce using rule 10 (statement -> input .)
    SHOW            reduce using rule 10 (statement -> input .)
    $end            reduce using rule 10 (statement -> input .)
    ELSE            reduce using rule 10 (statement -> input .)
    END             reduce using rule 10 (statement -> input .)
    RBRACE          reduce using rule 10 (statement -> input .)


state 18

    (38) term -> factor .

    TIMES           reduce using rule 38 (term -> factor .)
    DIVIDE          reduce using rule 38 (term -> factor .)
    PLUS            reduce using rule 38 (term -> factor .)
    MINUS           reduce using rule 38 (term -> factor .)
    POWER           reduce using rule 38 (term -> factor .)
    $end            reduce using rule 38 (term -> factor .)
    RPAREN          reduce using rule 38 (term -> factor .)
    RBRACKET        reduce using rule 38 (term -> factor .)
    COMMA           reduce using rule 38 (term -> factor .)
    IS_LESS_THAN    reduce using rule 38 (term -> factor .)
    IS_EQUAL_TO     reduce using rule 38 (term -> factor .)
    IS_GREATER_THAN reduce using rule 38 (term -> factor .)
    IS_NOT_EQUAL_TO reduce using rule 38 (term -> factor .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 38 (term -> factor .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 38 (term -> factor .)
    LET             reduce using rule 38 (term -> factor .)
    IF              reduce using rule 38 (term -> factor .)
    FOR             reduce using rule 38 (term -> factor .)
    WHILE           reduce using rule 38 (term -> factor .)
    DO              reduce using rule 38 (term -> factor .)
    FUNCTION        reduce using rule 38 (term -> factor .)
    SHOW            reduce using rule 38 (term -> factor .)
    ELSE            reduce using rule 38 (term -> factor .)
    END             reduce using rule 38 (term -> factor .)
    RBRACE          reduce using rule 38 (term -> factor .)
    THEN            reduce using rule 38 (term -> factor .)


state 19

    (37) term -> IDENTIFIER .

    TIMES           reduce using rule 37 (term -> IDENTIFIER .)
    DIVIDE          reduce using rule 37 (term -> IDENTIFIER .)
    PLUS            reduce using rule 37 (term -> IDENTIFIER .)
    MINUS           reduce using rule 37 (term -> IDENTIFIER .)
    POWER           reduce using rule 37 (term -> IDENTIFIER .)
    $end            reduce using rule 37 (term -> IDENTIFIER .)
    RPAREN          reduce using rule 37 (term -> IDENTIFIER .)
    RBRACKET        reduce using rule 37 (term -> IDENTIFIER .)
    COMMA           reduce using rule 37 (term -> IDENTIFIER .)
    IS_LESS_THAN    reduce using rule 37 (term -> IDENTIFIER .)
    IS_EQUAL_TO     reduce using rule 37 (term -> IDENTIFIER .)
    IS_GREATER_THAN reduce using rule 37 (term -> IDENTIFIER .)
    IS_NOT_EQUAL_TO reduce using rule 37 (term -> IDENTIFIER .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 37 (term -> IDENTIFIER .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 37 (term -> IDENTIFIER .)
    LET             reduce using rule 37 (term -> IDENTIFIER .)
    IF              reduce using rule 37 (term -> IDENTIFIER .)
    FOR             reduce using rule 37 (term -> IDENTIFIER .)
    WHILE           reduce using rule 37 (term -> IDENTIFIER .)
    DO              reduce using rule 37 (term -> IDENTIFIER .)
    FUNCTION        reduce using rule 37 (term -> IDENTIFIER .)
    SHOW            reduce using rule 37 (term -> IDENTIFIER .)
    ELSE            reduce using rule 37 (term -> IDENTIFIER .)
    END             reduce using rule 37 (term -> IDENTIFIER .)
    RBRACE          reduce using rule 37 (term -> IDENTIFIER .)
    THEN            reduce using rule 37 (term -> IDENTIFIER .)


state 20

    (63) list -> LBRACKET . expression_list RBRACKET
    (65) expression_list -> . expression
    (66) expression_list -> . expression_list COMMA expression
    (67) expression_list -> . empty
    (25) expression -> . expression PLUS term
    (26) expression -> . expression MINUS term
    (27) expression -> . term
    (28) expression -> . expression POWER term
    (29) expression -> . NOT expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . NUMBER MINUS term
    (32) expression -> . REAL MINUS term
    (33) expression -> . CHARACTER PLUS term
    (34) expression -> . list
    (74) empty -> .
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) term -> . IDENTIFIER
    (38) term -> . factor
    (63) list -> . LBRACKET expression_list RBRACKET
    (64) list -> . empty
    (39) factor -> . NUMBER
    (40) factor -> . LPAREN expression RPAREN
    (41) factor -> . REAL

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    RBRACKET        reduce using rule 74 (empty -> .)
    COMMA           reduce using rule 74 (empty -> .)
    PLUS            reduce using rule 74 (empty -> .)
    MINUS           reduce using rule 74 (empty -> .)
    POWER           reduce using rule 74 (empty -> .)
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20

    expression_list                shift and go to state 40
    expression                     shift and go to state 41
    empty                          shift and go to state 42
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18

state 21

    (64) list -> empty .

    PLUS            reduce using rule 64 (list -> empty .)
    MINUS           reduce using rule 64 (list -> empty .)
    POWER           reduce using rule 64 (list -> empty .)
    $end            reduce using rule 64 (list -> empty .)
    RPAREN          reduce using rule 64 (list -> empty .)
    RBRACKET        reduce using rule 64 (list -> empty .)
    COMMA           reduce using rule 64 (list -> empty .)
    IS_LESS_THAN    reduce using rule 64 (list -> empty .)
    IS_EQUAL_TO     reduce using rule 64 (list -> empty .)
    IS_GREATER_THAN reduce using rule 64 (list -> empty .)
    IS_NOT_EQUAL_TO reduce using rule 64 (list -> empty .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 64 (list -> empty .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 64 (list -> empty .)
    LET             reduce using rule 64 (list -> empty .)
    IF              reduce using rule 64 (list -> empty .)
    FOR             reduce using rule 64 (list -> empty .)
    WHILE           reduce using rule 64 (list -> empty .)
    DO              reduce using rule 64 (list -> empty .)
    FUNCTION        reduce using rule 64 (list -> empty .)
    SHOW            reduce using rule 64 (list -> empty .)
    ELSE            reduce using rule 64 (list -> empty .)
    END             reduce using rule 64 (list -> empty .)
    RBRACE          reduce using rule 64 (list -> empty .)
    THEN            reduce using rule 64 (list -> empty .)


state 22

    (11) assignment -> LET . IDENTIFIER EQUAL expression
    (12) assignment -> LET . IDENTIFIER EQUAL expression_list
    (13) assignment -> LET . IDENTIFIER EQUAL REAL
    (14) assignment -> LET . IDENTIFIER EQUAL NUMBER
    (42) input -> LET . IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    IDENTIFIER      shift and go to state 43


state 23

    (16) conditional -> IF . condition THEN statements else_statements_opt END
    (19) condition -> . expression IS_LESS_THAN expression
    (20) condition -> . expression IS_EQUAL_TO expression
    (21) condition -> . expression IS_GREATER_THAN expression
    (22) condition -> . expression IS_NOT_EQUAL_TO expression
    (23) condition -> . expression GREATER_THAN_OR_EQUAL_TO expression
    (24) condition -> . expression LESS_THAN_OR_EQUAL_TO expression
    (25) expression -> . expression PLUS term
    (26) expression -> . expression MINUS term
    (27) expression -> . term
    (28) expression -> . expression POWER term
    (29) expression -> . NOT expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . NUMBER MINUS term
    (32) expression -> . REAL MINUS term
    (33) expression -> . CHARACTER PLUS term
    (34) expression -> . list
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) term -> . IDENTIFIER
    (38) term -> . factor
    (63) list -> . LBRACKET expression_list RBRACKET
    (64) list -> . empty
    (39) factor -> . NUMBER
    (40) factor -> . LPAREN expression RPAREN
    (41) factor -> . REAL
    (74) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    IS_LESS_THAN    reduce using rule 74 (empty -> .)
    IS_EQUAL_TO     reduce using rule 74 (empty -> .)
    IS_GREATER_THAN reduce using rule 74 (empty -> .)
    IS_NOT_EQUAL_TO reduce using rule 74 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 74 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 74 (empty -> .)
    PLUS            reduce using rule 74 (empty -> .)
    MINUS           reduce using rule 74 (empty -> .)
    POWER           reduce using rule 74 (empty -> .)

    condition                      shift and go to state 44
    expression                     shift and go to state 45
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 24

    (60) loop -> FOR . IDENTIFIER IN list DO statements

    IDENTIFIER      shift and go to state 46


state 25

    (62) loop -> DO . statements WHILE condition
    (3) statements -> . statements statement
    (4) statements -> . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (12) assignment -> . LET IDENTIFIER EQUAL expression_list
    (13) assignment -> . LET IDENTIFIER EQUAL REAL
    (14) assignment -> . LET IDENTIFIER EQUAL NUMBER
    (16) conditional -> . IF condition THEN statements else_statements_opt END
    (60) loop -> . FOR IDENTIFIER IN list DO statements
    (61) loop -> . WHILE condition DO statements
    (62) loop -> . DO statements WHILE condition
    (68) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (43) display -> . SHOW expression
    (44) display -> . SHOW STRING_LITERAL
    (45) display -> . SHOW IDENTIFIER
    (46) display -> . SHOW NUMBER
    (47) display -> . SHOW REAL
    (48) display -> . SHOW CHARACTER
    (49) display -> . SHOW list
    (50) display -> . SHOW function
    (51) display -> . SHOW conditional
    (52) display -> . SHOW loop
    (53) display -> . SHOW input
    (54) display -> . SHOW comment
    (55) display -> . SHOW program
    (56) display -> . SHOW statements
    (57) display -> . SHOW expression_list
    (58) display -> . SHOW assignment
    (59) display -> . SHOW display
    (42) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    LET             shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 26
    DO              shift and go to state 25
    FUNCTION        shift and go to state 27
    SHOW            shift and go to state 28

    statements                     shift and go to state 47
    statement                      shift and go to state 4
    assignment                     shift and go to state 12
    conditional                    shift and go to state 13
    loop                           shift and go to state 14
    function                       shift and go to state 15
    display                        shift and go to state 16
    input                          shift and go to state 17

state 26

    (61) loop -> WHILE . condition DO statements
    (19) condition -> . expression IS_LESS_THAN expression
    (20) condition -> . expression IS_EQUAL_TO expression
    (21) condition -> . expression IS_GREATER_THAN expression
    (22) condition -> . expression IS_NOT_EQUAL_TO expression
    (23) condition -> . expression GREATER_THAN_OR_EQUAL_TO expression
    (24) condition -> . expression LESS_THAN_OR_EQUAL_TO expression
    (25) expression -> . expression PLUS term
    (26) expression -> . expression MINUS term
    (27) expression -> . term
    (28) expression -> . expression POWER term
    (29) expression -> . NOT expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . NUMBER MINUS term
    (32) expression -> . REAL MINUS term
    (33) expression -> . CHARACTER PLUS term
    (34) expression -> . list
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) term -> . IDENTIFIER
    (38) term -> . factor
    (63) list -> . LBRACKET expression_list RBRACKET
    (64) list -> . empty
    (39) factor -> . NUMBER
    (40) factor -> . LPAREN expression RPAREN
    (41) factor -> . REAL
    (74) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    IS_LESS_THAN    reduce using rule 74 (empty -> .)
    IS_EQUAL_TO     reduce using rule 74 (empty -> .)
    IS_GREATER_THAN reduce using rule 74 (empty -> .)
    IS_NOT_EQUAL_TO reduce using rule 74 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 74 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 74 (empty -> .)
    PLUS            reduce using rule 74 (empty -> .)
    MINUS           reduce using rule 74 (empty -> .)
    POWER           reduce using rule 74 (empty -> .)

    condition                      shift and go to state 48
    expression                     shift and go to state 45
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 27

    (68) function -> FUNCTION . IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE

    IDENTIFIER      shift and go to state 49


state 28

    (43) display -> SHOW . expression
    (44) display -> SHOW . STRING_LITERAL
    (45) display -> SHOW . IDENTIFIER
    (46) display -> SHOW . NUMBER
    (47) display -> SHOW . REAL
    (48) display -> SHOW . CHARACTER
    (49) display -> SHOW . list
    (50) display -> SHOW . function
    (51) display -> SHOW . conditional
    (52) display -> SHOW . loop
    (53) display -> SHOW . input
    (54) display -> SHOW . comment
    (55) display -> SHOW . program
    (56) display -> SHOW . statements
    (57) display -> SHOW . expression_list
    (58) display -> SHOW . assignment
    (59) display -> SHOW . display
    (25) expression -> . expression PLUS term
    (26) expression -> . expression MINUS term
    (27) expression -> . term
    (28) expression -> . expression POWER term
    (29) expression -> . NOT expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . NUMBER MINUS term
    (32) expression -> . REAL MINUS term
    (33) expression -> . CHARACTER PLUS term
    (34) expression -> . list
    (63) list -> . LBRACKET expression_list RBRACKET
    (64) list -> . empty
    (68) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (16) conditional -> . IF condition THEN statements else_statements_opt END
    (60) loop -> . FOR IDENTIFIER IN list DO statements
    (61) loop -> . WHILE condition DO statements
    (62) loop -> . DO statements WHILE condition
    (42) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN
    (15) comment -> . COMMENT
    (1) program -> . statements
    (2) program -> . expression
    (3) statements -> . statements statement
    (4) statements -> . statement
    (65) expression_list -> . expression
    (66) expression_list -> . expression_list COMMA expression
    (67) expression_list -> . empty
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (12) assignment -> . LET IDENTIFIER EQUAL expression_list
    (13) assignment -> . LET IDENTIFIER EQUAL REAL
    (14) assignment -> . LET IDENTIFIER EQUAL NUMBER
    (43) display -> . SHOW expression
    (44) display -> . SHOW STRING_LITERAL
    (45) display -> . SHOW IDENTIFIER
    (46) display -> . SHOW NUMBER
    (47) display -> . SHOW REAL
    (48) display -> . SHOW CHARACTER
    (49) display -> . SHOW list
    (50) display -> . SHOW function
    (51) display -> . SHOW conditional
    (52) display -> . SHOW loop
    (53) display -> . SHOW input
    (54) display -> . SHOW comment
    (55) display -> . SHOW program
    (56) display -> . SHOW statements
    (57) display -> . SHOW expression_list
    (58) display -> . SHOW assignment
    (59) display -> . SHOW display
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) term -> . IDENTIFIER
    (38) term -> . factor
    (74) empty -> .
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (39) factor -> . NUMBER
    (40) factor -> . LPAREN expression RPAREN
    (41) factor -> . REAL

  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for SHOW resolved as shift
    STRING_LITERAL  shift and go to state 51
    IDENTIFIER      shift and go to state 52
    NUMBER          shift and go to state 53
    REAL            shift and go to state 54
    CHARACTER       shift and go to state 55
    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    LBRACKET        shift and go to state 20
    FUNCTION        shift and go to state 27
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 26
    DO              shift and go to state 25
    LET             shift and go to state 68
    COMMENT         shift and go to state 69
    SHOW            shift and go to state 28
    $end            reduce using rule 74 (empty -> .)
    PLUS            reduce using rule 74 (empty -> .)
    MINUS           reduce using rule 74 (empty -> .)
    POWER           reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)
    END             reduce using rule 74 (empty -> .)
    RBRACE          reduce using rule 74 (empty -> .)
    COMMA           reduce using rule 74 (empty -> .)

  ! LET             [ reduce using rule 74 (empty -> .) ]
  ! IF              [ reduce using rule 74 (empty -> .) ]
  ! FOR             [ reduce using rule 74 (empty -> .) ]
  ! WHILE           [ reduce using rule 74 (empty -> .) ]
  ! DO              [ reduce using rule 74 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 74 (empty -> .) ]
  ! SHOW            [ reduce using rule 74 (empty -> .) ]

    expression                     shift and go to state 50
    list                           shift and go to state 56
    function                       shift and go to state 57
    conditional                    shift and go to state 58
    loop                           shift and go to state 59
    input                          shift and go to state 60
    comment                        shift and go to state 61
    program                        shift and go to state 62
    statements                     shift and go to state 63
    expression_list                shift and go to state 64
    assignment                     shift and go to state 65
    display                        shift and go to state 66
    term                           shift and go to state 5
    empty                          shift and go to state 67
    statement                      shift and go to state 4
    factor                         shift and go to state 18

state 29

    (3) statements -> statements statement .

    LET             reduce using rule 3 (statements -> statements statement .)
    IF              reduce using rule 3 (statements -> statements statement .)
    FOR             reduce using rule 3 (statements -> statements statement .)
    WHILE           reduce using rule 3 (statements -> statements statement .)
    DO              reduce using rule 3 (statements -> statements statement .)
    FUNCTION        reduce using rule 3 (statements -> statements statement .)
    SHOW            reduce using rule 3 (statements -> statements statement .)
    $end            reduce using rule 3 (statements -> statements statement .)
    ELSE            reduce using rule 3 (statements -> statements statement .)
    END             reduce using rule 3 (statements -> statements statement .)
    RBRACE          reduce using rule 3 (statements -> statements statement .)


state 30

    (25) expression -> expression PLUS . term
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) term -> . IDENTIFIER
    (38) term -> . factor
    (39) factor -> . NUMBER
    (40) factor -> . LPAREN expression RPAREN
    (41) factor -> . REAL

    IDENTIFIER      shift and go to state 19
    NUMBER          shift and go to state 71
    LPAREN          shift and go to state 72
    REAL            shift and go to state 73

    term                           shift and go to state 70
    factor                         shift and go to state 18

state 31

    (26) expression -> expression MINUS . term
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) term -> . IDENTIFIER
    (38) term -> . factor
    (39) factor -> . NUMBER
    (40) factor -> . LPAREN expression RPAREN
    (41) factor -> . REAL

    IDENTIFIER      shift and go to state 19
    NUMBER          shift and go to state 71
    LPAREN          shift and go to state 72
    REAL            shift and go to state 73

    term                           shift and go to state 74
    factor                         shift and go to state 18

state 32

    (28) expression -> expression POWER . term
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) term -> . IDENTIFIER
    (38) term -> . factor
    (39) factor -> . NUMBER
    (40) factor -> . LPAREN expression RPAREN
    (41) factor -> . REAL

    IDENTIFIER      shift and go to state 19
    NUMBER          shift and go to state 71
    LPAREN          shift and go to state 72
    REAL            shift and go to state 73

    term                           shift and go to state 75
    factor                         shift and go to state 18

state 33

    (35) term -> term TIMES . factor
    (39) factor -> . NUMBER
    (40) factor -> . LPAREN expression RPAREN
    (41) factor -> . REAL

    NUMBER          shift and go to state 71
    LPAREN          shift and go to state 72
    REAL            shift and go to state 73

    factor                         shift and go to state 76

state 34

    (36) term -> term DIVIDE . factor
    (39) factor -> . NUMBER
    (40) factor -> . LPAREN expression RPAREN
    (41) factor -> . REAL

    NUMBER          shift and go to state 71
    LPAREN          shift and go to state 72
    REAL            shift and go to state 73

    factor                         shift and go to state 77

state 35

    (29) expression -> NOT expression .
    (25) expression -> expression . PLUS term
    (26) expression -> expression . MINUS term
    (28) expression -> expression . POWER term

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
    $end            reduce using rule 29 (expression -> NOT expression .)
    RPAREN          reduce using rule 29 (expression -> NOT expression .)
    RBRACKET        reduce using rule 29 (expression -> NOT expression .)
    COMMA           reduce using rule 29 (expression -> NOT expression .)
    IS_LESS_THAN    reduce using rule 29 (expression -> NOT expression .)
    IS_EQUAL_TO     reduce using rule 29 (expression -> NOT expression .)
    IS_GREATER_THAN reduce using rule 29 (expression -> NOT expression .)
    IS_NOT_EQUAL_TO reduce using rule 29 (expression -> NOT expression .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 29 (expression -> NOT expression .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 29 (expression -> NOT expression .)
    LET             reduce using rule 29 (expression -> NOT expression .)
    IF              reduce using rule 29 (expression -> NOT expression .)
    FOR             reduce using rule 29 (expression -> NOT expression .)
    WHILE           reduce using rule 29 (expression -> NOT expression .)
    DO              reduce using rule 29 (expression -> NOT expression .)
    FUNCTION        reduce using rule 29 (expression -> NOT expression .)
    SHOW            reduce using rule 29 (expression -> NOT expression .)
    ELSE            reduce using rule 29 (expression -> NOT expression .)
    END             reduce using rule 29 (expression -> NOT expression .)
    RBRACE          reduce using rule 29 (expression -> NOT expression .)
    THEN            reduce using rule 29 (expression -> NOT expression .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    POWER           shift and go to state 32

  ! PLUS            [ reduce using rule 29 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 29 (expression -> NOT expression .) ]
  ! POWER           [ reduce using rule 29 (expression -> NOT expression .) ]


state 36

    (30) expression -> LPAREN expression . RPAREN
    (40) factor -> LPAREN expression . RPAREN
    (25) expression -> expression . PLUS term
    (26) expression -> expression . MINUS term
    (28) expression -> expression . POWER term

    RPAREN          shift and go to state 78
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    POWER           shift and go to state 32


state 37

    (31) expression -> NUMBER MINUS . term
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) term -> . IDENTIFIER
    (38) term -> . factor
    (39) factor -> . NUMBER
    (40) factor -> . LPAREN expression RPAREN
    (41) factor -> . REAL

    IDENTIFIER      shift and go to state 19
    NUMBER          shift and go to state 71
    LPAREN          shift and go to state 72
    REAL            shift and go to state 73

    term                           shift and go to state 79
    factor                         shift and go to state 18

state 38

    (32) expression -> REAL MINUS . term
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) term -> . IDENTIFIER
    (38) term -> . factor
    (39) factor -> . NUMBER
    (40) factor -> . LPAREN expression RPAREN
    (41) factor -> . REAL

    IDENTIFIER      shift and go to state 19
    NUMBER          shift and go to state 71
    LPAREN          shift and go to state 72
    REAL            shift and go to state 73

    term                           shift and go to state 80
    factor                         shift and go to state 18

state 39

    (33) expression -> CHARACTER PLUS . term
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) term -> . IDENTIFIER
    (38) term -> . factor
    (39) factor -> . NUMBER
    (40) factor -> . LPAREN expression RPAREN
    (41) factor -> . REAL

    IDENTIFIER      shift and go to state 19
    NUMBER          shift and go to state 71
    LPAREN          shift and go to state 72
    REAL            shift and go to state 73

    term                           shift and go to state 81
    factor                         shift and go to state 18

state 40

    (63) list -> LBRACKET expression_list . RBRACKET
    (66) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 82
    COMMA           shift and go to state 83


state 41

    (65) expression_list -> expression .
    (25) expression -> expression . PLUS term
    (26) expression -> expression . MINUS term
    (28) expression -> expression . POWER term

    RBRACKET        reduce using rule 65 (expression_list -> expression .)
    COMMA           reduce using rule 65 (expression_list -> expression .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    POWER           shift and go to state 32


state 42

    (67) expression_list -> empty .
    (64) list -> empty .

  ! reduce/reduce conflict for RBRACKET resolved using rule 64 (list -> empty .)
  ! reduce/reduce conflict for COMMA resolved using rule 64 (list -> empty .)
  ! reduce/reduce conflict for LET resolved using rule 64 (list -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 64 (list -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 64 (list -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 64 (list -> empty .)
  ! reduce/reduce conflict for DO resolved using rule 64 (list -> empty .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 64 (list -> empty .)
  ! reduce/reduce conflict for SHOW resolved using rule 64 (list -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 64 (list -> empty .)
  ! reduce/reduce conflict for ELSE resolved using rule 64 (list -> empty .)
  ! reduce/reduce conflict for END resolved using rule 64 (list -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 64 (list -> empty .)
    PLUS            reduce using rule 64 (list -> empty .)
    MINUS           reduce using rule 64 (list -> empty .)
    POWER           reduce using rule 64 (list -> empty .)
    RBRACKET        reduce using rule 64 (list -> empty .)
    COMMA           reduce using rule 64 (list -> empty .)
    LET             reduce using rule 64 (list -> empty .)
    IF              reduce using rule 64 (list -> empty .)
    FOR             reduce using rule 64 (list -> empty .)
    WHILE           reduce using rule 64 (list -> empty .)
    DO              reduce using rule 64 (list -> empty .)
    FUNCTION        reduce using rule 64 (list -> empty .)
    SHOW            reduce using rule 64 (list -> empty .)
    $end            reduce using rule 64 (list -> empty .)
    ELSE            reduce using rule 64 (list -> empty .)
    END             reduce using rule 64 (list -> empty .)
    RBRACE          reduce using rule 64 (list -> empty .)

  ! RBRACKET        [ reduce using rule 67 (expression_list -> empty .) ]
  ! COMMA           [ reduce using rule 67 (expression_list -> empty .) ]
  ! LET             [ reduce using rule 67 (expression_list -> empty .) ]
  ! IF              [ reduce using rule 67 (expression_list -> empty .) ]
  ! FOR             [ reduce using rule 67 (expression_list -> empty .) ]
  ! WHILE           [ reduce using rule 67 (expression_list -> empty .) ]
  ! DO              [ reduce using rule 67 (expression_list -> empty .) ]
  ! FUNCTION        [ reduce using rule 67 (expression_list -> empty .) ]
  ! SHOW            [ reduce using rule 67 (expression_list -> empty .) ]
  ! $end            [ reduce using rule 67 (expression_list -> empty .) ]
  ! ELSE            [ reduce using rule 67 (expression_list -> empty .) ]
  ! END             [ reduce using rule 67 (expression_list -> empty .) ]
  ! RBRACE          [ reduce using rule 67 (expression_list -> empty .) ]


state 43

    (11) assignment -> LET IDENTIFIER . EQUAL expression
    (12) assignment -> LET IDENTIFIER . EQUAL expression_list
    (13) assignment -> LET IDENTIFIER . EQUAL REAL
    (14) assignment -> LET IDENTIFIER . EQUAL NUMBER
    (42) input -> LET IDENTIFIER . EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    EQUAL           shift and go to state 84


state 44

    (16) conditional -> IF condition . THEN statements else_statements_opt END

    THEN            shift and go to state 85


state 45

    (19) condition -> expression . IS_LESS_THAN expression
    (20) condition -> expression . IS_EQUAL_TO expression
    (21) condition -> expression . IS_GREATER_THAN expression
    (22) condition -> expression . IS_NOT_EQUAL_TO expression
    (23) condition -> expression . GREATER_THAN_OR_EQUAL_TO expression
    (24) condition -> expression . LESS_THAN_OR_EQUAL_TO expression
    (25) expression -> expression . PLUS term
    (26) expression -> expression . MINUS term
    (28) expression -> expression . POWER term

    IS_LESS_THAN    shift and go to state 86
    IS_EQUAL_TO     shift and go to state 87
    IS_GREATER_THAN shift and go to state 88
    IS_NOT_EQUAL_TO shift and go to state 89
    GREATER_THAN_OR_EQUAL_TO shift and go to state 90
    LESS_THAN_OR_EQUAL_TO shift and go to state 91
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    POWER           shift and go to state 32


state 46

    (60) loop -> FOR IDENTIFIER . IN list DO statements

    IN              shift and go to state 92


state 47

    (62) loop -> DO statements . WHILE condition
    (3) statements -> statements . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (12) assignment -> . LET IDENTIFIER EQUAL expression_list
    (13) assignment -> . LET IDENTIFIER EQUAL REAL
    (14) assignment -> . LET IDENTIFIER EQUAL NUMBER
    (16) conditional -> . IF condition THEN statements else_statements_opt END
    (60) loop -> . FOR IDENTIFIER IN list DO statements
    (61) loop -> . WHILE condition DO statements
    (62) loop -> . DO statements WHILE condition
    (68) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (43) display -> . SHOW expression
    (44) display -> . SHOW STRING_LITERAL
    (45) display -> . SHOW IDENTIFIER
    (46) display -> . SHOW NUMBER
    (47) display -> . SHOW REAL
    (48) display -> . SHOW CHARACTER
    (49) display -> . SHOW list
    (50) display -> . SHOW function
    (51) display -> . SHOW conditional
    (52) display -> . SHOW loop
    (53) display -> . SHOW input
    (54) display -> . SHOW comment
    (55) display -> . SHOW program
    (56) display -> . SHOW statements
    (57) display -> . SHOW expression_list
    (58) display -> . SHOW assignment
    (59) display -> . SHOW display
    (42) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    WHILE           shift and go to state 93
    LET             shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    DO              shift and go to state 25
    FUNCTION        shift and go to state 27
    SHOW            shift and go to state 28

    statement                      shift and go to state 29
    assignment                     shift and go to state 12
    conditional                    shift and go to state 13
    loop                           shift and go to state 14
    function                       shift and go to state 15
    display                        shift and go to state 16
    input                          shift and go to state 17

state 48

    (61) loop -> WHILE condition . DO statements

    DO              shift and go to state 94


state 49

    (68) function -> FUNCTION IDENTIFIER . LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE

    LPAREN          shift and go to state 95


state 50

    (43) display -> SHOW expression .
    (25) expression -> expression . PLUS term
    (26) expression -> expression . MINUS term
    (28) expression -> expression . POWER term
    (2) program -> expression .
    (65) expression_list -> expression .

  ! reduce/reduce conflict for LET resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for IF resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for FOR resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for DO resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for SHOW resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for $end resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for END resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for RBRACE resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for LET resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for IF resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for FOR resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for DO resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for SHOW resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for $end resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for END resolved using rule 2 (program -> expression .)
  ! reduce/reduce conflict for RBRACE resolved using rule 2 (program -> expression .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    POWER           shift and go to state 32
    LET             reduce using rule 2 (program -> expression .)
    IF              reduce using rule 2 (program -> expression .)
    FOR             reduce using rule 2 (program -> expression .)
    WHILE           reduce using rule 2 (program -> expression .)
    DO              reduce using rule 2 (program -> expression .)
    FUNCTION        reduce using rule 2 (program -> expression .)
    SHOW            reduce using rule 2 (program -> expression .)
    $end            reduce using rule 2 (program -> expression .)
    ELSE            reduce using rule 2 (program -> expression .)
    END             reduce using rule 2 (program -> expression .)
    RBRACE          reduce using rule 2 (program -> expression .)
    COMMA           reduce using rule 65 (expression_list -> expression .)

  ! LET             [ reduce using rule 43 (display -> SHOW expression .) ]
  ! IF              [ reduce using rule 43 (display -> SHOW expression .) ]
  ! FOR             [ reduce using rule 43 (display -> SHOW expression .) ]
  ! WHILE           [ reduce using rule 43 (display -> SHOW expression .) ]
  ! DO              [ reduce using rule 43 (display -> SHOW expression .) ]
  ! FUNCTION        [ reduce using rule 43 (display -> SHOW expression .) ]
  ! SHOW            [ reduce using rule 43 (display -> SHOW expression .) ]
  ! $end            [ reduce using rule 43 (display -> SHOW expression .) ]
  ! ELSE            [ reduce using rule 43 (display -> SHOW expression .) ]
  ! END             [ reduce using rule 43 (display -> SHOW expression .) ]
  ! RBRACE          [ reduce using rule 43 (display -> SHOW expression .) ]
  ! LET             [ reduce using rule 65 (expression_list -> expression .) ]
  ! IF              [ reduce using rule 65 (expression_list -> expression .) ]
  ! FOR             [ reduce using rule 65 (expression_list -> expression .) ]
  ! WHILE           [ reduce using rule 65 (expression_list -> expression .) ]
  ! DO              [ reduce using rule 65 (expression_list -> expression .) ]
  ! FUNCTION        [ reduce using rule 65 (expression_list -> expression .) ]
  ! SHOW            [ reduce using rule 65 (expression_list -> expression .) ]
  ! $end            [ reduce using rule 65 (expression_list -> expression .) ]
  ! ELSE            [ reduce using rule 65 (expression_list -> expression .) ]
  ! END             [ reduce using rule 65 (expression_list -> expression .) ]
  ! RBRACE          [ reduce using rule 65 (expression_list -> expression .) ]


state 51

    (44) display -> SHOW STRING_LITERAL .

    LET             reduce using rule 44 (display -> SHOW STRING_LITERAL .)
    IF              reduce using rule 44 (display -> SHOW STRING_LITERAL .)
    FOR             reduce using rule 44 (display -> SHOW STRING_LITERAL .)
    WHILE           reduce using rule 44 (display -> SHOW STRING_LITERAL .)
    DO              reduce using rule 44 (display -> SHOW STRING_LITERAL .)
    FUNCTION        reduce using rule 44 (display -> SHOW STRING_LITERAL .)
    SHOW            reduce using rule 44 (display -> SHOW STRING_LITERAL .)
    $end            reduce using rule 44 (display -> SHOW STRING_LITERAL .)
    ELSE            reduce using rule 44 (display -> SHOW STRING_LITERAL .)
    END             reduce using rule 44 (display -> SHOW STRING_LITERAL .)
    RBRACE          reduce using rule 44 (display -> SHOW STRING_LITERAL .)


state 52

    (45) display -> SHOW IDENTIFIER .
    (37) term -> IDENTIFIER .

  ! reduce/reduce conflict for LET resolved using rule 37 (term -> IDENTIFIER .)
  ! reduce/reduce conflict for IF resolved using rule 37 (term -> IDENTIFIER .)
  ! reduce/reduce conflict for FOR resolved using rule 37 (term -> IDENTIFIER .)
  ! reduce/reduce conflict for WHILE resolved using rule 37 (term -> IDENTIFIER .)
  ! reduce/reduce conflict for DO resolved using rule 37 (term -> IDENTIFIER .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 37 (term -> IDENTIFIER .)
  ! reduce/reduce conflict for SHOW resolved using rule 37 (term -> IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 37 (term -> IDENTIFIER .)
  ! reduce/reduce conflict for ELSE resolved using rule 37 (term -> IDENTIFIER .)
  ! reduce/reduce conflict for END resolved using rule 37 (term -> IDENTIFIER .)
  ! reduce/reduce conflict for RBRACE resolved using rule 37 (term -> IDENTIFIER .)
    TIMES           reduce using rule 37 (term -> IDENTIFIER .)
    DIVIDE          reduce using rule 37 (term -> IDENTIFIER .)
    PLUS            reduce using rule 37 (term -> IDENTIFIER .)
    MINUS           reduce using rule 37 (term -> IDENTIFIER .)
    POWER           reduce using rule 37 (term -> IDENTIFIER .)
    LET             reduce using rule 37 (term -> IDENTIFIER .)
    IF              reduce using rule 37 (term -> IDENTIFIER .)
    FOR             reduce using rule 37 (term -> IDENTIFIER .)
    WHILE           reduce using rule 37 (term -> IDENTIFIER .)
    DO              reduce using rule 37 (term -> IDENTIFIER .)
    FUNCTION        reduce using rule 37 (term -> IDENTIFIER .)
    SHOW            reduce using rule 37 (term -> IDENTIFIER .)
    $end            reduce using rule 37 (term -> IDENTIFIER .)
    ELSE            reduce using rule 37 (term -> IDENTIFIER .)
    END             reduce using rule 37 (term -> IDENTIFIER .)
    RBRACE          reduce using rule 37 (term -> IDENTIFIER .)
    COMMA           reduce using rule 37 (term -> IDENTIFIER .)

  ! LET             [ reduce using rule 45 (display -> SHOW IDENTIFIER .) ]
  ! IF              [ reduce using rule 45 (display -> SHOW IDENTIFIER .) ]
  ! FOR             [ reduce using rule 45 (display -> SHOW IDENTIFIER .) ]
  ! WHILE           [ reduce using rule 45 (display -> SHOW IDENTIFIER .) ]
  ! DO              [ reduce using rule 45 (display -> SHOW IDENTIFIER .) ]
  ! FUNCTION        [ reduce using rule 45 (display -> SHOW IDENTIFIER .) ]
  ! SHOW            [ reduce using rule 45 (display -> SHOW IDENTIFIER .) ]
  ! $end            [ reduce using rule 45 (display -> SHOW IDENTIFIER .) ]
  ! ELSE            [ reduce using rule 45 (display -> SHOW IDENTIFIER .) ]
  ! END             [ reduce using rule 45 (display -> SHOW IDENTIFIER .) ]
  ! RBRACE          [ reduce using rule 45 (display -> SHOW IDENTIFIER .) ]


state 53

    (46) display -> SHOW NUMBER .
    (31) expression -> NUMBER . MINUS term
    (39) factor -> NUMBER .

  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for LET resolved using rule 39 (factor -> NUMBER .)
  ! reduce/reduce conflict for IF resolved using rule 39 (factor -> NUMBER .)
  ! reduce/reduce conflict for FOR resolved using rule 39 (factor -> NUMBER .)
  ! reduce/reduce conflict for WHILE resolved using rule 39 (factor -> NUMBER .)
  ! reduce/reduce conflict for DO resolved using rule 39 (factor -> NUMBER .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 39 (factor -> NUMBER .)
  ! reduce/reduce conflict for SHOW resolved using rule 39 (factor -> NUMBER .)
  ! reduce/reduce conflict for $end resolved using rule 39 (factor -> NUMBER .)
  ! reduce/reduce conflict for ELSE resolved using rule 39 (factor -> NUMBER .)
  ! reduce/reduce conflict for END resolved using rule 39 (factor -> NUMBER .)
  ! reduce/reduce conflict for RBRACE resolved using rule 39 (factor -> NUMBER .)
    MINUS           shift and go to state 37
    TIMES           reduce using rule 39 (factor -> NUMBER .)
    DIVIDE          reduce using rule 39 (factor -> NUMBER .)
    PLUS            reduce using rule 39 (factor -> NUMBER .)
    POWER           reduce using rule 39 (factor -> NUMBER .)
    LET             reduce using rule 39 (factor -> NUMBER .)
    IF              reduce using rule 39 (factor -> NUMBER .)
    FOR             reduce using rule 39 (factor -> NUMBER .)
    WHILE           reduce using rule 39 (factor -> NUMBER .)
    DO              reduce using rule 39 (factor -> NUMBER .)
    FUNCTION        reduce using rule 39 (factor -> NUMBER .)
    SHOW            reduce using rule 39 (factor -> NUMBER .)
    $end            reduce using rule 39 (factor -> NUMBER .)
    ELSE            reduce using rule 39 (factor -> NUMBER .)
    END             reduce using rule 39 (factor -> NUMBER .)
    RBRACE          reduce using rule 39 (factor -> NUMBER .)
    COMMA           reduce using rule 39 (factor -> NUMBER .)

  ! LET             [ reduce using rule 46 (display -> SHOW NUMBER .) ]
  ! IF              [ reduce using rule 46 (display -> SHOW NUMBER .) ]
  ! FOR             [ reduce using rule 46 (display -> SHOW NUMBER .) ]
  ! WHILE           [ reduce using rule 46 (display -> SHOW NUMBER .) ]
  ! DO              [ reduce using rule 46 (display -> SHOW NUMBER .) ]
  ! FUNCTION        [ reduce using rule 46 (display -> SHOW NUMBER .) ]
  ! SHOW            [ reduce using rule 46 (display -> SHOW NUMBER .) ]
  ! $end            [ reduce using rule 46 (display -> SHOW NUMBER .) ]
  ! ELSE            [ reduce using rule 46 (display -> SHOW NUMBER .) ]
  ! END             [ reduce using rule 46 (display -> SHOW NUMBER .) ]
  ! RBRACE          [ reduce using rule 46 (display -> SHOW NUMBER .) ]
  ! MINUS           [ reduce using rule 39 (factor -> NUMBER .) ]


state 54

    (47) display -> SHOW REAL .
    (32) expression -> REAL . MINUS term
    (41) factor -> REAL .

  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for LET resolved using rule 41 (factor -> REAL .)
  ! reduce/reduce conflict for IF resolved using rule 41 (factor -> REAL .)
  ! reduce/reduce conflict for FOR resolved using rule 41 (factor -> REAL .)
  ! reduce/reduce conflict for WHILE resolved using rule 41 (factor -> REAL .)
  ! reduce/reduce conflict for DO resolved using rule 41 (factor -> REAL .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 41 (factor -> REAL .)
  ! reduce/reduce conflict for SHOW resolved using rule 41 (factor -> REAL .)
  ! reduce/reduce conflict for $end resolved using rule 41 (factor -> REAL .)
  ! reduce/reduce conflict for ELSE resolved using rule 41 (factor -> REAL .)
  ! reduce/reduce conflict for END resolved using rule 41 (factor -> REAL .)
  ! reduce/reduce conflict for RBRACE resolved using rule 41 (factor -> REAL .)
    MINUS           shift and go to state 38
    TIMES           reduce using rule 41 (factor -> REAL .)
    DIVIDE          reduce using rule 41 (factor -> REAL .)
    PLUS            reduce using rule 41 (factor -> REAL .)
    POWER           reduce using rule 41 (factor -> REAL .)
    LET             reduce using rule 41 (factor -> REAL .)
    IF              reduce using rule 41 (factor -> REAL .)
    FOR             reduce using rule 41 (factor -> REAL .)
    WHILE           reduce using rule 41 (factor -> REAL .)
    DO              reduce using rule 41 (factor -> REAL .)
    FUNCTION        reduce using rule 41 (factor -> REAL .)
    SHOW            reduce using rule 41 (factor -> REAL .)
    $end            reduce using rule 41 (factor -> REAL .)
    ELSE            reduce using rule 41 (factor -> REAL .)
    END             reduce using rule 41 (factor -> REAL .)
    RBRACE          reduce using rule 41 (factor -> REAL .)
    COMMA           reduce using rule 41 (factor -> REAL .)

  ! LET             [ reduce using rule 47 (display -> SHOW REAL .) ]
  ! IF              [ reduce using rule 47 (display -> SHOW REAL .) ]
  ! FOR             [ reduce using rule 47 (display -> SHOW REAL .) ]
  ! WHILE           [ reduce using rule 47 (display -> SHOW REAL .) ]
  ! DO              [ reduce using rule 47 (display -> SHOW REAL .) ]
  ! FUNCTION        [ reduce using rule 47 (display -> SHOW REAL .) ]
  ! SHOW            [ reduce using rule 47 (display -> SHOW REAL .) ]
  ! $end            [ reduce using rule 47 (display -> SHOW REAL .) ]
  ! ELSE            [ reduce using rule 47 (display -> SHOW REAL .) ]
  ! END             [ reduce using rule 47 (display -> SHOW REAL .) ]
  ! RBRACE          [ reduce using rule 47 (display -> SHOW REAL .) ]
  ! MINUS           [ reduce using rule 41 (factor -> REAL .) ]


state 55

    (48) display -> SHOW CHARACTER .
    (33) expression -> CHARACTER . PLUS term

    LET             reduce using rule 48 (display -> SHOW CHARACTER .)
    IF              reduce using rule 48 (display -> SHOW CHARACTER .)
    FOR             reduce using rule 48 (display -> SHOW CHARACTER .)
    WHILE           reduce using rule 48 (display -> SHOW CHARACTER .)
    DO              reduce using rule 48 (display -> SHOW CHARACTER .)
    FUNCTION        reduce using rule 48 (display -> SHOW CHARACTER .)
    SHOW            reduce using rule 48 (display -> SHOW CHARACTER .)
    $end            reduce using rule 48 (display -> SHOW CHARACTER .)
    ELSE            reduce using rule 48 (display -> SHOW CHARACTER .)
    END             reduce using rule 48 (display -> SHOW CHARACTER .)
    RBRACE          reduce using rule 48 (display -> SHOW CHARACTER .)
    PLUS            shift and go to state 39


state 56

    (49) display -> SHOW list .
    (34) expression -> list .

  ! reduce/reduce conflict for LET resolved using rule 34 (expression -> list .)
  ! reduce/reduce conflict for IF resolved using rule 34 (expression -> list .)
  ! reduce/reduce conflict for FOR resolved using rule 34 (expression -> list .)
  ! reduce/reduce conflict for WHILE resolved using rule 34 (expression -> list .)
  ! reduce/reduce conflict for DO resolved using rule 34 (expression -> list .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 34 (expression -> list .)
  ! reduce/reduce conflict for SHOW resolved using rule 34 (expression -> list .)
  ! reduce/reduce conflict for $end resolved using rule 34 (expression -> list .)
  ! reduce/reduce conflict for ELSE resolved using rule 34 (expression -> list .)
  ! reduce/reduce conflict for END resolved using rule 34 (expression -> list .)
  ! reduce/reduce conflict for RBRACE resolved using rule 34 (expression -> list .)
    PLUS            reduce using rule 34 (expression -> list .)
    MINUS           reduce using rule 34 (expression -> list .)
    POWER           reduce using rule 34 (expression -> list .)
    LET             reduce using rule 34 (expression -> list .)
    IF              reduce using rule 34 (expression -> list .)
    FOR             reduce using rule 34 (expression -> list .)
    WHILE           reduce using rule 34 (expression -> list .)
    DO              reduce using rule 34 (expression -> list .)
    FUNCTION        reduce using rule 34 (expression -> list .)
    SHOW            reduce using rule 34 (expression -> list .)
    $end            reduce using rule 34 (expression -> list .)
    ELSE            reduce using rule 34 (expression -> list .)
    END             reduce using rule 34 (expression -> list .)
    RBRACE          reduce using rule 34 (expression -> list .)
    COMMA           reduce using rule 34 (expression -> list .)

  ! LET             [ reduce using rule 49 (display -> SHOW list .) ]
  ! IF              [ reduce using rule 49 (display -> SHOW list .) ]
  ! FOR             [ reduce using rule 49 (display -> SHOW list .) ]
  ! WHILE           [ reduce using rule 49 (display -> SHOW list .) ]
  ! DO              [ reduce using rule 49 (display -> SHOW list .) ]
  ! FUNCTION        [ reduce using rule 49 (display -> SHOW list .) ]
  ! SHOW            [ reduce using rule 49 (display -> SHOW list .) ]
  ! $end            [ reduce using rule 49 (display -> SHOW list .) ]
  ! ELSE            [ reduce using rule 49 (display -> SHOW list .) ]
  ! END             [ reduce using rule 49 (display -> SHOW list .) ]
  ! RBRACE          [ reduce using rule 49 (display -> SHOW list .) ]


state 57

    (50) display -> SHOW function .
    (8) statement -> function .

  ! reduce/reduce conflict for LET resolved using rule 8 (statement -> function .)
  ! reduce/reduce conflict for IF resolved using rule 8 (statement -> function .)
  ! reduce/reduce conflict for FOR resolved using rule 8 (statement -> function .)
  ! reduce/reduce conflict for WHILE resolved using rule 8 (statement -> function .)
  ! reduce/reduce conflict for DO resolved using rule 8 (statement -> function .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 8 (statement -> function .)
  ! reduce/reduce conflict for SHOW resolved using rule 8 (statement -> function .)
  ! reduce/reduce conflict for $end resolved using rule 8 (statement -> function .)
  ! reduce/reduce conflict for ELSE resolved using rule 8 (statement -> function .)
  ! reduce/reduce conflict for END resolved using rule 8 (statement -> function .)
  ! reduce/reduce conflict for RBRACE resolved using rule 8 (statement -> function .)
    LET             reduce using rule 8 (statement -> function .)
    IF              reduce using rule 8 (statement -> function .)
    FOR             reduce using rule 8 (statement -> function .)
    WHILE           reduce using rule 8 (statement -> function .)
    DO              reduce using rule 8 (statement -> function .)
    FUNCTION        reduce using rule 8 (statement -> function .)
    SHOW            reduce using rule 8 (statement -> function .)
    $end            reduce using rule 8 (statement -> function .)
    ELSE            reduce using rule 8 (statement -> function .)
    END             reduce using rule 8 (statement -> function .)
    RBRACE          reduce using rule 8 (statement -> function .)

  ! LET             [ reduce using rule 50 (display -> SHOW function .) ]
  ! IF              [ reduce using rule 50 (display -> SHOW function .) ]
  ! FOR             [ reduce using rule 50 (display -> SHOW function .) ]
  ! WHILE           [ reduce using rule 50 (display -> SHOW function .) ]
  ! DO              [ reduce using rule 50 (display -> SHOW function .) ]
  ! FUNCTION        [ reduce using rule 50 (display -> SHOW function .) ]
  ! SHOW            [ reduce using rule 50 (display -> SHOW function .) ]
  ! $end            [ reduce using rule 50 (display -> SHOW function .) ]
  ! ELSE            [ reduce using rule 50 (display -> SHOW function .) ]
  ! END             [ reduce using rule 50 (display -> SHOW function .) ]
  ! RBRACE          [ reduce using rule 50 (display -> SHOW function .) ]


state 58

    (51) display -> SHOW conditional .
    (6) statement -> conditional .

  ! reduce/reduce conflict for LET resolved using rule 6 (statement -> conditional .)
  ! reduce/reduce conflict for IF resolved using rule 6 (statement -> conditional .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (statement -> conditional .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (statement -> conditional .)
  ! reduce/reduce conflict for DO resolved using rule 6 (statement -> conditional .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 6 (statement -> conditional .)
  ! reduce/reduce conflict for SHOW resolved using rule 6 (statement -> conditional .)
  ! reduce/reduce conflict for $end resolved using rule 6 (statement -> conditional .)
  ! reduce/reduce conflict for ELSE resolved using rule 6 (statement -> conditional .)
  ! reduce/reduce conflict for END resolved using rule 6 (statement -> conditional .)
  ! reduce/reduce conflict for RBRACE resolved using rule 6 (statement -> conditional .)
    LET             reduce using rule 6 (statement -> conditional .)
    IF              reduce using rule 6 (statement -> conditional .)
    FOR             reduce using rule 6 (statement -> conditional .)
    WHILE           reduce using rule 6 (statement -> conditional .)
    DO              reduce using rule 6 (statement -> conditional .)
    FUNCTION        reduce using rule 6 (statement -> conditional .)
    SHOW            reduce using rule 6 (statement -> conditional .)
    $end            reduce using rule 6 (statement -> conditional .)
    ELSE            reduce using rule 6 (statement -> conditional .)
    END             reduce using rule 6 (statement -> conditional .)
    RBRACE          reduce using rule 6 (statement -> conditional .)

  ! LET             [ reduce using rule 51 (display -> SHOW conditional .) ]
  ! IF              [ reduce using rule 51 (display -> SHOW conditional .) ]
  ! FOR             [ reduce using rule 51 (display -> SHOW conditional .) ]
  ! WHILE           [ reduce using rule 51 (display -> SHOW conditional .) ]
  ! DO              [ reduce using rule 51 (display -> SHOW conditional .) ]
  ! FUNCTION        [ reduce using rule 51 (display -> SHOW conditional .) ]
  ! SHOW            [ reduce using rule 51 (display -> SHOW conditional .) ]
  ! $end            [ reduce using rule 51 (display -> SHOW conditional .) ]
  ! ELSE            [ reduce using rule 51 (display -> SHOW conditional .) ]
  ! END             [ reduce using rule 51 (display -> SHOW conditional .) ]
  ! RBRACE          [ reduce using rule 51 (display -> SHOW conditional .) ]


state 59

    (52) display -> SHOW loop .
    (7) statement -> loop .

  ! reduce/reduce conflict for LET resolved using rule 7 (statement -> loop .)
  ! reduce/reduce conflict for IF resolved using rule 7 (statement -> loop .)
  ! reduce/reduce conflict for FOR resolved using rule 7 (statement -> loop .)
  ! reduce/reduce conflict for WHILE resolved using rule 7 (statement -> loop .)
  ! reduce/reduce conflict for DO resolved using rule 7 (statement -> loop .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 7 (statement -> loop .)
  ! reduce/reduce conflict for SHOW resolved using rule 7 (statement -> loop .)
  ! reduce/reduce conflict for $end resolved using rule 7 (statement -> loop .)
  ! reduce/reduce conflict for ELSE resolved using rule 7 (statement -> loop .)
  ! reduce/reduce conflict for END resolved using rule 7 (statement -> loop .)
  ! reduce/reduce conflict for RBRACE resolved using rule 7 (statement -> loop .)
    LET             reduce using rule 7 (statement -> loop .)
    IF              reduce using rule 7 (statement -> loop .)
    FOR             reduce using rule 7 (statement -> loop .)
    WHILE           reduce using rule 7 (statement -> loop .)
    DO              reduce using rule 7 (statement -> loop .)
    FUNCTION        reduce using rule 7 (statement -> loop .)
    SHOW            reduce using rule 7 (statement -> loop .)
    $end            reduce using rule 7 (statement -> loop .)
    ELSE            reduce using rule 7 (statement -> loop .)
    END             reduce using rule 7 (statement -> loop .)
    RBRACE          reduce using rule 7 (statement -> loop .)

  ! LET             [ reduce using rule 52 (display -> SHOW loop .) ]
  ! IF              [ reduce using rule 52 (display -> SHOW loop .) ]
  ! FOR             [ reduce using rule 52 (display -> SHOW loop .) ]
  ! WHILE           [ reduce using rule 52 (display -> SHOW loop .) ]
  ! DO              [ reduce using rule 52 (display -> SHOW loop .) ]
  ! FUNCTION        [ reduce using rule 52 (display -> SHOW loop .) ]
  ! SHOW            [ reduce using rule 52 (display -> SHOW loop .) ]
  ! $end            [ reduce using rule 52 (display -> SHOW loop .) ]
  ! ELSE            [ reduce using rule 52 (display -> SHOW loop .) ]
  ! END             [ reduce using rule 52 (display -> SHOW loop .) ]
  ! RBRACE          [ reduce using rule 52 (display -> SHOW loop .) ]


state 60

    (53) display -> SHOW input .
    (10) statement -> input .

  ! reduce/reduce conflict for LET resolved using rule 10 (statement -> input .)
  ! reduce/reduce conflict for IF resolved using rule 10 (statement -> input .)
  ! reduce/reduce conflict for FOR resolved using rule 10 (statement -> input .)
  ! reduce/reduce conflict for WHILE resolved using rule 10 (statement -> input .)
  ! reduce/reduce conflict for DO resolved using rule 10 (statement -> input .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 10 (statement -> input .)
  ! reduce/reduce conflict for SHOW resolved using rule 10 (statement -> input .)
  ! reduce/reduce conflict for $end resolved using rule 10 (statement -> input .)
  ! reduce/reduce conflict for ELSE resolved using rule 10 (statement -> input .)
  ! reduce/reduce conflict for END resolved using rule 10 (statement -> input .)
  ! reduce/reduce conflict for RBRACE resolved using rule 10 (statement -> input .)
    LET             reduce using rule 10 (statement -> input .)
    IF              reduce using rule 10 (statement -> input .)
    FOR             reduce using rule 10 (statement -> input .)
    WHILE           reduce using rule 10 (statement -> input .)
    DO              reduce using rule 10 (statement -> input .)
    FUNCTION        reduce using rule 10 (statement -> input .)
    SHOW            reduce using rule 10 (statement -> input .)
    $end            reduce using rule 10 (statement -> input .)
    ELSE            reduce using rule 10 (statement -> input .)
    END             reduce using rule 10 (statement -> input .)
    RBRACE          reduce using rule 10 (statement -> input .)

  ! LET             [ reduce using rule 53 (display -> SHOW input .) ]
  ! IF              [ reduce using rule 53 (display -> SHOW input .) ]
  ! FOR             [ reduce using rule 53 (display -> SHOW input .) ]
  ! WHILE           [ reduce using rule 53 (display -> SHOW input .) ]
  ! DO              [ reduce using rule 53 (display -> SHOW input .) ]
  ! FUNCTION        [ reduce using rule 53 (display -> SHOW input .) ]
  ! SHOW            [ reduce using rule 53 (display -> SHOW input .) ]
  ! $end            [ reduce using rule 53 (display -> SHOW input .) ]
  ! ELSE            [ reduce using rule 53 (display -> SHOW input .) ]
  ! END             [ reduce using rule 53 (display -> SHOW input .) ]
  ! RBRACE          [ reduce using rule 53 (display -> SHOW input .) ]


state 61

    (54) display -> SHOW comment .

    LET             reduce using rule 54 (display -> SHOW comment .)
    IF              reduce using rule 54 (display -> SHOW comment .)
    FOR             reduce using rule 54 (display -> SHOW comment .)
    WHILE           reduce using rule 54 (display -> SHOW comment .)
    DO              reduce using rule 54 (display -> SHOW comment .)
    FUNCTION        reduce using rule 54 (display -> SHOW comment .)
    SHOW            reduce using rule 54 (display -> SHOW comment .)
    $end            reduce using rule 54 (display -> SHOW comment .)
    ELSE            reduce using rule 54 (display -> SHOW comment .)
    END             reduce using rule 54 (display -> SHOW comment .)
    RBRACE          reduce using rule 54 (display -> SHOW comment .)


state 62

    (55) display -> SHOW program .

    LET             reduce using rule 55 (display -> SHOW program .)
    IF              reduce using rule 55 (display -> SHOW program .)
    FOR             reduce using rule 55 (display -> SHOW program .)
    WHILE           reduce using rule 55 (display -> SHOW program .)
    DO              reduce using rule 55 (display -> SHOW program .)
    FUNCTION        reduce using rule 55 (display -> SHOW program .)
    SHOW            reduce using rule 55 (display -> SHOW program .)
    $end            reduce using rule 55 (display -> SHOW program .)
    ELSE            reduce using rule 55 (display -> SHOW program .)
    END             reduce using rule 55 (display -> SHOW program .)
    RBRACE          reduce using rule 55 (display -> SHOW program .)


state 63

    (56) display -> SHOW statements .
    (1) program -> statements .
    (3) statements -> statements . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (12) assignment -> . LET IDENTIFIER EQUAL expression_list
    (13) assignment -> . LET IDENTIFIER EQUAL REAL
    (14) assignment -> . LET IDENTIFIER EQUAL NUMBER
    (16) conditional -> . IF condition THEN statements else_statements_opt END
    (60) loop -> . FOR IDENTIFIER IN list DO statements
    (61) loop -> . WHILE condition DO statements
    (62) loop -> . DO statements WHILE condition
    (68) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (43) display -> . SHOW expression
    (44) display -> . SHOW STRING_LITERAL
    (45) display -> . SHOW IDENTIFIER
    (46) display -> . SHOW NUMBER
    (47) display -> . SHOW REAL
    (48) display -> . SHOW CHARACTER
    (49) display -> . SHOW list
    (50) display -> . SHOW function
    (51) display -> . SHOW conditional
    (52) display -> . SHOW loop
    (53) display -> . SHOW input
    (54) display -> . SHOW comment
    (55) display -> . SHOW program
    (56) display -> . SHOW statements
    (57) display -> . SHOW expression_list
    (58) display -> . SHOW assignment
    (59) display -> . SHOW display
    (42) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

  ! reduce/reduce conflict for LET resolved using rule 1 (program -> statements .)
  ! reduce/reduce conflict for IF resolved using rule 1 (program -> statements .)
  ! reduce/reduce conflict for FOR resolved using rule 1 (program -> statements .)
  ! reduce/reduce conflict for WHILE resolved using rule 1 (program -> statements .)
  ! reduce/reduce conflict for DO resolved using rule 1 (program -> statements .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 1 (program -> statements .)
  ! reduce/reduce conflict for SHOW resolved using rule 1 (program -> statements .)
  ! reduce/reduce conflict for $end resolved using rule 1 (program -> statements .)
  ! reduce/reduce conflict for ELSE resolved using rule 1 (program -> statements .)
  ! reduce/reduce conflict for END resolved using rule 1 (program -> statements .)
  ! reduce/reduce conflict for RBRACE resolved using rule 1 (program -> statements .)
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for SHOW resolved as shift
    $end            reduce using rule 1 (program -> statements .)
    ELSE            reduce using rule 1 (program -> statements .)
    END             reduce using rule 1 (program -> statements .)
    RBRACE          reduce using rule 1 (program -> statements .)
    LET             shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 26
    DO              shift and go to state 25
    FUNCTION        shift and go to state 27
    SHOW            shift and go to state 28

  ! LET             [ reduce using rule 56 (display -> SHOW statements .) ]
  ! IF              [ reduce using rule 56 (display -> SHOW statements .) ]
  ! FOR             [ reduce using rule 56 (display -> SHOW statements .) ]
  ! WHILE           [ reduce using rule 56 (display -> SHOW statements .) ]
  ! DO              [ reduce using rule 56 (display -> SHOW statements .) ]
  ! FUNCTION        [ reduce using rule 56 (display -> SHOW statements .) ]
  ! SHOW            [ reduce using rule 56 (display -> SHOW statements .) ]
  ! $end            [ reduce using rule 56 (display -> SHOW statements .) ]
  ! ELSE            [ reduce using rule 56 (display -> SHOW statements .) ]
  ! END             [ reduce using rule 56 (display -> SHOW statements .) ]
  ! RBRACE          [ reduce using rule 56 (display -> SHOW statements .) ]
  ! LET             [ reduce using rule 1 (program -> statements .) ]
  ! IF              [ reduce using rule 1 (program -> statements .) ]
  ! FOR             [ reduce using rule 1 (program -> statements .) ]
  ! WHILE           [ reduce using rule 1 (program -> statements .) ]
  ! DO              [ reduce using rule 1 (program -> statements .) ]
  ! FUNCTION        [ reduce using rule 1 (program -> statements .) ]
  ! SHOW            [ reduce using rule 1 (program -> statements .) ]

    statement                      shift and go to state 29
    assignment                     shift and go to state 12
    conditional                    shift and go to state 13
    loop                           shift and go to state 14
    function                       shift and go to state 15
    display                        shift and go to state 16
    input                          shift and go to state 17

state 64

    (57) display -> SHOW expression_list .
    (66) expression_list -> expression_list . COMMA expression

    LET             reduce using rule 57 (display -> SHOW expression_list .)
    IF              reduce using rule 57 (display -> SHOW expression_list .)
    FOR             reduce using rule 57 (display -> SHOW expression_list .)
    WHILE           reduce using rule 57 (display -> SHOW expression_list .)
    DO              reduce using rule 57 (display -> SHOW expression_list .)
    FUNCTION        reduce using rule 57 (display -> SHOW expression_list .)
    SHOW            reduce using rule 57 (display -> SHOW expression_list .)
    $end            reduce using rule 57 (display -> SHOW expression_list .)
    ELSE            reduce using rule 57 (display -> SHOW expression_list .)
    END             reduce using rule 57 (display -> SHOW expression_list .)
    RBRACE          reduce using rule 57 (display -> SHOW expression_list .)
    COMMA           shift and go to state 83


state 65

    (58) display -> SHOW assignment .
    (5) statement -> assignment .

  ! reduce/reduce conflict for LET resolved using rule 5 (statement -> assignment .)
  ! reduce/reduce conflict for IF resolved using rule 5 (statement -> assignment .)
  ! reduce/reduce conflict for FOR resolved using rule 5 (statement -> assignment .)
  ! reduce/reduce conflict for WHILE resolved using rule 5 (statement -> assignment .)
  ! reduce/reduce conflict for DO resolved using rule 5 (statement -> assignment .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 5 (statement -> assignment .)
  ! reduce/reduce conflict for SHOW resolved using rule 5 (statement -> assignment .)
  ! reduce/reduce conflict for $end resolved using rule 5 (statement -> assignment .)
  ! reduce/reduce conflict for ELSE resolved using rule 5 (statement -> assignment .)
  ! reduce/reduce conflict for END resolved using rule 5 (statement -> assignment .)
  ! reduce/reduce conflict for RBRACE resolved using rule 5 (statement -> assignment .)
    LET             reduce using rule 5 (statement -> assignment .)
    IF              reduce using rule 5 (statement -> assignment .)
    FOR             reduce using rule 5 (statement -> assignment .)
    WHILE           reduce using rule 5 (statement -> assignment .)
    DO              reduce using rule 5 (statement -> assignment .)
    FUNCTION        reduce using rule 5 (statement -> assignment .)
    SHOW            reduce using rule 5 (statement -> assignment .)
    $end            reduce using rule 5 (statement -> assignment .)
    ELSE            reduce using rule 5 (statement -> assignment .)
    END             reduce using rule 5 (statement -> assignment .)
    RBRACE          reduce using rule 5 (statement -> assignment .)

  ! LET             [ reduce using rule 58 (display -> SHOW assignment .) ]
  ! IF              [ reduce using rule 58 (display -> SHOW assignment .) ]
  ! FOR             [ reduce using rule 58 (display -> SHOW assignment .) ]
  ! WHILE           [ reduce using rule 58 (display -> SHOW assignment .) ]
  ! DO              [ reduce using rule 58 (display -> SHOW assignment .) ]
  ! FUNCTION        [ reduce using rule 58 (display -> SHOW assignment .) ]
  ! SHOW            [ reduce using rule 58 (display -> SHOW assignment .) ]
  ! $end            [ reduce using rule 58 (display -> SHOW assignment .) ]
  ! ELSE            [ reduce using rule 58 (display -> SHOW assignment .) ]
  ! END             [ reduce using rule 58 (display -> SHOW assignment .) ]
  ! RBRACE          [ reduce using rule 58 (display -> SHOW assignment .) ]


state 66

    (59) display -> SHOW display .
    (9) statement -> display .

  ! reduce/reduce conflict for LET resolved using rule 9 (statement -> display .)
  ! reduce/reduce conflict for IF resolved using rule 9 (statement -> display .)
  ! reduce/reduce conflict for FOR resolved using rule 9 (statement -> display .)
  ! reduce/reduce conflict for WHILE resolved using rule 9 (statement -> display .)
  ! reduce/reduce conflict for DO resolved using rule 9 (statement -> display .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 9 (statement -> display .)
  ! reduce/reduce conflict for SHOW resolved using rule 9 (statement -> display .)
  ! reduce/reduce conflict for $end resolved using rule 9 (statement -> display .)
  ! reduce/reduce conflict for ELSE resolved using rule 9 (statement -> display .)
  ! reduce/reduce conflict for END resolved using rule 9 (statement -> display .)
  ! reduce/reduce conflict for RBRACE resolved using rule 9 (statement -> display .)
    LET             reduce using rule 9 (statement -> display .)
    IF              reduce using rule 9 (statement -> display .)
    FOR             reduce using rule 9 (statement -> display .)
    WHILE           reduce using rule 9 (statement -> display .)
    DO              reduce using rule 9 (statement -> display .)
    FUNCTION        reduce using rule 9 (statement -> display .)
    SHOW            reduce using rule 9 (statement -> display .)
    $end            reduce using rule 9 (statement -> display .)
    ELSE            reduce using rule 9 (statement -> display .)
    END             reduce using rule 9 (statement -> display .)
    RBRACE          reduce using rule 9 (statement -> display .)

  ! LET             [ reduce using rule 59 (display -> SHOW display .) ]
  ! IF              [ reduce using rule 59 (display -> SHOW display .) ]
  ! FOR             [ reduce using rule 59 (display -> SHOW display .) ]
  ! WHILE           [ reduce using rule 59 (display -> SHOW display .) ]
  ! DO              [ reduce using rule 59 (display -> SHOW display .) ]
  ! FUNCTION        [ reduce using rule 59 (display -> SHOW display .) ]
  ! SHOW            [ reduce using rule 59 (display -> SHOW display .) ]
  ! $end            [ reduce using rule 59 (display -> SHOW display .) ]
  ! ELSE            [ reduce using rule 59 (display -> SHOW display .) ]
  ! END             [ reduce using rule 59 (display -> SHOW display .) ]
  ! RBRACE          [ reduce using rule 59 (display -> SHOW display .) ]


state 67

    (64) list -> empty .
    (67) expression_list -> empty .

  ! reduce/reduce conflict for COMMA resolved using rule 64 (list -> empty .)
  ! reduce/reduce conflict for LET resolved using rule 64 (list -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 64 (list -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 64 (list -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 64 (list -> empty .)
  ! reduce/reduce conflict for DO resolved using rule 64 (list -> empty .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 64 (list -> empty .)
  ! reduce/reduce conflict for SHOW resolved using rule 64 (list -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 64 (list -> empty .)
  ! reduce/reduce conflict for ELSE resolved using rule 64 (list -> empty .)
  ! reduce/reduce conflict for END resolved using rule 64 (list -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 64 (list -> empty .)
    LET             reduce using rule 64 (list -> empty .)
    IF              reduce using rule 64 (list -> empty .)
    FOR             reduce using rule 64 (list -> empty .)
    WHILE           reduce using rule 64 (list -> empty .)
    DO              reduce using rule 64 (list -> empty .)
    FUNCTION        reduce using rule 64 (list -> empty .)
    SHOW            reduce using rule 64 (list -> empty .)
    $end            reduce using rule 64 (list -> empty .)
    PLUS            reduce using rule 64 (list -> empty .)
    MINUS           reduce using rule 64 (list -> empty .)
    POWER           reduce using rule 64 (list -> empty .)
    ELSE            reduce using rule 64 (list -> empty .)
    END             reduce using rule 64 (list -> empty .)
    RBRACE          reduce using rule 64 (list -> empty .)
    COMMA           reduce using rule 64 (list -> empty .)

  ! COMMA           [ reduce using rule 67 (expression_list -> empty .) ]
  ! LET             [ reduce using rule 67 (expression_list -> empty .) ]
  ! IF              [ reduce using rule 67 (expression_list -> empty .) ]
  ! FOR             [ reduce using rule 67 (expression_list -> empty .) ]
  ! WHILE           [ reduce using rule 67 (expression_list -> empty .) ]
  ! DO              [ reduce using rule 67 (expression_list -> empty .) ]
  ! FUNCTION        [ reduce using rule 67 (expression_list -> empty .) ]
  ! SHOW            [ reduce using rule 67 (expression_list -> empty .) ]
  ! $end            [ reduce using rule 67 (expression_list -> empty .) ]
  ! ELSE            [ reduce using rule 67 (expression_list -> empty .) ]
  ! END             [ reduce using rule 67 (expression_list -> empty .) ]
  ! RBRACE          [ reduce using rule 67 (expression_list -> empty .) ]


state 68

    (42) input -> LET . IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN
    (11) assignment -> LET . IDENTIFIER EQUAL expression
    (12) assignment -> LET . IDENTIFIER EQUAL expression_list
    (13) assignment -> LET . IDENTIFIER EQUAL REAL
    (14) assignment -> LET . IDENTIFIER EQUAL NUMBER

    IDENTIFIER      shift and go to state 96


state 69

    (15) comment -> COMMENT .

    LET             reduce using rule 15 (comment -> COMMENT .)
    IF              reduce using rule 15 (comment -> COMMENT .)
    FOR             reduce using rule 15 (comment -> COMMENT .)
    WHILE           reduce using rule 15 (comment -> COMMENT .)
    DO              reduce using rule 15 (comment -> COMMENT .)
    FUNCTION        reduce using rule 15 (comment -> COMMENT .)
    SHOW            reduce using rule 15 (comment -> COMMENT .)
    $end            reduce using rule 15 (comment -> COMMENT .)
    ELSE            reduce using rule 15 (comment -> COMMENT .)
    END             reduce using rule 15 (comment -> COMMENT .)
    RBRACE          reduce using rule 15 (comment -> COMMENT .)


state 70

    (25) expression -> expression PLUS term .
    (35) term -> term . TIMES factor
    (36) term -> term . DIVIDE factor

    PLUS            reduce using rule 25 (expression -> expression PLUS term .)
    MINUS           reduce using rule 25 (expression -> expression PLUS term .)
    POWER           reduce using rule 25 (expression -> expression PLUS term .)
    $end            reduce using rule 25 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 25 (expression -> expression PLUS term .)
    RBRACKET        reduce using rule 25 (expression -> expression PLUS term .)
    COMMA           reduce using rule 25 (expression -> expression PLUS term .)
    IS_LESS_THAN    reduce using rule 25 (expression -> expression PLUS term .)
    IS_EQUAL_TO     reduce using rule 25 (expression -> expression PLUS term .)
    IS_GREATER_THAN reduce using rule 25 (expression -> expression PLUS term .)
    IS_NOT_EQUAL_TO reduce using rule 25 (expression -> expression PLUS term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 25 (expression -> expression PLUS term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 25 (expression -> expression PLUS term .)
    LET             reduce using rule 25 (expression -> expression PLUS term .)
    IF              reduce using rule 25 (expression -> expression PLUS term .)
    FOR             reduce using rule 25 (expression -> expression PLUS term .)
    WHILE           reduce using rule 25 (expression -> expression PLUS term .)
    DO              reduce using rule 25 (expression -> expression PLUS term .)
    FUNCTION        reduce using rule 25 (expression -> expression PLUS term .)
    SHOW            reduce using rule 25 (expression -> expression PLUS term .)
    ELSE            reduce using rule 25 (expression -> expression PLUS term .)
    END             reduce using rule 25 (expression -> expression PLUS term .)
    RBRACE          reduce using rule 25 (expression -> expression PLUS term .)
    THEN            reduce using rule 25 (expression -> expression PLUS term .)
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34


state 71

    (39) factor -> NUMBER .

    TIMES           reduce using rule 39 (factor -> NUMBER .)
    DIVIDE          reduce using rule 39 (factor -> NUMBER .)
    PLUS            reduce using rule 39 (factor -> NUMBER .)
    MINUS           reduce using rule 39 (factor -> NUMBER .)
    POWER           reduce using rule 39 (factor -> NUMBER .)
    $end            reduce using rule 39 (factor -> NUMBER .)
    RPAREN          reduce using rule 39 (factor -> NUMBER .)
    RBRACKET        reduce using rule 39 (factor -> NUMBER .)
    COMMA           reduce using rule 39 (factor -> NUMBER .)
    IS_LESS_THAN    reduce using rule 39 (factor -> NUMBER .)
    IS_EQUAL_TO     reduce using rule 39 (factor -> NUMBER .)
    IS_GREATER_THAN reduce using rule 39 (factor -> NUMBER .)
    IS_NOT_EQUAL_TO reduce using rule 39 (factor -> NUMBER .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 39 (factor -> NUMBER .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 39 (factor -> NUMBER .)
    LET             reduce using rule 39 (factor -> NUMBER .)
    IF              reduce using rule 39 (factor -> NUMBER .)
    FOR             reduce using rule 39 (factor -> NUMBER .)
    WHILE           reduce using rule 39 (factor -> NUMBER .)
    DO              reduce using rule 39 (factor -> NUMBER .)
    FUNCTION        reduce using rule 39 (factor -> NUMBER .)
    SHOW            reduce using rule 39 (factor -> NUMBER .)
    ELSE            reduce using rule 39 (factor -> NUMBER .)
    END             reduce using rule 39 (factor -> NUMBER .)
    RBRACE          reduce using rule 39 (factor -> NUMBER .)
    THEN            reduce using rule 39 (factor -> NUMBER .)


state 72

    (40) factor -> LPAREN . expression RPAREN
    (25) expression -> . expression PLUS term
    (26) expression -> . expression MINUS term
    (27) expression -> . term
    (28) expression -> . expression POWER term
    (29) expression -> . NOT expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . NUMBER MINUS term
    (32) expression -> . REAL MINUS term
    (33) expression -> . CHARACTER PLUS term
    (34) expression -> . list
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) term -> . IDENTIFIER
    (38) term -> . factor
    (63) list -> . LBRACKET expression_list RBRACKET
    (64) list -> . empty
    (39) factor -> . NUMBER
    (40) factor -> . LPAREN expression RPAREN
    (41) factor -> . REAL
    (74) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    RPAREN          reduce using rule 74 (empty -> .)
    PLUS            reduce using rule 74 (empty -> .)
    MINUS           reduce using rule 74 (empty -> .)
    POWER           reduce using rule 74 (empty -> .)

    expression                     shift and go to state 97
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 73

    (41) factor -> REAL .

    TIMES           reduce using rule 41 (factor -> REAL .)
    DIVIDE          reduce using rule 41 (factor -> REAL .)
    PLUS            reduce using rule 41 (factor -> REAL .)
    MINUS           reduce using rule 41 (factor -> REAL .)
    POWER           reduce using rule 41 (factor -> REAL .)
    $end            reduce using rule 41 (factor -> REAL .)
    RPAREN          reduce using rule 41 (factor -> REAL .)
    RBRACKET        reduce using rule 41 (factor -> REAL .)
    COMMA           reduce using rule 41 (factor -> REAL .)
    IS_LESS_THAN    reduce using rule 41 (factor -> REAL .)
    IS_EQUAL_TO     reduce using rule 41 (factor -> REAL .)
    IS_GREATER_THAN reduce using rule 41 (factor -> REAL .)
    IS_NOT_EQUAL_TO reduce using rule 41 (factor -> REAL .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 41 (factor -> REAL .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 41 (factor -> REAL .)
    LET             reduce using rule 41 (factor -> REAL .)
    IF              reduce using rule 41 (factor -> REAL .)
    FOR             reduce using rule 41 (factor -> REAL .)
    WHILE           reduce using rule 41 (factor -> REAL .)
    DO              reduce using rule 41 (factor -> REAL .)
    FUNCTION        reduce using rule 41 (factor -> REAL .)
    SHOW            reduce using rule 41 (factor -> REAL .)
    ELSE            reduce using rule 41 (factor -> REAL .)
    END             reduce using rule 41 (factor -> REAL .)
    RBRACE          reduce using rule 41 (factor -> REAL .)
    THEN            reduce using rule 41 (factor -> REAL .)


state 74

    (26) expression -> expression MINUS term .
    (35) term -> term . TIMES factor
    (36) term -> term . DIVIDE factor

    PLUS            reduce using rule 26 (expression -> expression MINUS term .)
    MINUS           reduce using rule 26 (expression -> expression MINUS term .)
    POWER           reduce using rule 26 (expression -> expression MINUS term .)
    $end            reduce using rule 26 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 26 (expression -> expression MINUS term .)
    RBRACKET        reduce using rule 26 (expression -> expression MINUS term .)
    COMMA           reduce using rule 26 (expression -> expression MINUS term .)
    IS_LESS_THAN    reduce using rule 26 (expression -> expression MINUS term .)
    IS_EQUAL_TO     reduce using rule 26 (expression -> expression MINUS term .)
    IS_GREATER_THAN reduce using rule 26 (expression -> expression MINUS term .)
    IS_NOT_EQUAL_TO reduce using rule 26 (expression -> expression MINUS term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 26 (expression -> expression MINUS term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 26 (expression -> expression MINUS term .)
    LET             reduce using rule 26 (expression -> expression MINUS term .)
    IF              reduce using rule 26 (expression -> expression MINUS term .)
    FOR             reduce using rule 26 (expression -> expression MINUS term .)
    WHILE           reduce using rule 26 (expression -> expression MINUS term .)
    DO              reduce using rule 26 (expression -> expression MINUS term .)
    FUNCTION        reduce using rule 26 (expression -> expression MINUS term .)
    SHOW            reduce using rule 26 (expression -> expression MINUS term .)
    ELSE            reduce using rule 26 (expression -> expression MINUS term .)
    END             reduce using rule 26 (expression -> expression MINUS term .)
    RBRACE          reduce using rule 26 (expression -> expression MINUS term .)
    THEN            reduce using rule 26 (expression -> expression MINUS term .)
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34


state 75

    (28) expression -> expression POWER term .
    (35) term -> term . TIMES factor
    (36) term -> term . DIVIDE factor

    PLUS            reduce using rule 28 (expression -> expression POWER term .)
    MINUS           reduce using rule 28 (expression -> expression POWER term .)
    POWER           reduce using rule 28 (expression -> expression POWER term .)
    $end            reduce using rule 28 (expression -> expression POWER term .)
    RPAREN          reduce using rule 28 (expression -> expression POWER term .)
    RBRACKET        reduce using rule 28 (expression -> expression POWER term .)
    COMMA           reduce using rule 28 (expression -> expression POWER term .)
    IS_LESS_THAN    reduce using rule 28 (expression -> expression POWER term .)
    IS_EQUAL_TO     reduce using rule 28 (expression -> expression POWER term .)
    IS_GREATER_THAN reduce using rule 28 (expression -> expression POWER term .)
    IS_NOT_EQUAL_TO reduce using rule 28 (expression -> expression POWER term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 28 (expression -> expression POWER term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 28 (expression -> expression POWER term .)
    LET             reduce using rule 28 (expression -> expression POWER term .)
    IF              reduce using rule 28 (expression -> expression POWER term .)
    FOR             reduce using rule 28 (expression -> expression POWER term .)
    WHILE           reduce using rule 28 (expression -> expression POWER term .)
    DO              reduce using rule 28 (expression -> expression POWER term .)
    FUNCTION        reduce using rule 28 (expression -> expression POWER term .)
    SHOW            reduce using rule 28 (expression -> expression POWER term .)
    ELSE            reduce using rule 28 (expression -> expression POWER term .)
    END             reduce using rule 28 (expression -> expression POWER term .)
    RBRACE          reduce using rule 28 (expression -> expression POWER term .)
    THEN            reduce using rule 28 (expression -> expression POWER term .)
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34


state 76

    (35) term -> term TIMES factor .

    TIMES           reduce using rule 35 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 35 (term -> term TIMES factor .)
    PLUS            reduce using rule 35 (term -> term TIMES factor .)
    MINUS           reduce using rule 35 (term -> term TIMES factor .)
    POWER           reduce using rule 35 (term -> term TIMES factor .)
    $end            reduce using rule 35 (term -> term TIMES factor .)
    RPAREN          reduce using rule 35 (term -> term TIMES factor .)
    RBRACKET        reduce using rule 35 (term -> term TIMES factor .)
    COMMA           reduce using rule 35 (term -> term TIMES factor .)
    IS_LESS_THAN    reduce using rule 35 (term -> term TIMES factor .)
    IS_EQUAL_TO     reduce using rule 35 (term -> term TIMES factor .)
    IS_GREATER_THAN reduce using rule 35 (term -> term TIMES factor .)
    IS_NOT_EQUAL_TO reduce using rule 35 (term -> term TIMES factor .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 35 (term -> term TIMES factor .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 35 (term -> term TIMES factor .)
    LET             reduce using rule 35 (term -> term TIMES factor .)
    IF              reduce using rule 35 (term -> term TIMES factor .)
    FOR             reduce using rule 35 (term -> term TIMES factor .)
    WHILE           reduce using rule 35 (term -> term TIMES factor .)
    DO              reduce using rule 35 (term -> term TIMES factor .)
    FUNCTION        reduce using rule 35 (term -> term TIMES factor .)
    SHOW            reduce using rule 35 (term -> term TIMES factor .)
    ELSE            reduce using rule 35 (term -> term TIMES factor .)
    END             reduce using rule 35 (term -> term TIMES factor .)
    RBRACE          reduce using rule 35 (term -> term TIMES factor .)
    THEN            reduce using rule 35 (term -> term TIMES factor .)


state 77

    (36) term -> term DIVIDE factor .

    TIMES           reduce using rule 36 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 36 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 36 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 36 (term -> term DIVIDE factor .)
    POWER           reduce using rule 36 (term -> term DIVIDE factor .)
    $end            reduce using rule 36 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 36 (term -> term DIVIDE factor .)
    RBRACKET        reduce using rule 36 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 36 (term -> term DIVIDE factor .)
    IS_LESS_THAN    reduce using rule 36 (term -> term DIVIDE factor .)
    IS_EQUAL_TO     reduce using rule 36 (term -> term DIVIDE factor .)
    IS_GREATER_THAN reduce using rule 36 (term -> term DIVIDE factor .)
    IS_NOT_EQUAL_TO reduce using rule 36 (term -> term DIVIDE factor .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 36 (term -> term DIVIDE factor .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 36 (term -> term DIVIDE factor .)
    LET             reduce using rule 36 (term -> term DIVIDE factor .)
    IF              reduce using rule 36 (term -> term DIVIDE factor .)
    FOR             reduce using rule 36 (term -> term DIVIDE factor .)
    WHILE           reduce using rule 36 (term -> term DIVIDE factor .)
    DO              reduce using rule 36 (term -> term DIVIDE factor .)
    FUNCTION        reduce using rule 36 (term -> term DIVIDE factor .)
    SHOW            reduce using rule 36 (term -> term DIVIDE factor .)
    ELSE            reduce using rule 36 (term -> term DIVIDE factor .)
    END             reduce using rule 36 (term -> term DIVIDE factor .)
    RBRACE          reduce using rule 36 (term -> term DIVIDE factor .)
    THEN            reduce using rule 36 (term -> term DIVIDE factor .)


state 78

    (30) expression -> LPAREN expression RPAREN .
    (40) factor -> LPAREN expression RPAREN .

  ! reduce/reduce conflict for PLUS resolved using rule 30 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for MINUS resolved using rule 30 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for POWER resolved using rule 30 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 30 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for RPAREN resolved using rule 30 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 30 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for COMMA resolved using rule 30 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for IS_LESS_THAN resolved using rule 30 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for IS_EQUAL_TO resolved using rule 30 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for IS_GREATER_THAN resolved using rule 30 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for IS_NOT_EQUAL_TO resolved using rule 30 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUAL_TO resolved using rule 30 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQUAL_TO resolved using rule 30 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for LET resolved using rule 30 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for IF resolved using rule 30 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for FOR resolved using rule 30 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for WHILE resolved using rule 30 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for DO resolved using rule 30 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 30 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for SHOW resolved using rule 30 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for ELSE resolved using rule 30 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for END resolved using rule 30 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for RBRACE resolved using rule 30 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for THEN resolved using rule 30 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    IS_LESS_THAN    reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    IS_EQUAL_TO     reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    IS_GREATER_THAN reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    IS_NOT_EQUAL_TO reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    LET             reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    SHOW            reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    END             reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 40 (factor -> LPAREN expression RPAREN .)

  ! PLUS            [ reduce using rule 40 (factor -> LPAREN expression RPAREN .) ]
  ! MINUS           [ reduce using rule 40 (factor -> LPAREN expression RPAREN .) ]
  ! POWER           [ reduce using rule 40 (factor -> LPAREN expression RPAREN .) ]
  ! $end            [ reduce using rule 40 (factor -> LPAREN expression RPAREN .) ]
  ! RPAREN          [ reduce using rule 40 (factor -> LPAREN expression RPAREN .) ]
  ! RBRACKET        [ reduce using rule 40 (factor -> LPAREN expression RPAREN .) ]
  ! COMMA           [ reduce using rule 40 (factor -> LPAREN expression RPAREN .) ]
  ! IS_LESS_THAN    [ reduce using rule 40 (factor -> LPAREN expression RPAREN .) ]
  ! IS_EQUAL_TO     [ reduce using rule 40 (factor -> LPAREN expression RPAREN .) ]
  ! IS_GREATER_THAN [ reduce using rule 40 (factor -> LPAREN expression RPAREN .) ]
  ! IS_NOT_EQUAL_TO [ reduce using rule 40 (factor -> LPAREN expression RPAREN .) ]
  ! GREATER_THAN_OR_EQUAL_TO [ reduce using rule 40 (factor -> LPAREN expression RPAREN .) ]
  ! LESS_THAN_OR_EQUAL_TO [ reduce using rule 40 (factor -> LPAREN expression RPAREN .) ]
  ! LET             [ reduce using rule 40 (factor -> LPAREN expression RPAREN .) ]
  ! IF              [ reduce using rule 40 (factor -> LPAREN expression RPAREN .) ]
  ! FOR             [ reduce using rule 40 (factor -> LPAREN expression RPAREN .) ]
  ! WHILE           [ reduce using rule 40 (factor -> LPAREN expression RPAREN .) ]
  ! DO              [ reduce using rule 40 (factor -> LPAREN expression RPAREN .) ]
  ! FUNCTION        [ reduce using rule 40 (factor -> LPAREN expression RPAREN .) ]
  ! SHOW            [ reduce using rule 40 (factor -> LPAREN expression RPAREN .) ]
  ! ELSE            [ reduce using rule 40 (factor -> LPAREN expression RPAREN .) ]
  ! END             [ reduce using rule 40 (factor -> LPAREN expression RPAREN .) ]
  ! RBRACE          [ reduce using rule 40 (factor -> LPAREN expression RPAREN .) ]
  ! THEN            [ reduce using rule 40 (factor -> LPAREN expression RPAREN .) ]


state 79

    (31) expression -> NUMBER MINUS term .
    (35) term -> term . TIMES factor
    (36) term -> term . DIVIDE factor

    PLUS            reduce using rule 31 (expression -> NUMBER MINUS term .)
    MINUS           reduce using rule 31 (expression -> NUMBER MINUS term .)
    POWER           reduce using rule 31 (expression -> NUMBER MINUS term .)
    $end            reduce using rule 31 (expression -> NUMBER MINUS term .)
    RPAREN          reduce using rule 31 (expression -> NUMBER MINUS term .)
    RBRACKET        reduce using rule 31 (expression -> NUMBER MINUS term .)
    COMMA           reduce using rule 31 (expression -> NUMBER MINUS term .)
    IS_LESS_THAN    reduce using rule 31 (expression -> NUMBER MINUS term .)
    IS_EQUAL_TO     reduce using rule 31 (expression -> NUMBER MINUS term .)
    IS_GREATER_THAN reduce using rule 31 (expression -> NUMBER MINUS term .)
    IS_NOT_EQUAL_TO reduce using rule 31 (expression -> NUMBER MINUS term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 31 (expression -> NUMBER MINUS term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 31 (expression -> NUMBER MINUS term .)
    LET             reduce using rule 31 (expression -> NUMBER MINUS term .)
    IF              reduce using rule 31 (expression -> NUMBER MINUS term .)
    FOR             reduce using rule 31 (expression -> NUMBER MINUS term .)
    WHILE           reduce using rule 31 (expression -> NUMBER MINUS term .)
    DO              reduce using rule 31 (expression -> NUMBER MINUS term .)
    FUNCTION        reduce using rule 31 (expression -> NUMBER MINUS term .)
    SHOW            reduce using rule 31 (expression -> NUMBER MINUS term .)
    ELSE            reduce using rule 31 (expression -> NUMBER MINUS term .)
    END             reduce using rule 31 (expression -> NUMBER MINUS term .)
    RBRACE          reduce using rule 31 (expression -> NUMBER MINUS term .)
    THEN            reduce using rule 31 (expression -> NUMBER MINUS term .)
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34


state 80

    (32) expression -> REAL MINUS term .
    (35) term -> term . TIMES factor
    (36) term -> term . DIVIDE factor

    PLUS            reduce using rule 32 (expression -> REAL MINUS term .)
    MINUS           reduce using rule 32 (expression -> REAL MINUS term .)
    POWER           reduce using rule 32 (expression -> REAL MINUS term .)
    $end            reduce using rule 32 (expression -> REAL MINUS term .)
    RPAREN          reduce using rule 32 (expression -> REAL MINUS term .)
    RBRACKET        reduce using rule 32 (expression -> REAL MINUS term .)
    COMMA           reduce using rule 32 (expression -> REAL MINUS term .)
    IS_LESS_THAN    reduce using rule 32 (expression -> REAL MINUS term .)
    IS_EQUAL_TO     reduce using rule 32 (expression -> REAL MINUS term .)
    IS_GREATER_THAN reduce using rule 32 (expression -> REAL MINUS term .)
    IS_NOT_EQUAL_TO reduce using rule 32 (expression -> REAL MINUS term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 32 (expression -> REAL MINUS term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 32 (expression -> REAL MINUS term .)
    LET             reduce using rule 32 (expression -> REAL MINUS term .)
    IF              reduce using rule 32 (expression -> REAL MINUS term .)
    FOR             reduce using rule 32 (expression -> REAL MINUS term .)
    WHILE           reduce using rule 32 (expression -> REAL MINUS term .)
    DO              reduce using rule 32 (expression -> REAL MINUS term .)
    FUNCTION        reduce using rule 32 (expression -> REAL MINUS term .)
    SHOW            reduce using rule 32 (expression -> REAL MINUS term .)
    ELSE            reduce using rule 32 (expression -> REAL MINUS term .)
    END             reduce using rule 32 (expression -> REAL MINUS term .)
    RBRACE          reduce using rule 32 (expression -> REAL MINUS term .)
    THEN            reduce using rule 32 (expression -> REAL MINUS term .)
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34


state 81

    (33) expression -> CHARACTER PLUS term .
    (35) term -> term . TIMES factor
    (36) term -> term . DIVIDE factor

    PLUS            reduce using rule 33 (expression -> CHARACTER PLUS term .)
    MINUS           reduce using rule 33 (expression -> CHARACTER PLUS term .)
    POWER           reduce using rule 33 (expression -> CHARACTER PLUS term .)
    $end            reduce using rule 33 (expression -> CHARACTER PLUS term .)
    RPAREN          reduce using rule 33 (expression -> CHARACTER PLUS term .)
    RBRACKET        reduce using rule 33 (expression -> CHARACTER PLUS term .)
    COMMA           reduce using rule 33 (expression -> CHARACTER PLUS term .)
    IS_LESS_THAN    reduce using rule 33 (expression -> CHARACTER PLUS term .)
    IS_EQUAL_TO     reduce using rule 33 (expression -> CHARACTER PLUS term .)
    IS_GREATER_THAN reduce using rule 33 (expression -> CHARACTER PLUS term .)
    IS_NOT_EQUAL_TO reduce using rule 33 (expression -> CHARACTER PLUS term .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 33 (expression -> CHARACTER PLUS term .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 33 (expression -> CHARACTER PLUS term .)
    LET             reduce using rule 33 (expression -> CHARACTER PLUS term .)
    IF              reduce using rule 33 (expression -> CHARACTER PLUS term .)
    FOR             reduce using rule 33 (expression -> CHARACTER PLUS term .)
    WHILE           reduce using rule 33 (expression -> CHARACTER PLUS term .)
    DO              reduce using rule 33 (expression -> CHARACTER PLUS term .)
    FUNCTION        reduce using rule 33 (expression -> CHARACTER PLUS term .)
    SHOW            reduce using rule 33 (expression -> CHARACTER PLUS term .)
    ELSE            reduce using rule 33 (expression -> CHARACTER PLUS term .)
    END             reduce using rule 33 (expression -> CHARACTER PLUS term .)
    RBRACE          reduce using rule 33 (expression -> CHARACTER PLUS term .)
    THEN            reduce using rule 33 (expression -> CHARACTER PLUS term .)
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34


state 82

    (63) list -> LBRACKET expression_list RBRACKET .

    PLUS            reduce using rule 63 (list -> LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 63 (list -> LBRACKET expression_list RBRACKET .)
    POWER           reduce using rule 63 (list -> LBRACKET expression_list RBRACKET .)
    $end            reduce using rule 63 (list -> LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 63 (list -> LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 63 (list -> LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 63 (list -> LBRACKET expression_list RBRACKET .)
    IS_LESS_THAN    reduce using rule 63 (list -> LBRACKET expression_list RBRACKET .)
    IS_EQUAL_TO     reduce using rule 63 (list -> LBRACKET expression_list RBRACKET .)
    IS_GREATER_THAN reduce using rule 63 (list -> LBRACKET expression_list RBRACKET .)
    IS_NOT_EQUAL_TO reduce using rule 63 (list -> LBRACKET expression_list RBRACKET .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 63 (list -> LBRACKET expression_list RBRACKET .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 63 (list -> LBRACKET expression_list RBRACKET .)
    LET             reduce using rule 63 (list -> LBRACKET expression_list RBRACKET .)
    IF              reduce using rule 63 (list -> LBRACKET expression_list RBRACKET .)
    FOR             reduce using rule 63 (list -> LBRACKET expression_list RBRACKET .)
    WHILE           reduce using rule 63 (list -> LBRACKET expression_list RBRACKET .)
    DO              reduce using rule 63 (list -> LBRACKET expression_list RBRACKET .)
    FUNCTION        reduce using rule 63 (list -> LBRACKET expression_list RBRACKET .)
    SHOW            reduce using rule 63 (list -> LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 63 (list -> LBRACKET expression_list RBRACKET .)
    END             reduce using rule 63 (list -> LBRACKET expression_list RBRACKET .)
    RBRACE          reduce using rule 63 (list -> LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 63 (list -> LBRACKET expression_list RBRACKET .)


state 83

    (66) expression_list -> expression_list COMMA . expression
    (25) expression -> . expression PLUS term
    (26) expression -> . expression MINUS term
    (27) expression -> . term
    (28) expression -> . expression POWER term
    (29) expression -> . NOT expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . NUMBER MINUS term
    (32) expression -> . REAL MINUS term
    (33) expression -> . CHARACTER PLUS term
    (34) expression -> . list
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) term -> . IDENTIFIER
    (38) term -> . factor
    (63) list -> . LBRACKET expression_list RBRACKET
    (64) list -> . empty
    (39) factor -> . NUMBER
    (40) factor -> . LPAREN expression RPAREN
    (41) factor -> . REAL
    (74) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    PLUS            reduce using rule 74 (empty -> .)
    MINUS           reduce using rule 74 (empty -> .)
    POWER           reduce using rule 74 (empty -> .)
    RBRACKET        reduce using rule 74 (empty -> .)
    COMMA           reduce using rule 74 (empty -> .)
    LET             reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    FOR             reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    DO              reduce using rule 74 (empty -> .)
    FUNCTION        reduce using rule 74 (empty -> .)
    SHOW            reduce using rule 74 (empty -> .)
    $end            reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)
    END             reduce using rule 74 (empty -> .)
    RBRACE          reduce using rule 74 (empty -> .)

    expression                     shift and go to state 98
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 84

    (11) assignment -> LET IDENTIFIER EQUAL . expression
    (12) assignment -> LET IDENTIFIER EQUAL . expression_list
    (13) assignment -> LET IDENTIFIER EQUAL . REAL
    (14) assignment -> LET IDENTIFIER EQUAL . NUMBER
    (42) input -> LET IDENTIFIER EQUAL . SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN
    (25) expression -> . expression PLUS term
    (26) expression -> . expression MINUS term
    (27) expression -> . term
    (28) expression -> . expression POWER term
    (29) expression -> . NOT expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . NUMBER MINUS term
    (32) expression -> . REAL MINUS term
    (33) expression -> . CHARACTER PLUS term
    (34) expression -> . list
    (65) expression_list -> . expression
    (66) expression_list -> . expression_list COMMA expression
    (67) expression_list -> . empty
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) term -> . IDENTIFIER
    (38) term -> . factor
    (63) list -> . LBRACKET expression_list RBRACKET
    (64) list -> . empty
    (74) empty -> .
    (39) factor -> . NUMBER
    (40) factor -> . LPAREN expression RPAREN
    (41) factor -> . REAL

  ! shift/reduce conflict for SHOW resolved as shift
    REAL            shift and go to state 101
    NUMBER          shift and go to state 102
    SHOW            shift and go to state 103
    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    COMMA           reduce using rule 74 (empty -> .)
    LET             reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    FOR             reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    DO              reduce using rule 74 (empty -> .)
    FUNCTION        reduce using rule 74 (empty -> .)
    $end            reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)
    END             reduce using rule 74 (empty -> .)
    RBRACE          reduce using rule 74 (empty -> .)
    PLUS            reduce using rule 74 (empty -> .)
    MINUS           reduce using rule 74 (empty -> .)
    POWER           reduce using rule 74 (empty -> .)

  ! SHOW            [ reduce using rule 74 (empty -> .) ]

    expression                     shift and go to state 99
    expression_list                shift and go to state 100
    term                           shift and go to state 5
    list                           shift and go to state 11
    empty                          shift and go to state 42
    factor                         shift and go to state 18

state 85

    (16) conditional -> IF condition THEN . statements else_statements_opt END
    (3) statements -> . statements statement
    (4) statements -> . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (12) assignment -> . LET IDENTIFIER EQUAL expression_list
    (13) assignment -> . LET IDENTIFIER EQUAL REAL
    (14) assignment -> . LET IDENTIFIER EQUAL NUMBER
    (16) conditional -> . IF condition THEN statements else_statements_opt END
    (60) loop -> . FOR IDENTIFIER IN list DO statements
    (61) loop -> . WHILE condition DO statements
    (62) loop -> . DO statements WHILE condition
    (68) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (43) display -> . SHOW expression
    (44) display -> . SHOW STRING_LITERAL
    (45) display -> . SHOW IDENTIFIER
    (46) display -> . SHOW NUMBER
    (47) display -> . SHOW REAL
    (48) display -> . SHOW CHARACTER
    (49) display -> . SHOW list
    (50) display -> . SHOW function
    (51) display -> . SHOW conditional
    (52) display -> . SHOW loop
    (53) display -> . SHOW input
    (54) display -> . SHOW comment
    (55) display -> . SHOW program
    (56) display -> . SHOW statements
    (57) display -> . SHOW expression_list
    (58) display -> . SHOW assignment
    (59) display -> . SHOW display
    (42) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    LET             shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 26
    DO              shift and go to state 25
    FUNCTION        shift and go to state 27
    SHOW            shift and go to state 28

    statements                     shift and go to state 104
    statement                      shift and go to state 4
    assignment                     shift and go to state 12
    conditional                    shift and go to state 13
    loop                           shift and go to state 14
    function                       shift and go to state 15
    display                        shift and go to state 16
    input                          shift and go to state 17

state 86

    (19) condition -> expression IS_LESS_THAN . expression
    (25) expression -> . expression PLUS term
    (26) expression -> . expression MINUS term
    (27) expression -> . term
    (28) expression -> . expression POWER term
    (29) expression -> . NOT expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . NUMBER MINUS term
    (32) expression -> . REAL MINUS term
    (33) expression -> . CHARACTER PLUS term
    (34) expression -> . list
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) term -> . IDENTIFIER
    (38) term -> . factor
    (63) list -> . LBRACKET expression_list RBRACKET
    (64) list -> . empty
    (39) factor -> . NUMBER
    (40) factor -> . LPAREN expression RPAREN
    (41) factor -> . REAL
    (74) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    PLUS            reduce using rule 74 (empty -> .)
    MINUS           reduce using rule 74 (empty -> .)
    POWER           reduce using rule 74 (empty -> .)
    THEN            reduce using rule 74 (empty -> .)
    DO              reduce using rule 74 (empty -> .)
    LET             reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    FOR             reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    FUNCTION        reduce using rule 74 (empty -> .)
    SHOW            reduce using rule 74 (empty -> .)
    $end            reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)
    END             reduce using rule 74 (empty -> .)
    RBRACE          reduce using rule 74 (empty -> .)

    expression                     shift and go to state 105
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 87

    (20) condition -> expression IS_EQUAL_TO . expression
    (25) expression -> . expression PLUS term
    (26) expression -> . expression MINUS term
    (27) expression -> . term
    (28) expression -> . expression POWER term
    (29) expression -> . NOT expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . NUMBER MINUS term
    (32) expression -> . REAL MINUS term
    (33) expression -> . CHARACTER PLUS term
    (34) expression -> . list
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) term -> . IDENTIFIER
    (38) term -> . factor
    (63) list -> . LBRACKET expression_list RBRACKET
    (64) list -> . empty
    (39) factor -> . NUMBER
    (40) factor -> . LPAREN expression RPAREN
    (41) factor -> . REAL
    (74) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    PLUS            reduce using rule 74 (empty -> .)
    MINUS           reduce using rule 74 (empty -> .)
    POWER           reduce using rule 74 (empty -> .)
    THEN            reduce using rule 74 (empty -> .)
    DO              reduce using rule 74 (empty -> .)
    LET             reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    FOR             reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    FUNCTION        reduce using rule 74 (empty -> .)
    SHOW            reduce using rule 74 (empty -> .)
    $end            reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)
    END             reduce using rule 74 (empty -> .)
    RBRACE          reduce using rule 74 (empty -> .)

    expression                     shift and go to state 106
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 88

    (21) condition -> expression IS_GREATER_THAN . expression
    (25) expression -> . expression PLUS term
    (26) expression -> . expression MINUS term
    (27) expression -> . term
    (28) expression -> . expression POWER term
    (29) expression -> . NOT expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . NUMBER MINUS term
    (32) expression -> . REAL MINUS term
    (33) expression -> . CHARACTER PLUS term
    (34) expression -> . list
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) term -> . IDENTIFIER
    (38) term -> . factor
    (63) list -> . LBRACKET expression_list RBRACKET
    (64) list -> . empty
    (39) factor -> . NUMBER
    (40) factor -> . LPAREN expression RPAREN
    (41) factor -> . REAL
    (74) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    PLUS            reduce using rule 74 (empty -> .)
    MINUS           reduce using rule 74 (empty -> .)
    POWER           reduce using rule 74 (empty -> .)
    THEN            reduce using rule 74 (empty -> .)
    DO              reduce using rule 74 (empty -> .)
    LET             reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    FOR             reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    FUNCTION        reduce using rule 74 (empty -> .)
    SHOW            reduce using rule 74 (empty -> .)
    $end            reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)
    END             reduce using rule 74 (empty -> .)
    RBRACE          reduce using rule 74 (empty -> .)

    expression                     shift and go to state 107
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 89

    (22) condition -> expression IS_NOT_EQUAL_TO . expression
    (25) expression -> . expression PLUS term
    (26) expression -> . expression MINUS term
    (27) expression -> . term
    (28) expression -> . expression POWER term
    (29) expression -> . NOT expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . NUMBER MINUS term
    (32) expression -> . REAL MINUS term
    (33) expression -> . CHARACTER PLUS term
    (34) expression -> . list
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) term -> . IDENTIFIER
    (38) term -> . factor
    (63) list -> . LBRACKET expression_list RBRACKET
    (64) list -> . empty
    (39) factor -> . NUMBER
    (40) factor -> . LPAREN expression RPAREN
    (41) factor -> . REAL
    (74) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    PLUS            reduce using rule 74 (empty -> .)
    MINUS           reduce using rule 74 (empty -> .)
    POWER           reduce using rule 74 (empty -> .)
    THEN            reduce using rule 74 (empty -> .)
    DO              reduce using rule 74 (empty -> .)
    LET             reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    FOR             reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    FUNCTION        reduce using rule 74 (empty -> .)
    SHOW            reduce using rule 74 (empty -> .)
    $end            reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)
    END             reduce using rule 74 (empty -> .)
    RBRACE          reduce using rule 74 (empty -> .)

    expression                     shift and go to state 108
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 90

    (23) condition -> expression GREATER_THAN_OR_EQUAL_TO . expression
    (25) expression -> . expression PLUS term
    (26) expression -> . expression MINUS term
    (27) expression -> . term
    (28) expression -> . expression POWER term
    (29) expression -> . NOT expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . NUMBER MINUS term
    (32) expression -> . REAL MINUS term
    (33) expression -> . CHARACTER PLUS term
    (34) expression -> . list
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) term -> . IDENTIFIER
    (38) term -> . factor
    (63) list -> . LBRACKET expression_list RBRACKET
    (64) list -> . empty
    (39) factor -> . NUMBER
    (40) factor -> . LPAREN expression RPAREN
    (41) factor -> . REAL
    (74) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    PLUS            reduce using rule 74 (empty -> .)
    MINUS           reduce using rule 74 (empty -> .)
    POWER           reduce using rule 74 (empty -> .)
    THEN            reduce using rule 74 (empty -> .)
    DO              reduce using rule 74 (empty -> .)
    LET             reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    FOR             reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    FUNCTION        reduce using rule 74 (empty -> .)
    SHOW            reduce using rule 74 (empty -> .)
    $end            reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)
    END             reduce using rule 74 (empty -> .)
    RBRACE          reduce using rule 74 (empty -> .)

    expression                     shift and go to state 109
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 91

    (24) condition -> expression LESS_THAN_OR_EQUAL_TO . expression
    (25) expression -> . expression PLUS term
    (26) expression -> . expression MINUS term
    (27) expression -> . term
    (28) expression -> . expression POWER term
    (29) expression -> . NOT expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . NUMBER MINUS term
    (32) expression -> . REAL MINUS term
    (33) expression -> . CHARACTER PLUS term
    (34) expression -> . list
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) term -> . IDENTIFIER
    (38) term -> . factor
    (63) list -> . LBRACKET expression_list RBRACKET
    (64) list -> . empty
    (39) factor -> . NUMBER
    (40) factor -> . LPAREN expression RPAREN
    (41) factor -> . REAL
    (74) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    PLUS            reduce using rule 74 (empty -> .)
    MINUS           reduce using rule 74 (empty -> .)
    POWER           reduce using rule 74 (empty -> .)
    THEN            reduce using rule 74 (empty -> .)
    DO              reduce using rule 74 (empty -> .)
    LET             reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    FOR             reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    FUNCTION        reduce using rule 74 (empty -> .)
    SHOW            reduce using rule 74 (empty -> .)
    $end            reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)
    END             reduce using rule 74 (empty -> .)
    RBRACE          reduce using rule 74 (empty -> .)

    expression                     shift and go to state 110
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 92

    (60) loop -> FOR IDENTIFIER IN . list DO statements
    (63) list -> . LBRACKET expression_list RBRACKET
    (64) list -> . empty
    (74) empty -> .

    LBRACKET        shift and go to state 20
    DO              reduce using rule 74 (empty -> .)

    list                           shift and go to state 111
    empty                          shift and go to state 21

state 93

    (62) loop -> DO statements WHILE . condition
    (61) loop -> WHILE . condition DO statements
    (19) condition -> . expression IS_LESS_THAN expression
    (20) condition -> . expression IS_EQUAL_TO expression
    (21) condition -> . expression IS_GREATER_THAN expression
    (22) condition -> . expression IS_NOT_EQUAL_TO expression
    (23) condition -> . expression GREATER_THAN_OR_EQUAL_TO expression
    (24) condition -> . expression LESS_THAN_OR_EQUAL_TO expression
    (25) expression -> . expression PLUS term
    (26) expression -> . expression MINUS term
    (27) expression -> . term
    (28) expression -> . expression POWER term
    (29) expression -> . NOT expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . NUMBER MINUS term
    (32) expression -> . REAL MINUS term
    (33) expression -> . CHARACTER PLUS term
    (34) expression -> . list
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) term -> . IDENTIFIER
    (38) term -> . factor
    (63) list -> . LBRACKET expression_list RBRACKET
    (64) list -> . empty
    (39) factor -> . NUMBER
    (40) factor -> . LPAREN expression RPAREN
    (41) factor -> . REAL
    (74) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    IS_LESS_THAN    reduce using rule 74 (empty -> .)
    IS_EQUAL_TO     reduce using rule 74 (empty -> .)
    IS_GREATER_THAN reduce using rule 74 (empty -> .)
    IS_NOT_EQUAL_TO reduce using rule 74 (empty -> .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 74 (empty -> .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 74 (empty -> .)
    PLUS            reduce using rule 74 (empty -> .)
    MINUS           reduce using rule 74 (empty -> .)
    POWER           reduce using rule 74 (empty -> .)

    condition                      shift and go to state 112
    expression                     shift and go to state 45
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 94

    (61) loop -> WHILE condition DO . statements
    (3) statements -> . statements statement
    (4) statements -> . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (12) assignment -> . LET IDENTIFIER EQUAL expression_list
    (13) assignment -> . LET IDENTIFIER EQUAL REAL
    (14) assignment -> . LET IDENTIFIER EQUAL NUMBER
    (16) conditional -> . IF condition THEN statements else_statements_opt END
    (60) loop -> . FOR IDENTIFIER IN list DO statements
    (61) loop -> . WHILE condition DO statements
    (62) loop -> . DO statements WHILE condition
    (68) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (43) display -> . SHOW expression
    (44) display -> . SHOW STRING_LITERAL
    (45) display -> . SHOW IDENTIFIER
    (46) display -> . SHOW NUMBER
    (47) display -> . SHOW REAL
    (48) display -> . SHOW CHARACTER
    (49) display -> . SHOW list
    (50) display -> . SHOW function
    (51) display -> . SHOW conditional
    (52) display -> . SHOW loop
    (53) display -> . SHOW input
    (54) display -> . SHOW comment
    (55) display -> . SHOW program
    (56) display -> . SHOW statements
    (57) display -> . SHOW expression_list
    (58) display -> . SHOW assignment
    (59) display -> . SHOW display
    (42) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    LET             shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 26
    DO              shift and go to state 25
    FUNCTION        shift and go to state 27
    SHOW            shift and go to state 28

    statements                     shift and go to state 113
    statement                      shift and go to state 4
    assignment                     shift and go to state 12
    conditional                    shift and go to state 13
    loop                           shift and go to state 14
    function                       shift and go to state 15
    display                        shift and go to state 16
    input                          shift and go to state 17

state 95

    (68) function -> FUNCTION IDENTIFIER LPAREN . parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (69) parameters -> . IDENTIFIER
    (70) parameters -> . parameters COMMA IDENTIFIER
    (71) parameters -> . empty
    (74) empty -> .

    IDENTIFIER      shift and go to state 114
    RPAREN          reduce using rule 74 (empty -> .)
    COMMA           reduce using rule 74 (empty -> .)

    parameters                     shift and go to state 115
    empty                          shift and go to state 116

state 96

    (42) input -> LET IDENTIFIER . EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN
    (11) assignment -> LET IDENTIFIER . EQUAL expression
    (12) assignment -> LET IDENTIFIER . EQUAL expression_list
    (13) assignment -> LET IDENTIFIER . EQUAL REAL
    (14) assignment -> LET IDENTIFIER . EQUAL NUMBER

    EQUAL           shift and go to state 117


state 97

    (40) factor -> LPAREN expression . RPAREN
    (25) expression -> expression . PLUS term
    (26) expression -> expression . MINUS term
    (28) expression -> expression . POWER term

    RPAREN          shift and go to state 118
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    POWER           shift and go to state 32


state 98

    (66) expression_list -> expression_list COMMA expression .
    (25) expression -> expression . PLUS term
    (26) expression -> expression . MINUS term
    (28) expression -> expression . POWER term

    RBRACKET        reduce using rule 66 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 66 (expression_list -> expression_list COMMA expression .)
    LET             reduce using rule 66 (expression_list -> expression_list COMMA expression .)
    IF              reduce using rule 66 (expression_list -> expression_list COMMA expression .)
    FOR             reduce using rule 66 (expression_list -> expression_list COMMA expression .)
    WHILE           reduce using rule 66 (expression_list -> expression_list COMMA expression .)
    DO              reduce using rule 66 (expression_list -> expression_list COMMA expression .)
    FUNCTION        reduce using rule 66 (expression_list -> expression_list COMMA expression .)
    SHOW            reduce using rule 66 (expression_list -> expression_list COMMA expression .)
    $end            reduce using rule 66 (expression_list -> expression_list COMMA expression .)
    ELSE            reduce using rule 66 (expression_list -> expression_list COMMA expression .)
    END             reduce using rule 66 (expression_list -> expression_list COMMA expression .)
    RBRACE          reduce using rule 66 (expression_list -> expression_list COMMA expression .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    POWER           shift and go to state 32


state 99

    (11) assignment -> LET IDENTIFIER EQUAL expression .
    (25) expression -> expression . PLUS term
    (26) expression -> expression . MINUS term
    (28) expression -> expression . POWER term
    (65) expression_list -> expression .

  ! reduce/reduce conflict for LET resolved using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
  ! reduce/reduce conflict for IF resolved using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
  ! reduce/reduce conflict for FOR resolved using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
  ! reduce/reduce conflict for DO resolved using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
  ! reduce/reduce conflict for SHOW resolved using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
  ! reduce/reduce conflict for $end resolved using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
  ! reduce/reduce conflict for END resolved using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
  ! reduce/reduce conflict for RBRACE resolved using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    LET             reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    IF              reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    FOR             reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    WHILE           reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    DO              reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    FUNCTION        reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    SHOW            reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    $end            reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    ELSE            reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    END             reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    RBRACE          reduce using rule 11 (assignment -> LET IDENTIFIER EQUAL expression .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    POWER           shift and go to state 32
    COMMA           reduce using rule 65 (expression_list -> expression .)

  ! LET             [ reduce using rule 65 (expression_list -> expression .) ]
  ! IF              [ reduce using rule 65 (expression_list -> expression .) ]
  ! FOR             [ reduce using rule 65 (expression_list -> expression .) ]
  ! WHILE           [ reduce using rule 65 (expression_list -> expression .) ]
  ! DO              [ reduce using rule 65 (expression_list -> expression .) ]
  ! FUNCTION        [ reduce using rule 65 (expression_list -> expression .) ]
  ! SHOW            [ reduce using rule 65 (expression_list -> expression .) ]
  ! $end            [ reduce using rule 65 (expression_list -> expression .) ]
  ! ELSE            [ reduce using rule 65 (expression_list -> expression .) ]
  ! END             [ reduce using rule 65 (expression_list -> expression .) ]
  ! RBRACE          [ reduce using rule 65 (expression_list -> expression .) ]


state 100

    (12) assignment -> LET IDENTIFIER EQUAL expression_list .
    (66) expression_list -> expression_list . COMMA expression

    LET             reduce using rule 12 (assignment -> LET IDENTIFIER EQUAL expression_list .)
    IF              reduce using rule 12 (assignment -> LET IDENTIFIER EQUAL expression_list .)
    FOR             reduce using rule 12 (assignment -> LET IDENTIFIER EQUAL expression_list .)
    WHILE           reduce using rule 12 (assignment -> LET IDENTIFIER EQUAL expression_list .)
    DO              reduce using rule 12 (assignment -> LET IDENTIFIER EQUAL expression_list .)
    FUNCTION        reduce using rule 12 (assignment -> LET IDENTIFIER EQUAL expression_list .)
    SHOW            reduce using rule 12 (assignment -> LET IDENTIFIER EQUAL expression_list .)
    $end            reduce using rule 12 (assignment -> LET IDENTIFIER EQUAL expression_list .)
    ELSE            reduce using rule 12 (assignment -> LET IDENTIFIER EQUAL expression_list .)
    END             reduce using rule 12 (assignment -> LET IDENTIFIER EQUAL expression_list .)
    RBRACE          reduce using rule 12 (assignment -> LET IDENTIFIER EQUAL expression_list .)
    COMMA           shift and go to state 83


state 101

    (13) assignment -> LET IDENTIFIER EQUAL REAL .
    (32) expression -> REAL . MINUS term
    (41) factor -> REAL .

  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for LET resolved using rule 13 (assignment -> LET IDENTIFIER EQUAL REAL .)
  ! reduce/reduce conflict for IF resolved using rule 13 (assignment -> LET IDENTIFIER EQUAL REAL .)
  ! reduce/reduce conflict for FOR resolved using rule 13 (assignment -> LET IDENTIFIER EQUAL REAL .)
  ! reduce/reduce conflict for WHILE resolved using rule 13 (assignment -> LET IDENTIFIER EQUAL REAL .)
  ! reduce/reduce conflict for DO resolved using rule 13 (assignment -> LET IDENTIFIER EQUAL REAL .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 13 (assignment -> LET IDENTIFIER EQUAL REAL .)
  ! reduce/reduce conflict for SHOW resolved using rule 13 (assignment -> LET IDENTIFIER EQUAL REAL .)
  ! reduce/reduce conflict for $end resolved using rule 13 (assignment -> LET IDENTIFIER EQUAL REAL .)
  ! reduce/reduce conflict for ELSE resolved using rule 13 (assignment -> LET IDENTIFIER EQUAL REAL .)
  ! reduce/reduce conflict for END resolved using rule 13 (assignment -> LET IDENTIFIER EQUAL REAL .)
  ! reduce/reduce conflict for RBRACE resolved using rule 13 (assignment -> LET IDENTIFIER EQUAL REAL .)
    LET             reduce using rule 13 (assignment -> LET IDENTIFIER EQUAL REAL .)
    IF              reduce using rule 13 (assignment -> LET IDENTIFIER EQUAL REAL .)
    FOR             reduce using rule 13 (assignment -> LET IDENTIFIER EQUAL REAL .)
    WHILE           reduce using rule 13 (assignment -> LET IDENTIFIER EQUAL REAL .)
    DO              reduce using rule 13 (assignment -> LET IDENTIFIER EQUAL REAL .)
    FUNCTION        reduce using rule 13 (assignment -> LET IDENTIFIER EQUAL REAL .)
    SHOW            reduce using rule 13 (assignment -> LET IDENTIFIER EQUAL REAL .)
    $end            reduce using rule 13 (assignment -> LET IDENTIFIER EQUAL REAL .)
    ELSE            reduce using rule 13 (assignment -> LET IDENTIFIER EQUAL REAL .)
    END             reduce using rule 13 (assignment -> LET IDENTIFIER EQUAL REAL .)
    RBRACE          reduce using rule 13 (assignment -> LET IDENTIFIER EQUAL REAL .)
    MINUS           shift and go to state 38
    TIMES           reduce using rule 41 (factor -> REAL .)
    DIVIDE          reduce using rule 41 (factor -> REAL .)
    PLUS            reduce using rule 41 (factor -> REAL .)
    POWER           reduce using rule 41 (factor -> REAL .)
    COMMA           reduce using rule 41 (factor -> REAL .)

  ! MINUS           [ reduce using rule 41 (factor -> REAL .) ]
  ! LET             [ reduce using rule 41 (factor -> REAL .) ]
  ! IF              [ reduce using rule 41 (factor -> REAL .) ]
  ! FOR             [ reduce using rule 41 (factor -> REAL .) ]
  ! WHILE           [ reduce using rule 41 (factor -> REAL .) ]
  ! DO              [ reduce using rule 41 (factor -> REAL .) ]
  ! FUNCTION        [ reduce using rule 41 (factor -> REAL .) ]
  ! SHOW            [ reduce using rule 41 (factor -> REAL .) ]
  ! $end            [ reduce using rule 41 (factor -> REAL .) ]
  ! ELSE            [ reduce using rule 41 (factor -> REAL .) ]
  ! END             [ reduce using rule 41 (factor -> REAL .) ]
  ! RBRACE          [ reduce using rule 41 (factor -> REAL .) ]


state 102

    (14) assignment -> LET IDENTIFIER EQUAL NUMBER .
    (31) expression -> NUMBER . MINUS term
    (39) factor -> NUMBER .

  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for LET resolved using rule 14 (assignment -> LET IDENTIFIER EQUAL NUMBER .)
  ! reduce/reduce conflict for IF resolved using rule 14 (assignment -> LET IDENTIFIER EQUAL NUMBER .)
  ! reduce/reduce conflict for FOR resolved using rule 14 (assignment -> LET IDENTIFIER EQUAL NUMBER .)
  ! reduce/reduce conflict for WHILE resolved using rule 14 (assignment -> LET IDENTIFIER EQUAL NUMBER .)
  ! reduce/reduce conflict for DO resolved using rule 14 (assignment -> LET IDENTIFIER EQUAL NUMBER .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 14 (assignment -> LET IDENTIFIER EQUAL NUMBER .)
  ! reduce/reduce conflict for SHOW resolved using rule 14 (assignment -> LET IDENTIFIER EQUAL NUMBER .)
  ! reduce/reduce conflict for $end resolved using rule 14 (assignment -> LET IDENTIFIER EQUAL NUMBER .)
  ! reduce/reduce conflict for ELSE resolved using rule 14 (assignment -> LET IDENTIFIER EQUAL NUMBER .)
  ! reduce/reduce conflict for END resolved using rule 14 (assignment -> LET IDENTIFIER EQUAL NUMBER .)
  ! reduce/reduce conflict for RBRACE resolved using rule 14 (assignment -> LET IDENTIFIER EQUAL NUMBER .)
    LET             reduce using rule 14 (assignment -> LET IDENTIFIER EQUAL NUMBER .)
    IF              reduce using rule 14 (assignment -> LET IDENTIFIER EQUAL NUMBER .)
    FOR             reduce using rule 14 (assignment -> LET IDENTIFIER EQUAL NUMBER .)
    WHILE           reduce using rule 14 (assignment -> LET IDENTIFIER EQUAL NUMBER .)
    DO              reduce using rule 14 (assignment -> LET IDENTIFIER EQUAL NUMBER .)
    FUNCTION        reduce using rule 14 (assignment -> LET IDENTIFIER EQUAL NUMBER .)
    SHOW            reduce using rule 14 (assignment -> LET IDENTIFIER EQUAL NUMBER .)
    $end            reduce using rule 14 (assignment -> LET IDENTIFIER EQUAL NUMBER .)
    ELSE            reduce using rule 14 (assignment -> LET IDENTIFIER EQUAL NUMBER .)
    END             reduce using rule 14 (assignment -> LET IDENTIFIER EQUAL NUMBER .)
    RBRACE          reduce using rule 14 (assignment -> LET IDENTIFIER EQUAL NUMBER .)
    MINUS           shift and go to state 37
    TIMES           reduce using rule 39 (factor -> NUMBER .)
    DIVIDE          reduce using rule 39 (factor -> NUMBER .)
    PLUS            reduce using rule 39 (factor -> NUMBER .)
    POWER           reduce using rule 39 (factor -> NUMBER .)
    COMMA           reduce using rule 39 (factor -> NUMBER .)

  ! MINUS           [ reduce using rule 39 (factor -> NUMBER .) ]
  ! LET             [ reduce using rule 39 (factor -> NUMBER .) ]
  ! IF              [ reduce using rule 39 (factor -> NUMBER .) ]
  ! FOR             [ reduce using rule 39 (factor -> NUMBER .) ]
  ! WHILE           [ reduce using rule 39 (factor -> NUMBER .) ]
  ! DO              [ reduce using rule 39 (factor -> NUMBER .) ]
  ! FUNCTION        [ reduce using rule 39 (factor -> NUMBER .) ]
  ! SHOW            [ reduce using rule 39 (factor -> NUMBER .) ]
  ! $end            [ reduce using rule 39 (factor -> NUMBER .) ]
  ! ELSE            [ reduce using rule 39 (factor -> NUMBER .) ]
  ! END             [ reduce using rule 39 (factor -> NUMBER .) ]
  ! RBRACE          [ reduce using rule 39 (factor -> NUMBER .) ]


state 103

    (42) input -> LET IDENTIFIER EQUAL SHOW . IDENTIFIER LPAREN STRING_LITERAL RPAREN

    IDENTIFIER      shift and go to state 119


state 104

    (16) conditional -> IF condition THEN statements . else_statements_opt END
    (3) statements -> statements . statement
    (17) else_statements_opt -> . ELSE statements
    (18) else_statements_opt -> . empty
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (74) empty -> .
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (12) assignment -> . LET IDENTIFIER EQUAL expression_list
    (13) assignment -> . LET IDENTIFIER EQUAL REAL
    (14) assignment -> . LET IDENTIFIER EQUAL NUMBER
    (16) conditional -> . IF condition THEN statements else_statements_opt END
    (60) loop -> . FOR IDENTIFIER IN list DO statements
    (61) loop -> . WHILE condition DO statements
    (62) loop -> . DO statements WHILE condition
    (68) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (43) display -> . SHOW expression
    (44) display -> . SHOW STRING_LITERAL
    (45) display -> . SHOW IDENTIFIER
    (46) display -> . SHOW NUMBER
    (47) display -> . SHOW REAL
    (48) display -> . SHOW CHARACTER
    (49) display -> . SHOW list
    (50) display -> . SHOW function
    (51) display -> . SHOW conditional
    (52) display -> . SHOW loop
    (53) display -> . SHOW input
    (54) display -> . SHOW comment
    (55) display -> . SHOW program
    (56) display -> . SHOW statements
    (57) display -> . SHOW expression_list
    (58) display -> . SHOW assignment
    (59) display -> . SHOW display
    (42) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    ELSE            shift and go to state 121
    END             reduce using rule 74 (empty -> .)
    LET             shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 26
    DO              shift and go to state 25
    FUNCTION        shift and go to state 27
    SHOW            shift and go to state 28

    else_statements_opt            shift and go to state 120
    statement                      shift and go to state 29
    empty                          shift and go to state 122
    assignment                     shift and go to state 12
    conditional                    shift and go to state 13
    loop                           shift and go to state 14
    function                       shift and go to state 15
    display                        shift and go to state 16
    input                          shift and go to state 17

state 105

    (19) condition -> expression IS_LESS_THAN expression .
    (25) expression -> expression . PLUS term
    (26) expression -> expression . MINUS term
    (28) expression -> expression . POWER term

    THEN            reduce using rule 19 (condition -> expression IS_LESS_THAN expression .)
    DO              reduce using rule 19 (condition -> expression IS_LESS_THAN expression .)
    LET             reduce using rule 19 (condition -> expression IS_LESS_THAN expression .)
    IF              reduce using rule 19 (condition -> expression IS_LESS_THAN expression .)
    FOR             reduce using rule 19 (condition -> expression IS_LESS_THAN expression .)
    WHILE           reduce using rule 19 (condition -> expression IS_LESS_THAN expression .)
    FUNCTION        reduce using rule 19 (condition -> expression IS_LESS_THAN expression .)
    SHOW            reduce using rule 19 (condition -> expression IS_LESS_THAN expression .)
    $end            reduce using rule 19 (condition -> expression IS_LESS_THAN expression .)
    ELSE            reduce using rule 19 (condition -> expression IS_LESS_THAN expression .)
    END             reduce using rule 19 (condition -> expression IS_LESS_THAN expression .)
    RBRACE          reduce using rule 19 (condition -> expression IS_LESS_THAN expression .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    POWER           shift and go to state 32


state 106

    (20) condition -> expression IS_EQUAL_TO expression .
    (25) expression -> expression . PLUS term
    (26) expression -> expression . MINUS term
    (28) expression -> expression . POWER term

    THEN            reduce using rule 20 (condition -> expression IS_EQUAL_TO expression .)
    DO              reduce using rule 20 (condition -> expression IS_EQUAL_TO expression .)
    LET             reduce using rule 20 (condition -> expression IS_EQUAL_TO expression .)
    IF              reduce using rule 20 (condition -> expression IS_EQUAL_TO expression .)
    FOR             reduce using rule 20 (condition -> expression IS_EQUAL_TO expression .)
    WHILE           reduce using rule 20 (condition -> expression IS_EQUAL_TO expression .)
    FUNCTION        reduce using rule 20 (condition -> expression IS_EQUAL_TO expression .)
    SHOW            reduce using rule 20 (condition -> expression IS_EQUAL_TO expression .)
    $end            reduce using rule 20 (condition -> expression IS_EQUAL_TO expression .)
    ELSE            reduce using rule 20 (condition -> expression IS_EQUAL_TO expression .)
    END             reduce using rule 20 (condition -> expression IS_EQUAL_TO expression .)
    RBRACE          reduce using rule 20 (condition -> expression IS_EQUAL_TO expression .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    POWER           shift and go to state 32


state 107

    (21) condition -> expression IS_GREATER_THAN expression .
    (25) expression -> expression . PLUS term
    (26) expression -> expression . MINUS term
    (28) expression -> expression . POWER term

    THEN            reduce using rule 21 (condition -> expression IS_GREATER_THAN expression .)
    DO              reduce using rule 21 (condition -> expression IS_GREATER_THAN expression .)
    LET             reduce using rule 21 (condition -> expression IS_GREATER_THAN expression .)
    IF              reduce using rule 21 (condition -> expression IS_GREATER_THAN expression .)
    FOR             reduce using rule 21 (condition -> expression IS_GREATER_THAN expression .)
    WHILE           reduce using rule 21 (condition -> expression IS_GREATER_THAN expression .)
    FUNCTION        reduce using rule 21 (condition -> expression IS_GREATER_THAN expression .)
    SHOW            reduce using rule 21 (condition -> expression IS_GREATER_THAN expression .)
    $end            reduce using rule 21 (condition -> expression IS_GREATER_THAN expression .)
    ELSE            reduce using rule 21 (condition -> expression IS_GREATER_THAN expression .)
    END             reduce using rule 21 (condition -> expression IS_GREATER_THAN expression .)
    RBRACE          reduce using rule 21 (condition -> expression IS_GREATER_THAN expression .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    POWER           shift and go to state 32


state 108

    (22) condition -> expression IS_NOT_EQUAL_TO expression .
    (25) expression -> expression . PLUS term
    (26) expression -> expression . MINUS term
    (28) expression -> expression . POWER term

    THEN            reduce using rule 22 (condition -> expression IS_NOT_EQUAL_TO expression .)
    DO              reduce using rule 22 (condition -> expression IS_NOT_EQUAL_TO expression .)
    LET             reduce using rule 22 (condition -> expression IS_NOT_EQUAL_TO expression .)
    IF              reduce using rule 22 (condition -> expression IS_NOT_EQUAL_TO expression .)
    FOR             reduce using rule 22 (condition -> expression IS_NOT_EQUAL_TO expression .)
    WHILE           reduce using rule 22 (condition -> expression IS_NOT_EQUAL_TO expression .)
    FUNCTION        reduce using rule 22 (condition -> expression IS_NOT_EQUAL_TO expression .)
    SHOW            reduce using rule 22 (condition -> expression IS_NOT_EQUAL_TO expression .)
    $end            reduce using rule 22 (condition -> expression IS_NOT_EQUAL_TO expression .)
    ELSE            reduce using rule 22 (condition -> expression IS_NOT_EQUAL_TO expression .)
    END             reduce using rule 22 (condition -> expression IS_NOT_EQUAL_TO expression .)
    RBRACE          reduce using rule 22 (condition -> expression IS_NOT_EQUAL_TO expression .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    POWER           shift and go to state 32


state 109

    (23) condition -> expression GREATER_THAN_OR_EQUAL_TO expression .
    (25) expression -> expression . PLUS term
    (26) expression -> expression . MINUS term
    (28) expression -> expression . POWER term

    THEN            reduce using rule 23 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    DO              reduce using rule 23 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    LET             reduce using rule 23 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    IF              reduce using rule 23 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    FOR             reduce using rule 23 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    WHILE           reduce using rule 23 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    FUNCTION        reduce using rule 23 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    SHOW            reduce using rule 23 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    $end            reduce using rule 23 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    ELSE            reduce using rule 23 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    END             reduce using rule 23 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    RBRACE          reduce using rule 23 (condition -> expression GREATER_THAN_OR_EQUAL_TO expression .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    POWER           shift and go to state 32


state 110

    (24) condition -> expression LESS_THAN_OR_EQUAL_TO expression .
    (25) expression -> expression . PLUS term
    (26) expression -> expression . MINUS term
    (28) expression -> expression . POWER term

    THEN            reduce using rule 24 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    DO              reduce using rule 24 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    LET             reduce using rule 24 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    IF              reduce using rule 24 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    FOR             reduce using rule 24 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    WHILE           reduce using rule 24 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    FUNCTION        reduce using rule 24 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    SHOW            reduce using rule 24 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    $end            reduce using rule 24 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    ELSE            reduce using rule 24 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    END             reduce using rule 24 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    RBRACE          reduce using rule 24 (condition -> expression LESS_THAN_OR_EQUAL_TO expression .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    POWER           shift and go to state 32


state 111

    (60) loop -> FOR IDENTIFIER IN list . DO statements

    DO              shift and go to state 123


state 112

    (62) loop -> DO statements WHILE condition .
    (61) loop -> WHILE condition . DO statements

  ! shift/reduce conflict for DO resolved as shift
    LET             reduce using rule 62 (loop -> DO statements WHILE condition .)
    IF              reduce using rule 62 (loop -> DO statements WHILE condition .)
    FOR             reduce using rule 62 (loop -> DO statements WHILE condition .)
    WHILE           reduce using rule 62 (loop -> DO statements WHILE condition .)
    FUNCTION        reduce using rule 62 (loop -> DO statements WHILE condition .)
    SHOW            reduce using rule 62 (loop -> DO statements WHILE condition .)
    $end            reduce using rule 62 (loop -> DO statements WHILE condition .)
    ELSE            reduce using rule 62 (loop -> DO statements WHILE condition .)
    END             reduce using rule 62 (loop -> DO statements WHILE condition .)
    RBRACE          reduce using rule 62 (loop -> DO statements WHILE condition .)
    DO              shift and go to state 94

  ! DO              [ reduce using rule 62 (loop -> DO statements WHILE condition .) ]


state 113

    (61) loop -> WHILE condition DO statements .
    (3) statements -> statements . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (12) assignment -> . LET IDENTIFIER EQUAL expression_list
    (13) assignment -> . LET IDENTIFIER EQUAL REAL
    (14) assignment -> . LET IDENTIFIER EQUAL NUMBER
    (16) conditional -> . IF condition THEN statements else_statements_opt END
    (60) loop -> . FOR IDENTIFIER IN list DO statements
    (61) loop -> . WHILE condition DO statements
    (62) loop -> . DO statements WHILE condition
    (68) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (43) display -> . SHOW expression
    (44) display -> . SHOW STRING_LITERAL
    (45) display -> . SHOW IDENTIFIER
    (46) display -> . SHOW NUMBER
    (47) display -> . SHOW REAL
    (48) display -> . SHOW CHARACTER
    (49) display -> . SHOW list
    (50) display -> . SHOW function
    (51) display -> . SHOW conditional
    (52) display -> . SHOW loop
    (53) display -> . SHOW input
    (54) display -> . SHOW comment
    (55) display -> . SHOW program
    (56) display -> . SHOW statements
    (57) display -> . SHOW expression_list
    (58) display -> . SHOW assignment
    (59) display -> . SHOW display
    (42) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for SHOW resolved as shift
    $end            reduce using rule 61 (loop -> WHILE condition DO statements .)
    ELSE            reduce using rule 61 (loop -> WHILE condition DO statements .)
    END             reduce using rule 61 (loop -> WHILE condition DO statements .)
    RBRACE          reduce using rule 61 (loop -> WHILE condition DO statements .)
    LET             shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 26
    DO              shift and go to state 25
    FUNCTION        shift and go to state 27
    SHOW            shift and go to state 28

  ! LET             [ reduce using rule 61 (loop -> WHILE condition DO statements .) ]
  ! IF              [ reduce using rule 61 (loop -> WHILE condition DO statements .) ]
  ! FOR             [ reduce using rule 61 (loop -> WHILE condition DO statements .) ]
  ! WHILE           [ reduce using rule 61 (loop -> WHILE condition DO statements .) ]
  ! DO              [ reduce using rule 61 (loop -> WHILE condition DO statements .) ]
  ! FUNCTION        [ reduce using rule 61 (loop -> WHILE condition DO statements .) ]
  ! SHOW            [ reduce using rule 61 (loop -> WHILE condition DO statements .) ]

    statement                      shift and go to state 29
    assignment                     shift and go to state 12
    conditional                    shift and go to state 13
    loop                           shift and go to state 14
    function                       shift and go to state 15
    display                        shift and go to state 16
    input                          shift and go to state 17

state 114

    (69) parameters -> IDENTIFIER .

    RPAREN          reduce using rule 69 (parameters -> IDENTIFIER .)
    COMMA           reduce using rule 69 (parameters -> IDENTIFIER .)


state 115

    (68) function -> FUNCTION IDENTIFIER LPAREN parameters . RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (70) parameters -> parameters . COMMA IDENTIFIER

    RPAREN          shift and go to state 124
    COMMA           shift and go to state 125


state 116

    (71) parameters -> empty .

    RPAREN          reduce using rule 71 (parameters -> empty .)
    COMMA           reduce using rule 71 (parameters -> empty .)


state 117

    (42) input -> LET IDENTIFIER EQUAL . SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN
    (11) assignment -> LET IDENTIFIER EQUAL . expression
    (12) assignment -> LET IDENTIFIER EQUAL . expression_list
    (13) assignment -> LET IDENTIFIER EQUAL . REAL
    (14) assignment -> LET IDENTIFIER EQUAL . NUMBER
    (25) expression -> . expression PLUS term
    (26) expression -> . expression MINUS term
    (27) expression -> . term
    (28) expression -> . expression POWER term
    (29) expression -> . NOT expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . NUMBER MINUS term
    (32) expression -> . REAL MINUS term
    (33) expression -> . CHARACTER PLUS term
    (34) expression -> . list
    (65) expression_list -> . expression
    (66) expression_list -> . expression_list COMMA expression
    (67) expression_list -> . empty
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) term -> . IDENTIFIER
    (38) term -> . factor
    (63) list -> . LBRACKET expression_list RBRACKET
    (64) list -> . empty
    (74) empty -> .
    (39) factor -> . NUMBER
    (40) factor -> . LPAREN expression RPAREN
    (41) factor -> . REAL

  ! shift/reduce conflict for SHOW resolved as shift
    SHOW            shift and go to state 103
    REAL            shift and go to state 101
    NUMBER          shift and go to state 102
    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    COMMA           reduce using rule 74 (empty -> .)
    LET             reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    FOR             reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    DO              reduce using rule 74 (empty -> .)
    FUNCTION        reduce using rule 74 (empty -> .)
    $end            reduce using rule 74 (empty -> .)
    ELSE            reduce using rule 74 (empty -> .)
    END             reduce using rule 74 (empty -> .)
    RBRACE          reduce using rule 74 (empty -> .)
    PLUS            reduce using rule 74 (empty -> .)
    MINUS           reduce using rule 74 (empty -> .)
    POWER           reduce using rule 74 (empty -> .)

  ! SHOW            [ reduce using rule 74 (empty -> .) ]

    expression                     shift and go to state 99
    expression_list                shift and go to state 100
    term                           shift and go to state 5
    list                           shift and go to state 11
    empty                          shift and go to state 42
    factor                         shift and go to state 18

state 118

    (40) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    POWER           reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    IS_LESS_THAN    reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    IS_EQUAL_TO     reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    IS_GREATER_THAN reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    IS_NOT_EQUAL_TO reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    GREATER_THAN_OR_EQUAL_TO reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    LESS_THAN_OR_EQUAL_TO reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    LET             reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    FOR             reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    SHOW            reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 40 (factor -> LPAREN expression RPAREN .)


state 119

    (42) input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER . LPAREN STRING_LITERAL RPAREN

    LPAREN          shift and go to state 126


state 120

    (16) conditional -> IF condition THEN statements else_statements_opt . END

    END             shift and go to state 127


state 121

    (17) else_statements_opt -> ELSE . statements
    (3) statements -> . statements statement
    (4) statements -> . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (12) assignment -> . LET IDENTIFIER EQUAL expression_list
    (13) assignment -> . LET IDENTIFIER EQUAL REAL
    (14) assignment -> . LET IDENTIFIER EQUAL NUMBER
    (16) conditional -> . IF condition THEN statements else_statements_opt END
    (60) loop -> . FOR IDENTIFIER IN list DO statements
    (61) loop -> . WHILE condition DO statements
    (62) loop -> . DO statements WHILE condition
    (68) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (43) display -> . SHOW expression
    (44) display -> . SHOW STRING_LITERAL
    (45) display -> . SHOW IDENTIFIER
    (46) display -> . SHOW NUMBER
    (47) display -> . SHOW REAL
    (48) display -> . SHOW CHARACTER
    (49) display -> . SHOW list
    (50) display -> . SHOW function
    (51) display -> . SHOW conditional
    (52) display -> . SHOW loop
    (53) display -> . SHOW input
    (54) display -> . SHOW comment
    (55) display -> . SHOW program
    (56) display -> . SHOW statements
    (57) display -> . SHOW expression_list
    (58) display -> . SHOW assignment
    (59) display -> . SHOW display
    (42) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    LET             shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 26
    DO              shift and go to state 25
    FUNCTION        shift and go to state 27
    SHOW            shift and go to state 28

    statements                     shift and go to state 128
    statement                      shift and go to state 4
    assignment                     shift and go to state 12
    conditional                    shift and go to state 13
    loop                           shift and go to state 14
    function                       shift and go to state 15
    display                        shift and go to state 16
    input                          shift and go to state 17

state 122

    (18) else_statements_opt -> empty .

    END             reduce using rule 18 (else_statements_opt -> empty .)


state 123

    (60) loop -> FOR IDENTIFIER IN list DO . statements
    (3) statements -> . statements statement
    (4) statements -> . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (12) assignment -> . LET IDENTIFIER EQUAL expression_list
    (13) assignment -> . LET IDENTIFIER EQUAL REAL
    (14) assignment -> . LET IDENTIFIER EQUAL NUMBER
    (16) conditional -> . IF condition THEN statements else_statements_opt END
    (60) loop -> . FOR IDENTIFIER IN list DO statements
    (61) loop -> . WHILE condition DO statements
    (62) loop -> . DO statements WHILE condition
    (68) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (43) display -> . SHOW expression
    (44) display -> . SHOW STRING_LITERAL
    (45) display -> . SHOW IDENTIFIER
    (46) display -> . SHOW NUMBER
    (47) display -> . SHOW REAL
    (48) display -> . SHOW CHARACTER
    (49) display -> . SHOW list
    (50) display -> . SHOW function
    (51) display -> . SHOW conditional
    (52) display -> . SHOW loop
    (53) display -> . SHOW input
    (54) display -> . SHOW comment
    (55) display -> . SHOW program
    (56) display -> . SHOW statements
    (57) display -> . SHOW expression_list
    (58) display -> . SHOW assignment
    (59) display -> . SHOW display
    (42) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    LET             shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 26
    DO              shift and go to state 25
    FUNCTION        shift and go to state 27
    SHOW            shift and go to state 28

    statements                     shift and go to state 129
    statement                      shift and go to state 4
    assignment                     shift and go to state 12
    conditional                    shift and go to state 13
    loop                           shift and go to state 14
    function                       shift and go to state 15
    display                        shift and go to state 16
    input                          shift and go to state 17

state 124

    (68) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN . LBRACE statements RBRACE return_statement_opt RBRACE

    LBRACE          shift and go to state 130


state 125

    (70) parameters -> parameters COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 131


state 126

    (42) input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN . STRING_LITERAL RPAREN

    STRING_LITERAL  shift and go to state 132


state 127

    (16) conditional -> IF condition THEN statements else_statements_opt END .

    LET             reduce using rule 16 (conditional -> IF condition THEN statements else_statements_opt END .)
    IF              reduce using rule 16 (conditional -> IF condition THEN statements else_statements_opt END .)
    FOR             reduce using rule 16 (conditional -> IF condition THEN statements else_statements_opt END .)
    WHILE           reduce using rule 16 (conditional -> IF condition THEN statements else_statements_opt END .)
    DO              reduce using rule 16 (conditional -> IF condition THEN statements else_statements_opt END .)
    FUNCTION        reduce using rule 16 (conditional -> IF condition THEN statements else_statements_opt END .)
    SHOW            reduce using rule 16 (conditional -> IF condition THEN statements else_statements_opt END .)
    $end            reduce using rule 16 (conditional -> IF condition THEN statements else_statements_opt END .)
    ELSE            reduce using rule 16 (conditional -> IF condition THEN statements else_statements_opt END .)
    END             reduce using rule 16 (conditional -> IF condition THEN statements else_statements_opt END .)
    RBRACE          reduce using rule 16 (conditional -> IF condition THEN statements else_statements_opt END .)


state 128

    (17) else_statements_opt -> ELSE statements .
    (3) statements -> statements . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (12) assignment -> . LET IDENTIFIER EQUAL expression_list
    (13) assignment -> . LET IDENTIFIER EQUAL REAL
    (14) assignment -> . LET IDENTIFIER EQUAL NUMBER
    (16) conditional -> . IF condition THEN statements else_statements_opt END
    (60) loop -> . FOR IDENTIFIER IN list DO statements
    (61) loop -> . WHILE condition DO statements
    (62) loop -> . DO statements WHILE condition
    (68) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (43) display -> . SHOW expression
    (44) display -> . SHOW STRING_LITERAL
    (45) display -> . SHOW IDENTIFIER
    (46) display -> . SHOW NUMBER
    (47) display -> . SHOW REAL
    (48) display -> . SHOW CHARACTER
    (49) display -> . SHOW list
    (50) display -> . SHOW function
    (51) display -> . SHOW conditional
    (52) display -> . SHOW loop
    (53) display -> . SHOW input
    (54) display -> . SHOW comment
    (55) display -> . SHOW program
    (56) display -> . SHOW statements
    (57) display -> . SHOW expression_list
    (58) display -> . SHOW assignment
    (59) display -> . SHOW display
    (42) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    END             reduce using rule 17 (else_statements_opt -> ELSE statements .)
    LET             shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 26
    DO              shift and go to state 25
    FUNCTION        shift and go to state 27
    SHOW            shift and go to state 28

    statement                      shift and go to state 29
    assignment                     shift and go to state 12
    conditional                    shift and go to state 13
    loop                           shift and go to state 14
    function                       shift and go to state 15
    display                        shift and go to state 16
    input                          shift and go to state 17

state 129

    (60) loop -> FOR IDENTIFIER IN list DO statements .
    (3) statements -> statements . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (12) assignment -> . LET IDENTIFIER EQUAL expression_list
    (13) assignment -> . LET IDENTIFIER EQUAL REAL
    (14) assignment -> . LET IDENTIFIER EQUAL NUMBER
    (16) conditional -> . IF condition THEN statements else_statements_opt END
    (60) loop -> . FOR IDENTIFIER IN list DO statements
    (61) loop -> . WHILE condition DO statements
    (62) loop -> . DO statements WHILE condition
    (68) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (43) display -> . SHOW expression
    (44) display -> . SHOW STRING_LITERAL
    (45) display -> . SHOW IDENTIFIER
    (46) display -> . SHOW NUMBER
    (47) display -> . SHOW REAL
    (48) display -> . SHOW CHARACTER
    (49) display -> . SHOW list
    (50) display -> . SHOW function
    (51) display -> . SHOW conditional
    (52) display -> . SHOW loop
    (53) display -> . SHOW input
    (54) display -> . SHOW comment
    (55) display -> . SHOW program
    (56) display -> . SHOW statements
    (57) display -> . SHOW expression_list
    (58) display -> . SHOW assignment
    (59) display -> . SHOW display
    (42) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for SHOW resolved as shift
    $end            reduce using rule 60 (loop -> FOR IDENTIFIER IN list DO statements .)
    ELSE            reduce using rule 60 (loop -> FOR IDENTIFIER IN list DO statements .)
    END             reduce using rule 60 (loop -> FOR IDENTIFIER IN list DO statements .)
    RBRACE          reduce using rule 60 (loop -> FOR IDENTIFIER IN list DO statements .)
    LET             shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 26
    DO              shift and go to state 25
    FUNCTION        shift and go to state 27
    SHOW            shift and go to state 28

  ! LET             [ reduce using rule 60 (loop -> FOR IDENTIFIER IN list DO statements .) ]
  ! IF              [ reduce using rule 60 (loop -> FOR IDENTIFIER IN list DO statements .) ]
  ! FOR             [ reduce using rule 60 (loop -> FOR IDENTIFIER IN list DO statements .) ]
  ! WHILE           [ reduce using rule 60 (loop -> FOR IDENTIFIER IN list DO statements .) ]
  ! DO              [ reduce using rule 60 (loop -> FOR IDENTIFIER IN list DO statements .) ]
  ! FUNCTION        [ reduce using rule 60 (loop -> FOR IDENTIFIER IN list DO statements .) ]
  ! SHOW            [ reduce using rule 60 (loop -> FOR IDENTIFIER IN list DO statements .) ]

    statement                      shift and go to state 29
    assignment                     shift and go to state 12
    conditional                    shift and go to state 13
    loop                           shift and go to state 14
    function                       shift and go to state 15
    display                        shift and go to state 16
    input                          shift and go to state 17

state 130

    (68) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE . statements RBRACE return_statement_opt RBRACE
    (3) statements -> . statements statement
    (4) statements -> . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (12) assignment -> . LET IDENTIFIER EQUAL expression_list
    (13) assignment -> . LET IDENTIFIER EQUAL REAL
    (14) assignment -> . LET IDENTIFIER EQUAL NUMBER
    (16) conditional -> . IF condition THEN statements else_statements_opt END
    (60) loop -> . FOR IDENTIFIER IN list DO statements
    (61) loop -> . WHILE condition DO statements
    (62) loop -> . DO statements WHILE condition
    (68) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (43) display -> . SHOW expression
    (44) display -> . SHOW STRING_LITERAL
    (45) display -> . SHOW IDENTIFIER
    (46) display -> . SHOW NUMBER
    (47) display -> . SHOW REAL
    (48) display -> . SHOW CHARACTER
    (49) display -> . SHOW list
    (50) display -> . SHOW function
    (51) display -> . SHOW conditional
    (52) display -> . SHOW loop
    (53) display -> . SHOW input
    (54) display -> . SHOW comment
    (55) display -> . SHOW program
    (56) display -> . SHOW statements
    (57) display -> . SHOW expression_list
    (58) display -> . SHOW assignment
    (59) display -> . SHOW display
    (42) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    LET             shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 26
    DO              shift and go to state 25
    FUNCTION        shift and go to state 27
    SHOW            shift and go to state 28

    statements                     shift and go to state 133
    statement                      shift and go to state 4
    assignment                     shift and go to state 12
    conditional                    shift and go to state 13
    loop                           shift and go to state 14
    function                       shift and go to state 15
    display                        shift and go to state 16
    input                          shift and go to state 17

state 131

    (70) parameters -> parameters COMMA IDENTIFIER .

    RPAREN          reduce using rule 70 (parameters -> parameters COMMA IDENTIFIER .)
    COMMA           reduce using rule 70 (parameters -> parameters COMMA IDENTIFIER .)


state 132

    (42) input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL . RPAREN

    RPAREN          shift and go to state 134


state 133

    (68) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements . RBRACE return_statement_opt RBRACE
    (3) statements -> statements . statement
    (5) statement -> . assignment
    (6) statement -> . conditional
    (7) statement -> . loop
    (8) statement -> . function
    (9) statement -> . display
    (10) statement -> . input
    (11) assignment -> . LET IDENTIFIER EQUAL expression
    (12) assignment -> . LET IDENTIFIER EQUAL expression_list
    (13) assignment -> . LET IDENTIFIER EQUAL REAL
    (14) assignment -> . LET IDENTIFIER EQUAL NUMBER
    (16) conditional -> . IF condition THEN statements else_statements_opt END
    (60) loop -> . FOR IDENTIFIER IN list DO statements
    (61) loop -> . WHILE condition DO statements
    (62) loop -> . DO statements WHILE condition
    (68) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (43) display -> . SHOW expression
    (44) display -> . SHOW STRING_LITERAL
    (45) display -> . SHOW IDENTIFIER
    (46) display -> . SHOW NUMBER
    (47) display -> . SHOW REAL
    (48) display -> . SHOW CHARACTER
    (49) display -> . SHOW list
    (50) display -> . SHOW function
    (51) display -> . SHOW conditional
    (52) display -> . SHOW loop
    (53) display -> . SHOW input
    (54) display -> . SHOW comment
    (55) display -> . SHOW program
    (56) display -> . SHOW statements
    (57) display -> . SHOW expression_list
    (58) display -> . SHOW assignment
    (59) display -> . SHOW display
    (42) input -> . LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    RBRACE          shift and go to state 135
    LET             shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 26
    DO              shift and go to state 25
    FUNCTION        shift and go to state 27
    SHOW            shift and go to state 28

    statement                      shift and go to state 29
    assignment                     shift and go to state 12
    conditional                    shift and go to state 13
    loop                           shift and go to state 14
    function                       shift and go to state 15
    display                        shift and go to state 16
    input                          shift and go to state 17

state 134

    (42) input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .

    LET             reduce using rule 42 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    IF              reduce using rule 42 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    FOR             reduce using rule 42 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    WHILE           reduce using rule 42 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    DO              reduce using rule 42 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    FUNCTION        reduce using rule 42 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    SHOW            reduce using rule 42 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    $end            reduce using rule 42 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    ELSE            reduce using rule 42 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    END             reduce using rule 42 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    RBRACE          reduce using rule 42 (input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)


state 135

    (68) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE . return_statement_opt RBRACE
    (72) return_statement_opt -> . RETURN expression
    (73) return_statement_opt -> . empty
    (74) empty -> .

    RETURN          shift and go to state 137
    RBRACE          reduce using rule 74 (empty -> .)

    return_statement_opt           shift and go to state 136
    empty                          shift and go to state 138

state 136

    (68) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt . RBRACE

    RBRACE          shift and go to state 139


state 137

    (72) return_statement_opt -> RETURN . expression
    (25) expression -> . expression PLUS term
    (26) expression -> . expression MINUS term
    (27) expression -> . term
    (28) expression -> . expression POWER term
    (29) expression -> . NOT expression
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . NUMBER MINUS term
    (32) expression -> . REAL MINUS term
    (33) expression -> . CHARACTER PLUS term
    (34) expression -> . list
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) term -> . IDENTIFIER
    (38) term -> . factor
    (63) list -> . LBRACKET expression_list RBRACKET
    (64) list -> . empty
    (39) factor -> . NUMBER
    (40) factor -> . LPAREN expression RPAREN
    (41) factor -> . REAL
    (74) empty -> .

    NOT             shift and go to state 6
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 8
    REAL            shift and go to state 9
    CHARACTER       shift and go to state 10
    IDENTIFIER      shift and go to state 19
    LBRACKET        shift and go to state 20
    PLUS            reduce using rule 74 (empty -> .)
    MINUS           reduce using rule 74 (empty -> .)
    POWER           reduce using rule 74 (empty -> .)
    RBRACE          reduce using rule 74 (empty -> .)

    expression                     shift and go to state 140
    term                           shift and go to state 5
    list                           shift and go to state 11
    factor                         shift and go to state 18
    empty                          shift and go to state 21

state 138

    (73) return_statement_opt -> empty .

    RBRACE          reduce using rule 73 (return_statement_opt -> empty .)


state 139

    (68) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .

    LET             reduce using rule 68 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    IF              reduce using rule 68 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    FOR             reduce using rule 68 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    WHILE           reduce using rule 68 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    DO              reduce using rule 68 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    FUNCTION        reduce using rule 68 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    SHOW            reduce using rule 68 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    $end            reduce using rule 68 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    ELSE            reduce using rule 68 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    END             reduce using rule 68 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    RBRACE          reduce using rule 68 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)


state 140

    (72) return_statement_opt -> RETURN expression .
    (25) expression -> expression . PLUS term
    (26) expression -> expression . MINUS term
    (28) expression -> expression . POWER term

    RBRACE          reduce using rule 72 (return_statement_opt -> RETURN expression .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    POWER           shift and go to state 32

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MINUS in state 8 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 9 resolved as shift
WARNING: shift/reduce conflict for LET in state 28 resolved as shift
WARNING: shift/reduce conflict for IF in state 28 resolved as shift
WARNING: shift/reduce conflict for FOR in state 28 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 28 resolved as shift
WARNING: shift/reduce conflict for DO in state 28 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 28 resolved as shift
WARNING: shift/reduce conflict for SHOW in state 28 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 35 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 35 resolved as shift
WARNING: shift/reduce conflict for POWER in state 35 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 54 resolved as shift
WARNING: shift/reduce conflict for LET in state 63 resolved as shift
WARNING: shift/reduce conflict for IF in state 63 resolved as shift
WARNING: shift/reduce conflict for FOR in state 63 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 63 resolved as shift
WARNING: shift/reduce conflict for DO in state 63 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 63 resolved as shift
WARNING: shift/reduce conflict for SHOW in state 63 resolved as shift
WARNING: shift/reduce conflict for SHOW in state 84 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 102 resolved as shift
WARNING: shift/reduce conflict for DO in state 112 resolved as shift
WARNING: shift/reduce conflict for LET in state 113 resolved as shift
WARNING: shift/reduce conflict for IF in state 113 resolved as shift
WARNING: shift/reduce conflict for FOR in state 113 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 113 resolved as shift
WARNING: shift/reduce conflict for DO in state 113 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 113 resolved as shift
WARNING: shift/reduce conflict for SHOW in state 113 resolved as shift
WARNING: shift/reduce conflict for SHOW in state 117 resolved as shift
WARNING: shift/reduce conflict for LET in state 129 resolved as shift
WARNING: shift/reduce conflict for IF in state 129 resolved as shift
WARNING: shift/reduce conflict for FOR in state 129 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 129 resolved as shift
WARNING: shift/reduce conflict for DO in state 129 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 129 resolved as shift
WARNING: shift/reduce conflict for SHOW in state 129 resolved as shift
WARNING: reduce/reduce conflict in state 42 resolved using rule (list -> empty)
WARNING: rejected rule (expression_list -> empty) in state 42
WARNING: reduce/reduce conflict in state 50 resolved using rule (program -> expression)
WARNING: rejected rule (display -> SHOW expression) in state 50
WARNING: reduce/reduce conflict in state 50 resolved using rule (program -> expression)
WARNING: rejected rule (expression_list -> expression) in state 50
WARNING: reduce/reduce conflict in state 52 resolved using rule (term -> IDENTIFIER)
WARNING: rejected rule (display -> SHOW IDENTIFIER) in state 52
WARNING: reduce/reduce conflict in state 53 resolved using rule (factor -> NUMBER)
WARNING: rejected rule (display -> SHOW NUMBER) in state 53
WARNING: reduce/reduce conflict in state 54 resolved using rule (factor -> REAL)
WARNING: rejected rule (display -> SHOW REAL) in state 54
WARNING: reduce/reduce conflict in state 56 resolved using rule (expression -> list)
WARNING: rejected rule (display -> SHOW list) in state 56
WARNING: reduce/reduce conflict in state 57 resolved using rule (statement -> function)
WARNING: rejected rule (display -> SHOW function) in state 57
WARNING: reduce/reduce conflict in state 58 resolved using rule (statement -> conditional)
WARNING: rejected rule (display -> SHOW conditional) in state 58
WARNING: reduce/reduce conflict in state 59 resolved using rule (statement -> loop)
WARNING: rejected rule (display -> SHOW loop) in state 59
WARNING: reduce/reduce conflict in state 60 resolved using rule (statement -> input)
WARNING: rejected rule (display -> SHOW input) in state 60
WARNING: reduce/reduce conflict in state 63 resolved using rule (program -> statements)
WARNING: rejected rule (display -> SHOW statements) in state 63
WARNING: reduce/reduce conflict in state 65 resolved using rule (statement -> assignment)
WARNING: rejected rule (display -> SHOW assignment) in state 65
WARNING: reduce/reduce conflict in state 66 resolved using rule (statement -> display)
WARNING: rejected rule (display -> SHOW display) in state 66
WARNING: reduce/reduce conflict in state 67 resolved using rule (list -> empty)
WARNING: rejected rule (expression_list -> empty) in state 67
WARNING: reduce/reduce conflict in state 78 resolved using rule (expression -> LPAREN expression RPAREN)
WARNING: rejected rule (factor -> LPAREN expression RPAREN) in state 78
WARNING: reduce/reduce conflict in state 99 resolved using rule (assignment -> LET IDENTIFIER EQUAL expression)
WARNING: rejected rule (expression_list -> expression) in state 99
WARNING: reduce/reduce conflict in state 101 resolved using rule (assignment -> LET IDENTIFIER EQUAL REAL)
WARNING: rejected rule (factor -> REAL) in state 101
WARNING: reduce/reduce conflict in state 102 resolved using rule (assignment -> LET IDENTIFIER EQUAL NUMBER)
WARNING: rejected rule (factor -> NUMBER) in state 102
WARNING: Rule (expression_list -> empty) is never reduced
WARNING: Rule (display -> SHOW expression) is never reduced
WARNING: Rule (display -> SHOW IDENTIFIER) is never reduced
WARNING: Rule (display -> SHOW NUMBER) is never reduced
WARNING: Rule (display -> SHOW REAL) is never reduced
WARNING: Rule (display -> SHOW list) is never reduced
WARNING: Rule (display -> SHOW function) is never reduced
WARNING: Rule (display -> SHOW conditional) is never reduced
WARNING: Rule (display -> SHOW loop) is never reduced
WARNING: Rule (display -> SHOW input) is never reduced
WARNING: Rule (display -> SHOW statements) is never reduced
WARNING: Rule (display -> SHOW assignment) is never reduced
WARNING: Rule (display -> SHOW display) is never reduced
