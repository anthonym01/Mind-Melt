'''
import ply.lex as lex
from lexTokens import *
from semantics import semantic_analysis
from yacc import *
import sys
from os import execlpe

try:
    with open('test.txt', 'r') as file:
        file_contents = file.read()
except FileNotFoundError:
    print("File 'test.txt' not found.")
    sys.exit(1)
except IOError as e:
    print(f"Error reading file: {e}")
    sys.exit(1)

#Build the lexer
lexer = lex.lex(module=lexTokens)
lexer.input(file_contents)

#Print tokens generated by the lexer



#Create an instance semantic analyzer
semantics = semantic_analysis()

# Testing area
# Parse code and prime execution
def parsex(program_code):
    
    print("\n----------------------------------------------------------")
    print("Input code: ")
    print(program_code)
    
    print("\n----------------------------------------------------------")
    print("Tokens: ")
    lexer.input(program_code)
    for tokenx in lexer: print(tokenx)
    lexer.input(program_code)
    
    
    syntax_tree = parser.parse(lexer=lexer)
    
    print("\n-----------------------------------------------------")
    print("Ast Syntax tree: ")
    print(syntax_tree)
    print("\n-------------------------------------------------------------------")
    semantic_analysis(syntax_tree)# send ast tree to be analysizded
    
    return syntax_tree

parsex(input_code)

'''