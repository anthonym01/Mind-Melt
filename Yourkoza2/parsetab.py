
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programAND BE CHARACTER COMMA COMMENT DECREASE DIVIDE DO ELSE EQUAL FOR FUNCTION GREATER_THAN_OR_EQUAL_TO IDENTIFIER IF IN INCREASE INTEGER IS_EQUAL_TO IS_GREATER_THAN IS_LESS_THAN IS_NOT_EQUAL_TO JOIN LBRACE LBRACKET LESS_THAN_OR_EQUAL_TO LET LETTER LPAREN MINUS NOT NUMBER OR PLUS POWER RBRACE RBRACKET REAL RETURN RISK RPAREN SAVE SHOW STRING_LITERAL THEN TIMES TO WHILEprogram : statements\n               | expressionstatements : statements statement\n                  | statementstatement : assignment\n                 | conditional\n                 | loop\n                 | function\n                 | display\n                 | input\n                 | COMMENTassignment : LET IDENTIFIER BE EQUAL TO expressionconditional : IF condition THEN statements else_statements_optelse_statements_opt : ELSE statements\n                           | emptycondition : expression IS_LESS_THAN expression\n                 | expression IS_EQUAL_TO expression\n                 | expression IS_GREATER_THAN expression\n                 | expression IS_NOT_EQUAL_TO expression\n                 | expression GREATER_THAN_OR_EQUAL_TO expression\n                 | expression LESS_THAN_OR_EQUAL_TO expressionexpression : expression PLUS term\n                  | expression MINUS term\n                  | termterm : term TIMES factor\n            | term DIVIDE factor\n            | factorfactor : NUMBER\n            | LPAREN expression RPARENinput : LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPARENdisplay : SHOW expressionloop : FOR IDENTIFIER IN list DO statements\n            | WHILE condition DO statementslist : LBRACKET expression_list RBRACKET\n            | emptyexpression_list : expression\n                        | expression_list COMMA expressionfunction : FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACEparameters : IDENTIFIER\n                | parameters COMMA IDENTIFIERreturn_statement_opt : RETURN expression\n                            | emptyempty : '
    
_lr_action_items = {'COMMENT':([0,2,4,5,6,7,8,9,10,11,12,13,21,22,34,35,36,37,38,40,48,50,52,62,66,67,68,69,74,76,77,80,84,91,92,],[12,12,-4,-24,-5,-6,-7,-8,-9,-10,-11,-27,-28,-3,-31,-22,-23,-25,-26,12,12,-29,12,12,-13,12,-15,12,-12,12,12,12,12,-30,-38,]),'LET':([0,2,4,5,6,7,8,9,10,11,12,13,21,22,34,35,36,37,38,40,48,50,52,62,66,67,68,69,74,76,77,80,84,91,92,],[14,14,-4,-24,-5,-6,-7,-8,-9,-10,-11,-27,-28,-3,-31,-22,-23,-25,-26,14,14,-29,14,14,-13,14,-15,14,-12,14,14,14,14,-30,-38,]),'IF':([0,2,4,5,6,7,8,9,10,11,12,13,21,22,34,35,36,37,38,40,48,50,52,62,66,67,68,69,74,76,77,80,84,91,92,],[15,15,-4,-24,-5,-6,-7,-8,-9,-10,-11,-27,-28,-3,-31,-22,-23,-25,-26,15,15,-29,15,15,-13,15,-15,15,-12,15,15,15,15,-30,-38,]),'FOR':([0,2,4,5,6,7,8,9,10,11,12,13,21,22,34,35,36,37,38,40,48,50,52,62,66,67,68,69,74,76,77,80,84,91,92,],[16,16,-4,-24,-5,-6,-7,-8,-9,-10,-11,-27,-28,-3,-31,-22,-23,-25,-26,16,16,-29,16,16,-13,16,-15,16,-12,16,16,16,16,-30,-38,]),'WHILE':([0,2,4,5,6,7,8,9,10,11,12,13,21,22,34,35,36,37,38,40,48,50,52,62,66,67,68,69,74,76,77,80,84,91,92,],[17,17,-4,-24,-5,-6,-7,-8,-9,-10,-11,-27,-28,-3,-31,-22,-23,-25,-26,17,17,-29,17,17,-13,17,-15,17,-12,17,17,17,17,-30,-38,]),'FUNCTION':([0,2,4,5,6,7,8,9,10,11,12,13,21,22,34,35,36,37,38,40,48,50,52,62,66,67,68,69,74,76,77,80,84,91,92,],[18,18,-4,-24,-5,-6,-7,-8,-9,-10,-11,-27,-28,-3,-31,-22,-23,-25,-26,18,18,-29,18,18,-13,18,-15,18,-12,18,18,18,18,-30,-38,]),'SHOW':([0,2,4,5,6,7,8,9,10,11,12,13,21,22,34,35,36,37,38,40,48,50,52,62,65,66,67,68,69,74,76,77,80,84,91,92,],[20,20,-4,-24,-5,-6,-7,-8,-9,-10,-11,-27,-28,-3,-31,-22,-23,-25,-26,20,20,-29,20,20,75,-13,20,-15,20,-12,20,20,20,20,-30,-38,]),'NUMBER':([0,15,17,19,20,23,24,25,26,41,42,43,44,45,46,60,65,79,89,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'LPAREN':([0,15,17,19,20,23,24,25,26,32,41,42,43,44,45,46,60,65,79,82,89,],[19,19,19,19,19,19,19,19,19,49,19,19,19,19,19,19,19,19,19,85,19,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,21,22,34,35,36,37,38,50,52,62,66,68,74,76,77,91,92,],[0,-1,-2,-4,-24,-5,-6,-7,-8,-9,-10,-11,-27,-28,-3,-31,-22,-23,-25,-26,-29,-43,-33,-13,-15,-12,-14,-32,-30,-38,]),'PLUS':([3,5,13,21,29,33,34,35,36,37,38,50,53,54,55,56,57,58,71,74,83,93,],[23,-24,-27,-28,23,23,23,-22,-23,-25,-26,-29,23,23,23,23,23,23,23,23,23,23,]),'MINUS':([3,5,13,21,29,33,34,35,36,37,38,50,53,54,55,56,57,58,71,74,83,93,],[24,-24,-27,-28,24,24,24,-22,-23,-25,-26,-29,24,24,24,24,24,24,24,24,24,24,]),'ELSE':([4,5,6,7,8,9,10,11,12,13,21,22,34,35,36,37,38,50,52,62,66,68,74,76,77,91,92,],[-4,-24,-5,-6,-7,-8,-9,-10,-11,-27,-28,-3,-31,-22,-23,-25,-26,-29,67,-33,-13,-15,-12,-14,-32,-30,-38,]),'RBRACE':([4,5,6,7,8,9,10,11,12,13,21,22,34,35,36,37,38,50,52,62,66,68,74,76,77,84,86,88,90,91,92,93,],[-4,-24,-5,-6,-7,-8,-9,-10,-11,-27,-28,-3,-31,-22,-23,-25,-26,-29,-43,-33,-13,-15,-12,-14,-32,86,-43,92,-42,-30,-38,-41,]),'IS_LESS_THAN':([5,13,21,29,35,36,37,38,50,],[-24,-27,-28,41,-22,-23,-25,-26,-29,]),'IS_EQUAL_TO':([5,13,21,29,35,36,37,38,50,],[-24,-27,-28,42,-22,-23,-25,-26,-29,]),'IS_GREATER_THAN':([5,13,21,29,35,36,37,38,50,],[-24,-27,-28,43,-22,-23,-25,-26,-29,]),'IS_NOT_EQUAL_TO':([5,13,21,29,35,36,37,38,50,],[-24,-27,-28,44,-22,-23,-25,-26,-29,]),'GREATER_THAN_OR_EQUAL_TO':([5,13,21,29,35,36,37,38,50,],[-24,-27,-28,45,-22,-23,-25,-26,-29,]),'LESS_THAN_OR_EQUAL_TO':([5,13,21,29,35,36,37,38,50,],[-24,-27,-28,46,-22,-23,-25,-26,-29,]),'RPAREN':([5,13,21,33,35,36,37,38,50,63,64,81,87,],[-24,-27,-28,50,-22,-23,-25,-26,-29,-39,72,-40,91,]),'THEN':([5,13,21,28,35,36,37,38,50,53,54,55,56,57,58,],[-24,-27,-28,40,-22,-23,-25,-26,-29,-16,-17,-18,-19,-20,-21,]),'DO':([5,13,21,31,35,36,37,38,47,50,53,54,55,56,57,58,59,61,78,],[-24,-27,-28,48,-22,-23,-25,-26,-43,-29,-16,-17,-18,-19,-20,-21,69,-35,-34,]),'RBRACKET':([5,13,21,35,36,37,38,50,70,71,83,],[-24,-27,-28,-22,-23,-25,-26,-29,78,-36,-37,]),'COMMA':([5,13,21,35,36,37,38,50,63,64,70,71,81,83,],[-24,-27,-28,-22,-23,-25,-26,-29,-39,73,79,-36,-40,-37,]),'TIMES':([5,13,21,35,36,37,38,50,],[25,-27,-28,25,25,-25,-26,-29,]),'DIVIDE':([5,13,21,35,36,37,38,50,],[26,-27,-28,26,26,-25,-26,-29,]),'IDENTIFIER':([14,16,18,49,73,75,],[27,30,32,63,81,82,]),'BE':([27,],[39,]),'IN':([30,],[47,]),'EQUAL':([39,],[51,]),'LBRACKET':([47,],[60,]),'TO':([51,],[65,]),'LBRACE':([72,],[80,]),'STRING_LITERAL':([85,],[87,]),'RETURN':([86,],[89,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,40,48,67,69,80,],[2,52,62,76,77,84,]),'expression':([0,15,17,19,20,41,42,43,44,45,46,60,65,79,89,],[3,29,29,33,34,53,54,55,56,57,58,71,74,83,93,]),'statement':([0,2,40,48,52,62,67,69,76,77,80,84,],[4,22,4,4,22,22,4,4,22,22,4,22,]),'term':([0,15,17,19,20,23,24,41,42,43,44,45,46,60,65,79,89,],[5,5,5,5,5,35,36,5,5,5,5,5,5,5,5,5,5,]),'assignment':([0,2,40,48,52,62,67,69,76,77,80,84,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'conditional':([0,2,40,48,52,62,67,69,76,77,80,84,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'loop':([0,2,40,48,52,62,67,69,76,77,80,84,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'function':([0,2,40,48,52,62,67,69,76,77,80,84,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'display':([0,2,40,48,52,62,67,69,76,77,80,84,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'input':([0,2,40,48,52,62,67,69,76,77,80,84,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'factor':([0,15,17,19,20,23,24,25,26,41,42,43,44,45,46,60,65,79,89,],[13,13,13,13,13,13,13,37,38,13,13,13,13,13,13,13,13,13,13,]),'condition':([15,17,],[28,31,]),'list':([47,],[59,]),'empty':([47,52,86,],[61,68,90,]),'parameters':([49,],[64,]),'else_statements_opt':([52,],[66,]),'expression_list':([60,],[70,]),'return_statement_opt':([86,],[88,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','yacc.py',20),
  ('program -> expression','program',1,'p_program','yacc.py',21),
  ('statements -> statements statement','statements',2,'p_statements','yacc.py',25),
  ('statements -> statement','statements',1,'p_statements','yacc.py',26),
  ('statement -> assignment','statement',1,'p_statement','yacc.py',36),
  ('statement -> conditional','statement',1,'p_statement','yacc.py',37),
  ('statement -> loop','statement',1,'p_statement','yacc.py',38),
  ('statement -> function','statement',1,'p_statement','yacc.py',39),
  ('statement -> display','statement',1,'p_statement','yacc.py',40),
  ('statement -> input','statement',1,'p_statement','yacc.py',41),
  ('statement -> COMMENT','statement',1,'p_statement','yacc.py',42),
  ('assignment -> LET IDENTIFIER BE EQUAL TO expression','assignment',6,'p_assignment','yacc.py',47),
  ('conditional -> IF condition THEN statements else_statements_opt','conditional',5,'p_conditional','yacc.py',52),
  ('else_statements_opt -> ELSE statements','else_statements_opt',2,'p_else_statements_opt','yacc.py',56),
  ('else_statements_opt -> empty','else_statements_opt',1,'p_else_statements_opt','yacc.py',57),
  ('condition -> expression IS_LESS_THAN expression','condition',3,'p_condition','yacc.py',63),
  ('condition -> expression IS_EQUAL_TO expression','condition',3,'p_condition','yacc.py',64),
  ('condition -> expression IS_GREATER_THAN expression','condition',3,'p_condition','yacc.py',65),
  ('condition -> expression IS_NOT_EQUAL_TO expression','condition',3,'p_condition','yacc.py',66),
  ('condition -> expression GREATER_THAN_OR_EQUAL_TO expression','condition',3,'p_condition','yacc.py',67),
  ('condition -> expression LESS_THAN_OR_EQUAL_TO expression','condition',3,'p_condition','yacc.py',68),
  ('expression -> expression PLUS term','expression',3,'p_expression','yacc.py',72),
  ('expression -> expression MINUS term','expression',3,'p_expression','yacc.py',73),
  ('expression -> term','expression',1,'p_expression','yacc.py',74),
  ('term -> term TIMES factor','term',3,'p_term','yacc.py',84),
  ('term -> term DIVIDE factor','term',3,'p_term','yacc.py',85),
  ('term -> factor','term',1,'p_term','yacc.py',86),
  ('factor -> NUMBER','factor',1,'p_factor','yacc.py',96),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','yacc.py',97),
  ('input -> LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN','input',10,'p_input','yacc.py',104),
  ('display -> SHOW expression','display',2,'p_display','yacc.py',108),
  ('loop -> FOR IDENTIFIER IN list DO statements','loop',6,'p_loop','yacc.py',112),
  ('loop -> WHILE condition DO statements','loop',4,'p_loop','yacc.py',113),
  ('list -> LBRACKET expression_list RBRACKET','list',3,'p_list','yacc.py',118),
  ('list -> empty','list',1,'p_list','yacc.py',119),
  ('expression_list -> expression','expression_list',1,'p_expression_list','yacc.py',125),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','yacc.py',126),
  ('function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE','function',10,'p_function','yacc.py',133),
  ('parameters -> IDENTIFIER','parameters',1,'p_parameters','yacc.py',137),
  ('parameters -> parameters COMMA IDENTIFIER','parameters',3,'p_parameters','yacc.py',138),
  ('return_statement_opt -> RETURN expression','return_statement_opt',2,'p_return_statement_opt','yacc.py',145),
  ('return_statement_opt -> empty','return_statement_opt',1,'p_return_statement_opt','yacc.py',146),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',152),
]
