
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programnonassocIS_LESS_THANIS_GREATER_THANIS_EQUAL_TOIS_NOT_EQUAL_TOGREATER_THAN_OR_EQUAL_TOLESS_THAN_OR_EQUAL_TOleftPLUSMINUSleftTIMESDIVIDErightPOWERAND CHARACTER COMMA COMMENT DECREASE DIVIDE DO ELSE EQUAL FOR FUNCTION GREATER_THAN_OR_EQUAL_TO IDENTIFIER IF IN INCREASE INTEGER IS_EQUAL_TO IS_GREATER_THAN IS_LESS_THAN IS_NOT_EQUAL_TO JOIN LBRACE LBRACKET LESS_THAN_OR_EQUAL_TO LET LETTER LPAREN MINUS NOT NUMBER OR PLUS POWER RBRACE RBRACKET REAL RETURN RISK RPAREN SAVE SHOW STRING_LITERAL THEN TIMES WHILE\n    program : statements\n            | expression\n    \n    statements : statements statement\n               | statement\n    \n    statement : assignment\n              | conditional\n              | loop\n              | function\n              | display\n              | input\n    \n    assignment : LET IDENTIFIER EQUAL expression\n    conditional : IF condition THEN statements else_statements_optelse_statements_opt : ELSE statements\n                           | emptycondition : expression IS_LESS_THAN expression\n                 | expression IS_EQUAL_TO expression\n                 | expression IS_GREATER_THAN expression\n                 | expression IS_NOT_EQUAL_TO expression\n                 | expression GREATER_THAN_OR_EQUAL_TO expression\n                 | expression LESS_THAN_OR_EQUAL_TO expression\n    expression : expression PLUS term\n               | expression MINUS term\n               | term\n    term : term TIMES factor\n            | term DIVIDE factor\n            | factorfactor : NUMBER\n              | LPAREN expression RPARENinput : LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPARENdisplay : SHOW expressionloop : FOR IDENTIFIER IN list DO statements\n            | WHILE condition DO statementslist : LBRACKET expression_list RBRACKET\n            | emptyexpression_list : expression\n                       | expression_list COMMA expressionfunction : FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACEparameters : IDENTIFIER\n                  | parameters COMMA IDENTIFIER\n    return_statement_opt : RETURN expression\n                         | empty\n    \n    empty : \n    '
    
_lr_action_items = {'LET':([0,2,4,5,6,7,8,9,10,11,12,20,21,33,34,35,36,37,39,47,49,50,52,62,66,67,68,69,75,76,79,83,84,89,],[13,13,-4,-23,-5,-6,-7,-8,-9,-10,-26,-27,-3,-30,-21,-22,-24,-25,13,13,-28,-11,13,13,-12,13,-14,13,13,13,13,13,-29,-37,]),'IF':([0,2,4,5,6,7,8,9,10,11,12,20,21,33,34,35,36,37,39,47,49,50,52,62,66,67,68,69,75,76,79,83,84,89,],[14,14,-4,-23,-5,-6,-7,-8,-9,-10,-26,-27,-3,-30,-21,-22,-24,-25,14,14,-28,-11,14,14,-12,14,-14,14,14,14,14,14,-29,-37,]),'FOR':([0,2,4,5,6,7,8,9,10,11,12,20,21,33,34,35,36,37,39,47,49,50,52,62,66,67,68,69,75,76,79,83,84,89,],[15,15,-4,-23,-5,-6,-7,-8,-9,-10,-26,-27,-3,-30,-21,-22,-24,-25,15,15,-28,-11,15,15,-12,15,-14,15,15,15,15,15,-29,-37,]),'WHILE':([0,2,4,5,6,7,8,9,10,11,12,20,21,33,34,35,36,37,39,47,49,50,52,62,66,67,68,69,75,76,79,83,84,89,],[16,16,-4,-23,-5,-6,-7,-8,-9,-10,-26,-27,-3,-30,-21,-22,-24,-25,16,16,-28,-11,16,16,-12,16,-14,16,16,16,16,16,-29,-37,]),'FUNCTION':([0,2,4,5,6,7,8,9,10,11,12,20,21,33,34,35,36,37,39,47,49,50,52,62,66,67,68,69,75,76,79,83,84,89,],[17,17,-4,-23,-5,-6,-7,-8,-9,-10,-26,-27,-3,-30,-21,-22,-24,-25,17,17,-28,-11,17,17,-12,17,-14,17,17,17,17,17,-29,-37,]),'SHOW':([0,2,4,5,6,7,8,9,10,11,12,20,21,33,34,35,36,37,38,39,47,49,50,52,62,66,67,68,69,75,76,79,83,84,89,],[19,19,-4,-23,-5,-6,-7,-8,-9,-10,-26,-27,-3,-30,-21,-22,-24,-25,51,19,19,-28,-11,19,19,-12,19,-14,19,19,19,19,19,-29,-37,]),'NUMBER':([0,14,16,18,19,22,23,24,25,38,40,41,42,43,44,45,60,78,87,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'LPAREN':([0,14,16,18,19,22,23,24,25,31,38,40,41,42,43,44,45,60,65,78,87,],[18,18,18,18,18,18,18,18,18,48,18,18,18,18,18,18,18,18,74,18,18,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,20,21,33,34,35,36,37,49,50,52,62,66,68,75,76,84,89,],[0,-1,-2,-4,-23,-5,-6,-7,-8,-9,-10,-26,-27,-3,-30,-21,-22,-24,-25,-28,-11,-42,-32,-12,-14,-13,-31,-29,-37,]),'PLUS':([3,5,12,20,28,32,33,34,35,36,37,49,50,53,54,55,56,57,58,71,82,90,],[22,-23,-26,-27,22,22,22,-21,-22,-24,-25,-28,22,22,22,22,22,22,22,22,22,22,]),'MINUS':([3,5,12,20,28,32,33,34,35,36,37,49,50,53,54,55,56,57,58,71,82,90,],[23,-23,-26,-27,23,23,23,-21,-22,-24,-25,-28,23,23,23,23,23,23,23,23,23,23,]),'ELSE':([4,5,6,7,8,9,10,11,12,20,21,33,34,35,36,37,49,50,52,62,66,68,75,76,84,89,],[-4,-23,-5,-6,-7,-8,-9,-10,-26,-27,-3,-30,-21,-22,-24,-25,-28,-11,67,-32,-12,-14,-13,-31,-29,-37,]),'RBRACE':([4,5,6,7,8,9,10,11,12,20,21,33,34,35,36,37,49,50,52,62,66,68,75,76,83,84,85,86,88,89,90,],[-4,-23,-5,-6,-7,-8,-9,-10,-26,-27,-3,-30,-21,-22,-24,-25,-28,-11,-42,-32,-12,-14,-13,-31,85,-29,-42,89,-41,-37,-40,]),'IS_LESS_THAN':([5,12,20,28,34,35,36,37,49,],[-23,-26,-27,40,-21,-22,-24,-25,-28,]),'IS_EQUAL_TO':([5,12,20,28,34,35,36,37,49,],[-23,-26,-27,41,-21,-22,-24,-25,-28,]),'IS_GREATER_THAN':([5,12,20,28,34,35,36,37,49,],[-23,-26,-27,42,-21,-22,-24,-25,-28,]),'IS_NOT_EQUAL_TO':([5,12,20,28,34,35,36,37,49,],[-23,-26,-27,43,-21,-22,-24,-25,-28,]),'GREATER_THAN_OR_EQUAL_TO':([5,12,20,28,34,35,36,37,49,],[-23,-26,-27,44,-21,-22,-24,-25,-28,]),'LESS_THAN_OR_EQUAL_TO':([5,12,20,28,34,35,36,37,49,],[-23,-26,-27,45,-21,-22,-24,-25,-28,]),'RPAREN':([5,12,20,32,34,35,36,37,49,63,64,80,81,],[-23,-26,-27,49,-21,-22,-24,-25,-28,-38,72,-39,84,]),'THEN':([5,12,20,27,34,35,36,37,49,53,54,55,56,57,58,],[-23,-26,-27,39,-21,-22,-24,-25,-28,-15,-16,-17,-18,-19,-20,]),'DO':([5,12,20,30,34,35,36,37,46,49,53,54,55,56,57,58,59,61,77,],[-23,-26,-27,47,-21,-22,-24,-25,-42,-28,-15,-16,-17,-18,-19,-20,69,-34,-33,]),'RBRACKET':([5,12,20,34,35,36,37,49,70,71,82,],[-23,-26,-27,-21,-22,-24,-25,-28,77,-35,-36,]),'COMMA':([5,12,20,34,35,36,37,49,63,64,70,71,80,82,],[-23,-26,-27,-21,-22,-24,-25,-28,-38,73,78,-35,-39,-36,]),'TIMES':([5,12,20,34,35,36,37,49,],[24,-26,-27,24,24,-24,-25,-28,]),'DIVIDE':([5,12,20,34,35,36,37,49,],[25,-26,-27,25,25,-24,-25,-28,]),'IDENTIFIER':([13,15,17,48,51,73,],[26,29,31,63,65,80,]),'EQUAL':([26,],[38,]),'IN':([29,],[46,]),'LBRACKET':([46,],[60,]),'LBRACE':([72,],[79,]),'STRING_LITERAL':([74,],[81,]),'RETURN':([85,],[87,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,39,47,67,69,79,],[2,52,62,75,76,83,]),'expression':([0,14,16,18,19,38,40,41,42,43,44,45,60,78,87,],[3,28,28,32,33,50,53,54,55,56,57,58,71,82,90,]),'statement':([0,2,39,47,52,62,67,69,75,76,79,83,],[4,21,4,4,21,21,4,4,21,21,4,21,]),'term':([0,14,16,18,19,22,23,38,40,41,42,43,44,45,60,78,87,],[5,5,5,5,5,34,35,5,5,5,5,5,5,5,5,5,5,]),'assignment':([0,2,39,47,52,62,67,69,75,76,79,83,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'conditional':([0,2,39,47,52,62,67,69,75,76,79,83,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'loop':([0,2,39,47,52,62,67,69,75,76,79,83,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'function':([0,2,39,47,52,62,67,69,75,76,79,83,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'display':([0,2,39,47,52,62,67,69,75,76,79,83,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'input':([0,2,39,47,52,62,67,69,75,76,79,83,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'factor':([0,14,16,18,19,22,23,24,25,38,40,41,42,43,44,45,60,78,87,],[12,12,12,12,12,12,12,36,37,12,12,12,12,12,12,12,12,12,12,]),'condition':([14,16,],[27,30,]),'list':([46,],[59,]),'empty':([46,52,85,],[61,68,88,]),'parameters':([48,],[64,]),'else_statements_opt':([52,],[66,]),'expression_list':([60,],[70,]),'return_statement_opt':([85,],[86,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','yacc.py',21),
  ('program -> expression','program',1,'p_program','yacc.py',22),
  ('statements -> statements statement','statements',2,'p_statements','yacc.py',28),
  ('statements -> statement','statements',1,'p_statements','yacc.py',29),
  ('statement -> assignment','statement',1,'p_statement','yacc.py',41),
  ('statement -> conditional','statement',1,'p_statement','yacc.py',42),
  ('statement -> loop','statement',1,'p_statement','yacc.py',43),
  ('statement -> function','statement',1,'p_statement','yacc.py',44),
  ('statement -> display','statement',1,'p_statement','yacc.py',45),
  ('statement -> input','statement',1,'p_statement','yacc.py',46),
  ('assignment -> LET IDENTIFIER EQUAL expression','assignment',4,'p_assignment','yacc.py',53),
  ('conditional -> IF condition THEN statements else_statements_opt','conditional',5,'p_conditional','yacc.py',59),
  ('else_statements_opt -> ELSE statements','else_statements_opt',2,'p_else_statements_opt','yacc.py',63),
  ('else_statements_opt -> empty','else_statements_opt',1,'p_else_statements_opt','yacc.py',64),
  ('condition -> expression IS_LESS_THAN expression','condition',3,'p_condition','yacc.py',70),
  ('condition -> expression IS_EQUAL_TO expression','condition',3,'p_condition','yacc.py',71),
  ('condition -> expression IS_GREATER_THAN expression','condition',3,'p_condition','yacc.py',72),
  ('condition -> expression IS_NOT_EQUAL_TO expression','condition',3,'p_condition','yacc.py',73),
  ('condition -> expression GREATER_THAN_OR_EQUAL_TO expression','condition',3,'p_condition','yacc.py',74),
  ('condition -> expression LESS_THAN_OR_EQUAL_TO expression','condition',3,'p_condition','yacc.py',75),
  ('expression -> expression PLUS term','expression',3,'p_expression','yacc.py',80),
  ('expression -> expression MINUS term','expression',3,'p_expression','yacc.py',81),
  ('expression -> term','expression',1,'p_expression','yacc.py',82),
  ('term -> term TIMES factor','term',3,'p_term','yacc.py',93),
  ('term -> term DIVIDE factor','term',3,'p_term','yacc.py',94),
  ('term -> factor','term',1,'p_term','yacc.py',95),
  ('factor -> NUMBER','factor',1,'p_factor','yacc.py',105),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','yacc.py',106),
  ('input -> LET IDENTIFIER EQUAL SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN','input',8,'p_input','yacc.py',113),
  ('display -> SHOW expression','display',2,'p_display','yacc.py',117),
  ('loop -> FOR IDENTIFIER IN list DO statements','loop',6,'p_loop','yacc.py',121),
  ('loop -> WHILE condition DO statements','loop',4,'p_loop','yacc.py',122),
  ('list -> LBRACKET expression_list RBRACKET','list',3,'p_list','yacc.py',127),
  ('list -> empty','list',1,'p_list','yacc.py',128),
  ('expression_list -> expression','expression_list',1,'p_expression_list','yacc.py',134),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','yacc.py',135),
  ('function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE','function',10,'p_function','yacc.py',142),
  ('parameters -> IDENTIFIER','parameters',1,'p_parameters','yacc.py',146),
  ('parameters -> parameters COMMA IDENTIFIER','parameters',3,'p_parameters','yacc.py',147),
  ('return_statement_opt -> RETURN expression','return_statement_opt',2,'p_return_statement_opt','yacc.py',155),
  ('return_statement_opt -> empty','return_statement_opt',1,'p_return_statement_opt','yacc.py',156),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',164),
]
