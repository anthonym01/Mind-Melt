
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programnonassocIS_LESS_THANIS_GREATER_THANIS_EQUAL_TOIS_NOT_EQUAL_TOGREATER_THAN_OR_EQUAL_TOLESS_THAN_OR_EQUAL_TOleftPLUSMINUSleftTIMESDIVIDErightPOWERAND BOOLEAN CHARACTER COMMA COMMENT DECREASE DIVIDE DO ELSE END EQUAL FALSE FOR FUNCTION GREATER_THAN_OR_EQUAL_TO IDENTIFIER IF IN INCREASE IS_EQUAL_TO IS_GREATER_THAN IS_LESS_THAN IS_NOT_EQUAL_TO JOIN LBRACE LBRACKET LESS_THAN_OR_EQUAL_TO LET LETTER LPAREN MINUS NOT NUMBER OR PLUS POWER RBRACE RBRACKET RETURN RISK RPAREN SAVE SHOW STRING_LITERAL THEN TIMES TRUE WHILE\n    program : statements\n    \n    statements : statement statements\n               | statement\n    \n    statement : assignment\n              | conditional\n              | loop\n              | function\n              | function_call\n              | display\n              | expression\n    \n    assignment : LET IDENTIFIER EQUAL expression\n               | LET IDENTIFIER EQUAL expression_list\n    \n    conditional : IF condition THEN statements else_statements_opt END\n    \n    else_statements_opt : ELSE statements\n                        | empty\n    \n    condition : expression IS_LESS_THAN expression\n              | expression IS_EQUAL_TO expression\n              | expression IS_GREATER_THAN expression\n              | expression IS_NOT_EQUAL_TO expression\n              | expression GREATER_THAN_OR_EQUAL_TO expression\n              | expression LESS_THAN_OR_EQUAL_TO expression\n    \n    expression : expression PLUS expression\n               | expression MINUS expression\n               | expression TIMES expression\n               | expression DIVIDE expression\n               | expression POWER expression\n               | LPAREN expression RPAREN\n               | term\n               | function_call\n    \n    term : NUMBER\n         | STRING_LITERAL\n         | BOOLEAN\n         | IDENTIFIER\n    \n    boolean : TRUE\n            | FALSE\n    \n    display : SHOW STRING_LITERAL\n            | SHOW IDENTIFIER\n    \n    loop : FOR IDENTIFIER IN list DO statements\n         | WHILE condition DO statements\n         | DO statements WHILE condition\n    \n    list : LBRACKET expression_list RBRACKET\n         | empty\n    \n    expression_list : expression\n                    | expression COMMA expression_list\n                    | empty\n    \n    function : FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE\n             | FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE \n    \n    function_call : IDENTIFIER LPAREN STRING_LITERAL RPAREN\n                  | IDENTIFIER LPAREN NUMBER RPAREN\n    \n    parameters : IDENTIFIER\n               | IDENTIFIER COMMA parameters\n               | empty\n    \n    return_statement_opt : RETURN expression\n                         | empty\n    \n    empty : \n    '
    
_lr_action_items = {'LET':([0,3,4,5,6,7,8,9,10,12,15,19,20,22,23,24,34,35,41,42,43,44,45,46,47,48,51,60,62,63,64,65,66,67,69,70,71,72,73,74,78,79,83,85,87,89,92,93,95,98,100,104,],[11,11,-4,-5,-6,-7,-8,-9,-10,-33,11,-31,-30,-28,-32,-2,-29,-33,-36,-37,-22,-23,-24,-25,-26,-55,11,11,-27,-11,-12,-45,-48,-49,-16,-17,-18,-19,-20,-21,-40,-39,-55,11,11,-43,-44,-13,-38,11,-47,-46,]),'IF':([0,3,4,5,6,7,8,9,10,12,15,19,20,22,23,24,34,35,41,42,43,44,45,46,47,48,51,60,62,63,64,65,66,67,69,70,71,72,73,74,78,79,83,85,87,89,92,93,95,98,100,104,],[13,13,-4,-5,-6,-7,-8,-9,-10,-33,13,-31,-30,-28,-32,-2,-29,-33,-36,-37,-22,-23,-24,-25,-26,-55,13,13,-27,-11,-12,-45,-48,-49,-16,-17,-18,-19,-20,-21,-40,-39,-55,13,13,-43,-44,-13,-38,13,-47,-46,]),'FOR':([0,3,4,5,6,7,8,9,10,12,15,19,20,22,23,24,34,35,41,42,43,44,45,46,47,48,51,60,62,63,64,65,66,67,69,70,71,72,73,74,78,79,83,85,87,89,92,93,95,98,100,104,],[14,14,-4,-5,-6,-7,-8,-9,-10,-33,14,-31,-30,-28,-32,-2,-29,-33,-36,-37,-22,-23,-24,-25,-26,-55,14,14,-27,-11,-12,-45,-48,-49,-16,-17,-18,-19,-20,-21,-40,-39,-55,14,14,-43,-44,-13,-38,14,-47,-46,]),'WHILE':([0,3,4,5,6,7,8,9,10,12,15,19,20,22,23,24,34,35,37,41,42,43,44,45,46,47,48,51,60,62,63,64,65,66,67,69,70,71,72,73,74,78,79,83,85,87,89,92,93,95,98,100,104,],[16,16,-4,-5,-6,-7,-8,-9,-10,-33,16,-31,-30,-28,-32,-2,-29,-33,59,-36,-37,-22,-23,-24,-25,-26,-55,16,16,-27,-11,-12,-45,-48,-49,-16,-17,-18,-19,-20,-21,-40,-39,-55,16,16,-43,-44,-13,-38,16,-47,-46,]),'DO':([0,3,4,5,6,7,8,9,10,12,15,19,20,22,23,24,34,35,38,41,42,43,44,45,46,47,48,51,58,60,62,63,64,65,66,67,69,70,71,72,73,74,75,77,78,79,83,85,87,89,92,93,95,96,98,100,104,],[15,15,-4,-5,-6,-7,-8,-9,-10,-33,15,-31,-30,-28,-32,-2,-29,-33,60,-36,-37,-22,-23,-24,-25,-26,-55,15,-55,15,-27,-11,-12,-45,-48,-49,-16,-17,-18,-19,-20,-21,87,-42,-40,-39,-55,15,15,-43,-44,-13,-38,-41,15,-47,-46,]),'FUNCTION':([0,3,4,5,6,7,8,9,10,12,15,19,20,22,23,24,34,35,41,42,43,44,45,46,47,48,51,60,62,63,64,65,66,67,69,70,71,72,73,74,78,79,83,85,87,89,92,93,95,98,100,104,],[17,17,-4,-5,-6,-7,-8,-9,-10,-33,17,-31,-30,-28,-32,-2,-29,-33,-36,-37,-22,-23,-24,-25,-26,-55,17,17,-27,-11,-12,-45,-48,-49,-16,-17,-18,-19,-20,-21,-40,-39,-55,17,17,-43,-44,-13,-38,17,-47,-46,]),'IDENTIFIER':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,34,35,41,42,43,44,45,46,47,48,51,52,53,54,55,56,57,59,60,61,62,63,64,65,66,67,69,70,71,72,73,74,76,78,79,83,85,87,89,90,92,93,95,98,100,102,104,],[12,12,-4,-5,-6,-7,-8,-9,-10,30,-33,35,36,12,35,39,35,-31,-30,42,-28,-32,-2,35,35,35,35,35,-29,-33,-36,-37,-22,-23,-24,-25,-26,35,12,35,35,35,35,35,35,35,12,80,-27,-11,-12,-45,-48,-49,-16,-17,-18,-19,-20,-21,35,-40,-39,35,12,12,-43,80,-44,-13,-38,12,-47,35,-46,]),'SHOW':([0,3,4,5,6,7,8,9,10,12,15,19,20,22,23,24,34,35,41,42,43,44,45,46,47,48,51,60,62,63,64,65,66,67,69,70,71,72,73,74,78,79,83,85,87,89,92,93,95,98,100,104,],[21,21,-4,-5,-6,-7,-8,-9,-10,-33,21,-31,-30,-28,-32,-2,-29,-33,-36,-37,-22,-23,-24,-25,-26,-55,21,21,-27,-11,-12,-45,-48,-49,-16,-17,-18,-19,-20,-21,-40,-39,-55,21,21,-43,-44,-13,-38,21,-47,-46,]),'LPAREN':([0,3,4,5,6,7,8,9,10,12,13,15,16,18,19,20,22,23,24,25,26,27,28,29,34,35,39,41,42,43,44,45,46,47,48,51,52,53,54,55,56,57,59,60,62,63,64,65,66,67,69,70,71,72,73,74,76,78,79,83,85,87,89,92,93,95,98,100,102,104,],[18,18,-4,-5,-6,-7,-8,-9,-10,31,18,18,18,18,-31,-30,-28,-32,-2,18,18,18,18,18,-29,31,61,-36,-37,-22,-23,-24,-25,-26,18,18,18,18,18,18,18,18,18,18,-27,-11,-12,-45,-48,-49,-16,-17,-18,-19,-20,-21,18,-40,-39,18,18,18,-43,-44,-13,-38,18,-47,18,-46,]),'NUMBER':([0,3,4,5,6,7,8,9,10,12,13,15,16,18,19,20,22,23,24,25,26,27,28,29,31,34,35,41,42,43,44,45,46,47,48,51,52,53,54,55,56,57,59,60,62,63,64,65,66,67,69,70,71,72,73,74,76,78,79,83,85,87,89,92,93,95,98,100,102,104,],[20,20,-4,-5,-6,-7,-8,-9,-10,-33,20,20,20,20,-31,-30,-28,-32,-2,20,20,20,20,20,50,-29,-33,-36,-37,-22,-23,-24,-25,-26,20,20,20,20,20,20,20,20,20,20,-27,-11,-12,-45,-48,-49,-16,-17,-18,-19,-20,-21,20,-40,-39,20,20,20,-43,-44,-13,-38,20,-47,20,-46,]),'STRING_LITERAL':([0,3,4,5,6,7,8,9,10,12,13,15,16,18,19,20,21,22,23,24,25,26,27,28,29,31,34,35,41,42,43,44,45,46,47,48,51,52,53,54,55,56,57,59,60,62,63,64,65,66,67,69,70,71,72,73,74,76,78,79,83,85,87,89,92,93,95,98,100,102,104,],[19,19,-4,-5,-6,-7,-8,-9,-10,-33,19,19,19,19,-31,-30,41,-28,-32,-2,19,19,19,19,19,49,-29,-33,-36,-37,-22,-23,-24,-25,-26,19,19,19,19,19,19,19,19,19,19,-27,-11,-12,-45,-48,-49,-16,-17,-18,-19,-20,-21,19,-40,-39,19,19,19,-43,-44,-13,-38,19,-47,19,-46,]),'BOOLEAN':([0,3,4,5,6,7,8,9,10,12,13,15,16,18,19,20,22,23,24,25,26,27,28,29,34,35,41,42,43,44,45,46,47,48,51,52,53,54,55,56,57,59,60,62,63,64,65,66,67,69,70,71,72,73,74,76,78,79,83,85,87,89,92,93,95,98,100,102,104,],[23,23,-4,-5,-6,-7,-8,-9,-10,-33,23,23,23,23,-31,-30,-28,-32,-2,23,23,23,23,23,-29,-33,-36,-37,-22,-23,-24,-25,-26,23,23,23,23,23,23,23,23,23,23,-27,-11,-12,-45,-48,-49,-16,-17,-18,-19,-20,-21,23,-40,-39,23,23,23,-43,-44,-13,-38,23,-47,23,-46,]),'$end':([1,2,3,4,5,6,7,8,9,10,12,19,20,22,23,24,34,35,41,42,43,44,45,46,47,48,62,63,64,65,66,67,69,70,71,72,73,74,78,79,83,89,92,93,95,100,104,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-33,-31,-30,-28,-32,-2,-29,-33,-36,-37,-22,-23,-24,-25,-26,-55,-27,-11,-12,-45,-48,-49,-16,-17,-18,-19,-20,-21,-40,-39,-55,-43,-44,-13,-38,-47,-46,]),'ELSE':([3,4,5,6,7,8,9,10,12,19,20,22,23,24,34,35,41,42,43,44,45,46,47,48,62,63,64,65,66,67,68,69,70,71,72,73,74,78,79,83,89,92,93,95,100,104,],[-3,-4,-5,-6,-7,-8,-9,-10,-33,-31,-30,-28,-32,-2,-29,-33,-36,-37,-22,-23,-24,-25,-26,-55,-27,-11,-12,-45,-48,-49,85,-16,-17,-18,-19,-20,-21,-40,-39,-55,-43,-44,-13,-38,-47,-46,]),'END':([3,4,5,6,7,8,9,10,12,19,20,22,23,24,34,35,41,42,43,44,45,46,47,48,62,63,64,65,66,67,68,69,70,71,72,73,74,78,79,83,84,86,89,92,93,94,95,100,104,],[-3,-4,-5,-6,-7,-8,-9,-10,-33,-31,-30,-28,-32,-2,-29,-33,-36,-37,-22,-23,-24,-25,-26,-55,-27,-11,-12,-45,-48,-49,-55,-16,-17,-18,-19,-20,-21,-40,-39,-55,93,-15,-43,-44,-13,-14,-38,-47,-46,]),'RBRACE':([3,4,5,6,7,8,9,10,12,19,20,22,23,24,34,35,41,42,43,44,45,46,47,48,62,63,64,65,66,67,69,70,71,72,73,74,78,79,83,89,92,93,95,99,100,101,103,104,105,],[-3,-4,-5,-6,-7,-8,-9,-10,-33,-31,-30,-28,-32,-2,-29,-33,-36,-37,-22,-23,-24,-25,-26,-55,-27,-11,-12,-45,-48,-49,-16,-17,-18,-19,-20,-21,-40,-39,-55,-43,-44,-13,-38,100,-47,104,-54,-46,-53,]),'PLUS':([8,10,12,19,20,22,23,33,34,35,40,43,44,45,46,47,62,63,66,67,69,70,71,72,73,74,89,105,],[-29,25,-33,-31,-30,-28,-32,25,-29,-33,25,-22,-23,-24,-25,-26,-27,25,-48,-49,25,25,25,25,25,25,25,25,]),'MINUS':([8,10,12,19,20,22,23,33,34,35,40,43,44,45,46,47,62,63,66,67,69,70,71,72,73,74,89,105,],[-29,26,-33,-31,-30,-28,-32,26,-29,-33,26,-22,-23,-24,-25,-26,-27,26,-48,-49,26,26,26,26,26,26,26,26,]),'TIMES':([8,10,12,19,20,22,23,33,34,35,40,43,44,45,46,47,62,63,66,67,69,70,71,72,73,74,89,105,],[-29,27,-33,-31,-30,-28,-32,27,-29,-33,27,27,27,-24,-25,-26,-27,27,-48,-49,27,27,27,27,27,27,27,27,]),'DIVIDE':([8,10,12,19,20,22,23,33,34,35,40,43,44,45,46,47,62,63,66,67,69,70,71,72,73,74,89,105,],[-29,28,-33,-31,-30,-28,-32,28,-29,-33,28,28,28,-24,-25,-26,-27,28,-48,-49,28,28,28,28,28,28,28,28,]),'POWER':([8,10,12,19,20,22,23,33,34,35,40,43,44,45,46,47,62,63,66,67,69,70,71,72,73,74,89,105,],[-29,29,-33,-31,-30,-28,-32,29,-29,-33,29,29,29,29,29,29,-27,29,-48,-49,29,29,29,29,29,29,29,29,]),'IS_LESS_THAN':([19,20,22,23,33,34,35,43,44,45,46,47,62,66,67,],[-31,-30,-28,-32,52,-29,-33,-22,-23,-24,-25,-26,-27,-48,-49,]),'IS_EQUAL_TO':([19,20,22,23,33,34,35,43,44,45,46,47,62,66,67,],[-31,-30,-28,-32,53,-29,-33,-22,-23,-24,-25,-26,-27,-48,-49,]),'IS_GREATER_THAN':([19,20,22,23,33,34,35,43,44,45,46,47,62,66,67,],[-31,-30,-28,-32,54,-29,-33,-22,-23,-24,-25,-26,-27,-48,-49,]),'IS_NOT_EQUAL_TO':([19,20,22,23,33,34,35,43,44,45,46,47,62,66,67,],[-31,-30,-28,-32,55,-29,-33,-22,-23,-24,-25,-26,-27,-48,-49,]),'GREATER_THAN_OR_EQUAL_TO':([19,20,22,23,33,34,35,43,44,45,46,47,62,66,67,],[-31,-30,-28,-32,56,-29,-33,-22,-23,-24,-25,-26,-27,-48,-49,]),'LESS_THAN_OR_EQUAL_TO':([19,20,22,23,33,34,35,43,44,45,46,47,62,66,67,],[-31,-30,-28,-32,57,-29,-33,-22,-23,-24,-25,-26,-27,-48,-49,]),'RPAREN':([19,20,22,23,34,35,40,43,44,45,46,47,49,50,61,62,66,67,80,81,82,90,97,],[-31,-30,-28,-32,-29,-33,62,-22,-23,-24,-25,-26,66,67,-55,-27,-48,-49,-50,91,-52,-55,-51,]),'COMMA':([19,20,22,23,34,35,43,44,45,46,47,62,63,66,67,80,89,],[-31,-30,-28,-32,-29,-33,-22,-23,-24,-25,-26,-27,83,-48,-49,90,83,]),'THEN':([19,20,22,23,32,34,35,43,44,45,46,47,62,66,67,69,70,71,72,73,74,],[-31,-30,-28,-32,51,-29,-33,-22,-23,-24,-25,-26,-27,-48,-49,-16,-17,-18,-19,-20,-21,]),'RBRACKET':([19,20,22,23,34,35,43,44,45,46,47,62,65,66,67,76,83,88,89,92,],[-31,-30,-28,-32,-29,-33,-22,-23,-24,-25,-26,-27,-45,-48,-49,-55,-55,96,-43,-44,]),'EQUAL':([30,],[48,]),'IN':([36,],[58,]),'LBRACKET':([58,],[76,]),'LBRACE':([91,],[98,]),'RETURN':([100,],[102,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,3,15,51,60,85,87,98,],[2,24,37,68,79,94,95,99,]),'statement':([0,3,15,51,60,85,87,98,],[3,3,3,3,3,3,3,3,]),'assignment':([0,3,15,51,60,85,87,98,],[4,4,4,4,4,4,4,4,]),'conditional':([0,3,15,51,60,85,87,98,],[5,5,5,5,5,5,5,5,]),'loop':([0,3,15,51,60,85,87,98,],[6,6,6,6,6,6,6,6,]),'function':([0,3,15,51,60,85,87,98,],[7,7,7,7,7,7,7,7,]),'function_call':([0,3,13,15,16,18,25,26,27,28,29,48,51,52,53,54,55,56,57,59,60,76,83,85,87,98,102,],[8,8,34,8,34,34,34,34,34,34,34,34,8,34,34,34,34,34,34,34,8,34,34,8,8,8,34,]),'display':([0,3,15,51,60,85,87,98,],[9,9,9,9,9,9,9,9,]),'expression':([0,3,13,15,16,18,25,26,27,28,29,48,51,52,53,54,55,56,57,59,60,76,83,85,87,98,102,],[10,10,33,10,33,40,43,44,45,46,47,63,10,69,70,71,72,73,74,33,10,89,89,10,10,10,105,]),'term':([0,3,13,15,16,18,25,26,27,28,29,48,51,52,53,54,55,56,57,59,60,76,83,85,87,98,102,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'condition':([13,16,59,],[32,38,78,]),'expression_list':([48,76,83,],[64,88,92,]),'empty':([48,58,61,68,76,83,90,100,],[65,77,82,86,65,65,82,103,]),'list':([58,],[75,]),'parameters':([61,90,],[81,97,]),'else_statements_opt':([68,],[84,]),'return_statement_opt':([100,],[101,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','yacc.py',38),
  ('statements -> statement statements','statements',2,'p_statements','yacc.py',44),
  ('statements -> statement','statements',1,'p_statements','yacc.py',45),
  ('statement -> assignment','statement',1,'p_statement','yacc.py',57),
  ('statement -> conditional','statement',1,'p_statement','yacc.py',58),
  ('statement -> loop','statement',1,'p_statement','yacc.py',59),
  ('statement -> function','statement',1,'p_statement','yacc.py',60),
  ('statement -> function_call','statement',1,'p_statement','yacc.py',61),
  ('statement -> display','statement',1,'p_statement','yacc.py',62),
  ('statement -> expression','statement',1,'p_statement','yacc.py',63),
  ('assignment -> LET IDENTIFIER EQUAL expression','assignment',4,'p_assignment','yacc.py',70),
  ('assignment -> LET IDENTIFIER EQUAL expression_list','assignment',4,'p_assignment','yacc.py',71),
  ('conditional -> IF condition THEN statements else_statements_opt END','conditional',6,'p_conditional','yacc.py',79),
  ('else_statements_opt -> ELSE statements','else_statements_opt',2,'p_else_statements_opt','yacc.py',85),
  ('else_statements_opt -> empty','else_statements_opt',1,'p_else_statements_opt','yacc.py',86),
  ('condition -> expression IS_LESS_THAN expression','condition',3,'p_condition','yacc.py',94),
  ('condition -> expression IS_EQUAL_TO expression','condition',3,'p_condition','yacc.py',95),
  ('condition -> expression IS_GREATER_THAN expression','condition',3,'p_condition','yacc.py',96),
  ('condition -> expression IS_NOT_EQUAL_TO expression','condition',3,'p_condition','yacc.py',97),
  ('condition -> expression GREATER_THAN_OR_EQUAL_TO expression','condition',3,'p_condition','yacc.py',98),
  ('condition -> expression LESS_THAN_OR_EQUAL_TO expression','condition',3,'p_condition','yacc.py',99),
  ('expression -> expression PLUS expression','expression',3,'p_expression','yacc.py',105),
  ('expression -> expression MINUS expression','expression',3,'p_expression','yacc.py',106),
  ('expression -> expression TIMES expression','expression',3,'p_expression','yacc.py',107),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','yacc.py',108),
  ('expression -> expression POWER expression','expression',3,'p_expression','yacc.py',109),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','yacc.py',110),
  ('expression -> term','expression',1,'p_expression','yacc.py',111),
  ('expression -> function_call','expression',1,'p_expression','yacc.py',112),
  ('term -> NUMBER','term',1,'p_term','yacc.py',139),
  ('term -> STRING_LITERAL','term',1,'p_term','yacc.py',140),
  ('term -> BOOLEAN','term',1,'p_term','yacc.py',141),
  ('term -> IDENTIFIER','term',1,'p_term','yacc.py',142),
  ('boolean -> TRUE','boolean',1,'p_boolean','yacc.py',159),
  ('boolean -> FALSE','boolean',1,'p_boolean','yacc.py',160),
  ('display -> SHOW STRING_LITERAL','display',2,'p_display','yacc.py',177),
  ('display -> SHOW IDENTIFIER','display',2,'p_display','yacc.py',178),
  ('loop -> FOR IDENTIFIER IN list DO statements','loop',6,'p_loop','yacc.py',184),
  ('loop -> WHILE condition DO statements','loop',4,'p_loop','yacc.py',185),
  ('loop -> DO statements WHILE condition','loop',4,'p_loop','yacc.py',186),
  ('list -> LBRACKET expression_list RBRACKET','list',3,'p_list','yacc.py',193),
  ('list -> empty','list',1,'p_list','yacc.py',194),
  ('expression_list -> expression','expression_list',1,'p_expression_list','yacc.py',202),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','yacc.py',203),
  ('expression_list -> empty','expression_list',1,'p_expression_list','yacc.py',204),
  ('function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE','function',10,'p_function','yacc.py',213),
  ('function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE','function',8,'p_function','yacc.py',214),
  ('function_call -> IDENTIFIER LPAREN STRING_LITERAL RPAREN','function_call',4,'p_function_call','yacc.py',221),
  ('function_call -> IDENTIFIER LPAREN NUMBER RPAREN','function_call',4,'p_function_call','yacc.py',222),
  ('parameters -> IDENTIFIER','parameters',1,'p_parameters','yacc.py',229),
  ('parameters -> IDENTIFIER COMMA parameters','parameters',3,'p_parameters','yacc.py',230),
  ('parameters -> empty','parameters',1,'p_parameters','yacc.py',231),
  ('return_statement_opt -> RETURN expression','return_statement_opt',2,'p_return_statement_opt','yacc.py',240),
  ('return_statement_opt -> empty','return_statement_opt',1,'p_return_statement_opt','yacc.py',241),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',249),
]
