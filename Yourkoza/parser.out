Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    CHARACTER
    DECREASE
    INCREASE
    INPUT
    INTEGER
    JOIN
    LETTER
    NOT
    OR
    POWER
    REAL
    RISK
    SAVE

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> assignment
Rule 5     statement -> conditional
Rule 6     statement -> loop
Rule 7     statement -> function
Rule 8     statement -> display
Rule 9     statement -> input
Rule 10    statement -> COMMENT
Rule 11    assignment -> LET IDENTIFIER BE EQUAL TO expression
Rule 12    conditional -> IF condition THEN statements else_statements_opt
Rule 13    else_statements_opt -> ELSE statements
Rule 14    else_statements_opt -> empty
Rule 15    condition -> expression IS_LESS_THAN expression
Rule 16    condition -> expression IS_EQUAL_TO expression
Rule 17    condition -> expression IS_GREATER_THAN expression
Rule 18    condition -> expression IS_NOT_EQUAL_TO expression
Rule 19    expression -> expression PLUS term
Rule 20    expression -> expression MINUS term
Rule 21    expression -> term
Rule 22    term -> term TIMES factor
Rule 23    term -> term DIVIDE factor
Rule 24    term -> factor
Rule 25    factor -> NUMBER
Rule 26    factor -> LPAREN expression RPAREN
Rule 27    input -> LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN
Rule 28    display -> SHOW expression
Rule 29    loop -> FOR IDENTIFIER IN list DO statements
Rule 30    loop -> WHILE condition DO statements
Rule 31    list -> LBRACKET expression_list RBRACKET
Rule 32    list -> empty
Rule 33    expression_list -> expression
Rule 34    expression_list -> expression_list COMMA expression
Rule 35    function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
Rule 36    parameters -> IDENTIFIER
Rule 37    parameters -> parameters COMMA IDENTIFIER
Rule 38    return_statement_opt -> RETURN expression
Rule 39    return_statement_opt -> empty
Rule 40    empty -> <empty>

Terminals, with rules where they appear

AND                  : 
BE                   : 11 27
CHARACTER            : 
COMMA                : 34 37
COMMENT              : 10
DECREASE             : 
DIVIDE               : 23
DO                   : 29 30
ELSE                 : 13
EQUAL                : 11 27
FOR                  : 29
FUNCTION             : 35
IDENTIFIER           : 11 27 27 29 35 36 37
IF                   : 12
IN                   : 29
INCREASE             : 
INPUT                : 
INTEGER              : 
IS_EQUAL_TO          : 16
IS_GREATER_THAN      : 17
IS_LESS_THAN         : 15
IS_NOT_EQUAL_TO      : 18
JOIN                 : 
LBRACE               : 35
LBRACKET             : 31
LET                  : 11 27
LETTER               : 
LPAREN               : 26 27 35
MINUS                : 20
NOT                  : 
NUMBER               : 25
OR                   : 
PLUS                 : 19
POWER                : 
RBRACE               : 35 35
RBRACKET             : 31
REAL                 : 
RETURN               : 38
RISK                 : 
RPAREN               : 26 27 35
SAVE                 : 
SHOW                 : 27 28
STRING_LITERAL       : 27
THEN                 : 12
TIMES                : 22
TO                   : 11 27
WHILE                : 30
error                : 

Nonterminals, with rules where they appear

assignment           : 4
condition            : 12 30
conditional          : 5
display              : 8
else_statements_opt  : 12
empty                : 14 32 39
expression           : 11 15 15 16 16 17 17 18 18 19 20 26 28 33 34 38
expression_list      : 31 34
factor               : 22 23 24
function             : 7
input                : 9
list                 : 29
loop                 : 6
parameters           : 35 37
program              : 0
return_statement_opt : 35
statement            : 2 3
statements           : 1 2 12 13 29 30 35
term                 : 19 20 21 22 23

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function
    (8) statement -> . display
    (9) statement -> . input
    (10) statement -> . COMMENT
    (11) assignment -> . LET IDENTIFIER BE EQUAL TO expression
    (12) conditional -> . IF condition THEN statements else_statements_opt
    (29) loop -> . FOR IDENTIFIER IN list DO statements
    (30) loop -> . WHILE condition DO statements
    (35) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (28) display -> . SHOW expression
    (27) input -> . LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    COMMENT         shift and go to state 10
    LET             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    FUNCTION        shift and go to state 15
    SHOW            shift and go to state 16

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function                       shift and go to state 7
    display                        shift and go to state 8
    input                          shift and go to state 9

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function
    (8) statement -> . display
    (9) statement -> . input
    (10) statement -> . COMMENT
    (11) assignment -> . LET IDENTIFIER BE EQUAL TO expression
    (12) conditional -> . IF condition THEN statements else_statements_opt
    (29) loop -> . FOR IDENTIFIER IN list DO statements
    (30) loop -> . WHILE condition DO statements
    (35) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (28) display -> . SHOW expression
    (27) input -> . LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    $end            reduce using rule 1 (program -> statements .)
    COMMENT         shift and go to state 10
    LET             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    FUNCTION        shift and go to state 15
    SHOW            shift and go to state 16

    statement                      shift and go to state 17
    assignment                     shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function                       shift and go to state 7
    display                        shift and go to state 8
    input                          shift and go to state 9

state 3

    (3) statements -> statement .

    COMMENT         reduce using rule 3 (statements -> statement .)
    LET             reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    FOR             reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    FUNCTION        reduce using rule 3 (statements -> statement .)
    SHOW            reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    ELSE            reduce using rule 3 (statements -> statement .)
    RBRACE          reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> assignment .

    COMMENT         reduce using rule 4 (statement -> assignment .)
    LET             reduce using rule 4 (statement -> assignment .)
    IF              reduce using rule 4 (statement -> assignment .)
    FOR             reduce using rule 4 (statement -> assignment .)
    WHILE           reduce using rule 4 (statement -> assignment .)
    FUNCTION        reduce using rule 4 (statement -> assignment .)
    SHOW            reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)
    ELSE            reduce using rule 4 (statement -> assignment .)
    RBRACE          reduce using rule 4 (statement -> assignment .)


state 5

    (5) statement -> conditional .

    COMMENT         reduce using rule 5 (statement -> conditional .)
    LET             reduce using rule 5 (statement -> conditional .)
    IF              reduce using rule 5 (statement -> conditional .)
    FOR             reduce using rule 5 (statement -> conditional .)
    WHILE           reduce using rule 5 (statement -> conditional .)
    FUNCTION        reduce using rule 5 (statement -> conditional .)
    SHOW            reduce using rule 5 (statement -> conditional .)
    $end            reduce using rule 5 (statement -> conditional .)
    ELSE            reduce using rule 5 (statement -> conditional .)
    RBRACE          reduce using rule 5 (statement -> conditional .)


state 6

    (6) statement -> loop .

    COMMENT         reduce using rule 6 (statement -> loop .)
    LET             reduce using rule 6 (statement -> loop .)
    IF              reduce using rule 6 (statement -> loop .)
    FOR             reduce using rule 6 (statement -> loop .)
    WHILE           reduce using rule 6 (statement -> loop .)
    FUNCTION        reduce using rule 6 (statement -> loop .)
    SHOW            reduce using rule 6 (statement -> loop .)
    $end            reduce using rule 6 (statement -> loop .)
    ELSE            reduce using rule 6 (statement -> loop .)
    RBRACE          reduce using rule 6 (statement -> loop .)


state 7

    (7) statement -> function .

    COMMENT         reduce using rule 7 (statement -> function .)
    LET             reduce using rule 7 (statement -> function .)
    IF              reduce using rule 7 (statement -> function .)
    FOR             reduce using rule 7 (statement -> function .)
    WHILE           reduce using rule 7 (statement -> function .)
    FUNCTION        reduce using rule 7 (statement -> function .)
    SHOW            reduce using rule 7 (statement -> function .)
    $end            reduce using rule 7 (statement -> function .)
    ELSE            reduce using rule 7 (statement -> function .)
    RBRACE          reduce using rule 7 (statement -> function .)


state 8

    (8) statement -> display .

    COMMENT         reduce using rule 8 (statement -> display .)
    LET             reduce using rule 8 (statement -> display .)
    IF              reduce using rule 8 (statement -> display .)
    FOR             reduce using rule 8 (statement -> display .)
    WHILE           reduce using rule 8 (statement -> display .)
    FUNCTION        reduce using rule 8 (statement -> display .)
    SHOW            reduce using rule 8 (statement -> display .)
    $end            reduce using rule 8 (statement -> display .)
    ELSE            reduce using rule 8 (statement -> display .)
    RBRACE          reduce using rule 8 (statement -> display .)


state 9

    (9) statement -> input .

    COMMENT         reduce using rule 9 (statement -> input .)
    LET             reduce using rule 9 (statement -> input .)
    IF              reduce using rule 9 (statement -> input .)
    FOR             reduce using rule 9 (statement -> input .)
    WHILE           reduce using rule 9 (statement -> input .)
    FUNCTION        reduce using rule 9 (statement -> input .)
    SHOW            reduce using rule 9 (statement -> input .)
    $end            reduce using rule 9 (statement -> input .)
    ELSE            reduce using rule 9 (statement -> input .)
    RBRACE          reduce using rule 9 (statement -> input .)


state 10

    (10) statement -> COMMENT .

    COMMENT         reduce using rule 10 (statement -> COMMENT .)
    LET             reduce using rule 10 (statement -> COMMENT .)
    IF              reduce using rule 10 (statement -> COMMENT .)
    FOR             reduce using rule 10 (statement -> COMMENT .)
    WHILE           reduce using rule 10 (statement -> COMMENT .)
    FUNCTION        reduce using rule 10 (statement -> COMMENT .)
    SHOW            reduce using rule 10 (statement -> COMMENT .)
    $end            reduce using rule 10 (statement -> COMMENT .)
    ELSE            reduce using rule 10 (statement -> COMMENT .)
    RBRACE          reduce using rule 10 (statement -> COMMENT .)


state 11

    (11) assignment -> LET . IDENTIFIER BE EQUAL TO expression
    (27) input -> LET . IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    IDENTIFIER      shift and go to state 18


state 12

    (12) conditional -> IF . condition THEN statements else_statements_opt
    (15) condition -> . expression IS_LESS_THAN expression
    (16) condition -> . expression IS_EQUAL_TO expression
    (17) condition -> . expression IS_GREATER_THAN expression
    (18) condition -> . expression IS_NOT_EQUAL_TO expression
    (19) expression -> . expression PLUS term
    (20) expression -> . expression MINUS term
    (21) expression -> . term
    (22) term -> . term TIMES factor
    (23) term -> . term DIVIDE factor
    (24) term -> . factor
    (25) factor -> . NUMBER
    (26) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 23
    LPAREN          shift and go to state 24

    condition                      shift and go to state 19
    expression                     shift and go to state 20
    term                           shift and go to state 21
    factor                         shift and go to state 22

state 13

    (29) loop -> FOR . IDENTIFIER IN list DO statements

    IDENTIFIER      shift and go to state 25


state 14

    (30) loop -> WHILE . condition DO statements
    (15) condition -> . expression IS_LESS_THAN expression
    (16) condition -> . expression IS_EQUAL_TO expression
    (17) condition -> . expression IS_GREATER_THAN expression
    (18) condition -> . expression IS_NOT_EQUAL_TO expression
    (19) expression -> . expression PLUS term
    (20) expression -> . expression MINUS term
    (21) expression -> . term
    (22) term -> . term TIMES factor
    (23) term -> . term DIVIDE factor
    (24) term -> . factor
    (25) factor -> . NUMBER
    (26) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 23
    LPAREN          shift and go to state 24

    condition                      shift and go to state 26
    expression                     shift and go to state 20
    term                           shift and go to state 21
    factor                         shift and go to state 22

state 15

    (35) function -> FUNCTION . IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE

    IDENTIFIER      shift and go to state 27


state 16

    (28) display -> SHOW . expression
    (19) expression -> . expression PLUS term
    (20) expression -> . expression MINUS term
    (21) expression -> . term
    (22) term -> . term TIMES factor
    (23) term -> . term DIVIDE factor
    (24) term -> . factor
    (25) factor -> . NUMBER
    (26) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 23
    LPAREN          shift and go to state 24

    expression                     shift and go to state 28
    term                           shift and go to state 21
    factor                         shift and go to state 22

state 17

    (2) statements -> statements statement .

    COMMENT         reduce using rule 2 (statements -> statements statement .)
    LET             reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    FOR             reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    FUNCTION        reduce using rule 2 (statements -> statements statement .)
    SHOW            reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    ELSE            reduce using rule 2 (statements -> statements statement .)
    RBRACE          reduce using rule 2 (statements -> statements statement .)


state 18

    (11) assignment -> LET IDENTIFIER . BE EQUAL TO expression
    (27) input -> LET IDENTIFIER . BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    BE              shift and go to state 29


state 19

    (12) conditional -> IF condition . THEN statements else_statements_opt

    THEN            shift and go to state 30


state 20

    (15) condition -> expression . IS_LESS_THAN expression
    (16) condition -> expression . IS_EQUAL_TO expression
    (17) condition -> expression . IS_GREATER_THAN expression
    (18) condition -> expression . IS_NOT_EQUAL_TO expression
    (19) expression -> expression . PLUS term
    (20) expression -> expression . MINUS term

    IS_LESS_THAN    shift and go to state 31
    IS_EQUAL_TO     shift and go to state 32
    IS_GREATER_THAN shift and go to state 33
    IS_NOT_EQUAL_TO shift and go to state 34
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36


state 21

    (21) expression -> term .
    (22) term -> term . TIMES factor
    (23) term -> term . DIVIDE factor

    IS_LESS_THAN    reduce using rule 21 (expression -> term .)
    IS_EQUAL_TO     reduce using rule 21 (expression -> term .)
    IS_GREATER_THAN reduce using rule 21 (expression -> term .)
    IS_NOT_EQUAL_TO reduce using rule 21 (expression -> term .)
    PLUS            reduce using rule 21 (expression -> term .)
    MINUS           reduce using rule 21 (expression -> term .)
    COMMENT         reduce using rule 21 (expression -> term .)
    LET             reduce using rule 21 (expression -> term .)
    IF              reduce using rule 21 (expression -> term .)
    FOR             reduce using rule 21 (expression -> term .)
    WHILE           reduce using rule 21 (expression -> term .)
    FUNCTION        reduce using rule 21 (expression -> term .)
    SHOW            reduce using rule 21 (expression -> term .)
    $end            reduce using rule 21 (expression -> term .)
    ELSE            reduce using rule 21 (expression -> term .)
    RBRACE          reduce using rule 21 (expression -> term .)
    RPAREN          reduce using rule 21 (expression -> term .)
    THEN            reduce using rule 21 (expression -> term .)
    DO              reduce using rule 21 (expression -> term .)
    RBRACKET        reduce using rule 21 (expression -> term .)
    COMMA           reduce using rule 21 (expression -> term .)
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38


state 22

    (24) term -> factor .

    TIMES           reduce using rule 24 (term -> factor .)
    DIVIDE          reduce using rule 24 (term -> factor .)
    IS_LESS_THAN    reduce using rule 24 (term -> factor .)
    IS_EQUAL_TO     reduce using rule 24 (term -> factor .)
    IS_GREATER_THAN reduce using rule 24 (term -> factor .)
    IS_NOT_EQUAL_TO reduce using rule 24 (term -> factor .)
    PLUS            reduce using rule 24 (term -> factor .)
    MINUS           reduce using rule 24 (term -> factor .)
    COMMENT         reduce using rule 24 (term -> factor .)
    LET             reduce using rule 24 (term -> factor .)
    IF              reduce using rule 24 (term -> factor .)
    FOR             reduce using rule 24 (term -> factor .)
    WHILE           reduce using rule 24 (term -> factor .)
    FUNCTION        reduce using rule 24 (term -> factor .)
    SHOW            reduce using rule 24 (term -> factor .)
    $end            reduce using rule 24 (term -> factor .)
    ELSE            reduce using rule 24 (term -> factor .)
    RBRACE          reduce using rule 24 (term -> factor .)
    RPAREN          reduce using rule 24 (term -> factor .)
    THEN            reduce using rule 24 (term -> factor .)
    DO              reduce using rule 24 (term -> factor .)
    RBRACKET        reduce using rule 24 (term -> factor .)
    COMMA           reduce using rule 24 (term -> factor .)


state 23

    (25) factor -> NUMBER .

    TIMES           reduce using rule 25 (factor -> NUMBER .)
    DIVIDE          reduce using rule 25 (factor -> NUMBER .)
    IS_LESS_THAN    reduce using rule 25 (factor -> NUMBER .)
    IS_EQUAL_TO     reduce using rule 25 (factor -> NUMBER .)
    IS_GREATER_THAN reduce using rule 25 (factor -> NUMBER .)
    IS_NOT_EQUAL_TO reduce using rule 25 (factor -> NUMBER .)
    PLUS            reduce using rule 25 (factor -> NUMBER .)
    MINUS           reduce using rule 25 (factor -> NUMBER .)
    COMMENT         reduce using rule 25 (factor -> NUMBER .)
    LET             reduce using rule 25 (factor -> NUMBER .)
    IF              reduce using rule 25 (factor -> NUMBER .)
    FOR             reduce using rule 25 (factor -> NUMBER .)
    WHILE           reduce using rule 25 (factor -> NUMBER .)
    FUNCTION        reduce using rule 25 (factor -> NUMBER .)
    SHOW            reduce using rule 25 (factor -> NUMBER .)
    $end            reduce using rule 25 (factor -> NUMBER .)
    ELSE            reduce using rule 25 (factor -> NUMBER .)
    RBRACE          reduce using rule 25 (factor -> NUMBER .)
    RPAREN          reduce using rule 25 (factor -> NUMBER .)
    THEN            reduce using rule 25 (factor -> NUMBER .)
    DO              reduce using rule 25 (factor -> NUMBER .)
    RBRACKET        reduce using rule 25 (factor -> NUMBER .)
    COMMA           reduce using rule 25 (factor -> NUMBER .)


state 24

    (26) factor -> LPAREN . expression RPAREN
    (19) expression -> . expression PLUS term
    (20) expression -> . expression MINUS term
    (21) expression -> . term
    (22) term -> . term TIMES factor
    (23) term -> . term DIVIDE factor
    (24) term -> . factor
    (25) factor -> . NUMBER
    (26) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 23
    LPAREN          shift and go to state 24

    expression                     shift and go to state 39
    term                           shift and go to state 21
    factor                         shift and go to state 22

state 25

    (29) loop -> FOR IDENTIFIER . IN list DO statements

    IN              shift and go to state 40


state 26

    (30) loop -> WHILE condition . DO statements

    DO              shift and go to state 41


state 27

    (35) function -> FUNCTION IDENTIFIER . LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE

    LPAREN          shift and go to state 42


state 28

    (28) display -> SHOW expression .
    (19) expression -> expression . PLUS term
    (20) expression -> expression . MINUS term

    COMMENT         reduce using rule 28 (display -> SHOW expression .)
    LET             reduce using rule 28 (display -> SHOW expression .)
    IF              reduce using rule 28 (display -> SHOW expression .)
    FOR             reduce using rule 28 (display -> SHOW expression .)
    WHILE           reduce using rule 28 (display -> SHOW expression .)
    FUNCTION        reduce using rule 28 (display -> SHOW expression .)
    SHOW            reduce using rule 28 (display -> SHOW expression .)
    $end            reduce using rule 28 (display -> SHOW expression .)
    ELSE            reduce using rule 28 (display -> SHOW expression .)
    RBRACE          reduce using rule 28 (display -> SHOW expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36


state 29

    (11) assignment -> LET IDENTIFIER BE . EQUAL TO expression
    (27) input -> LET IDENTIFIER BE . EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    EQUAL           shift and go to state 43


state 30

    (12) conditional -> IF condition THEN . statements else_statements_opt
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function
    (8) statement -> . display
    (9) statement -> . input
    (10) statement -> . COMMENT
    (11) assignment -> . LET IDENTIFIER BE EQUAL TO expression
    (12) conditional -> . IF condition THEN statements else_statements_opt
    (29) loop -> . FOR IDENTIFIER IN list DO statements
    (30) loop -> . WHILE condition DO statements
    (35) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (28) display -> . SHOW expression
    (27) input -> . LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    COMMENT         shift and go to state 10
    LET             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    FUNCTION        shift and go to state 15
    SHOW            shift and go to state 16

    statements                     shift and go to state 44
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function                       shift and go to state 7
    display                        shift and go to state 8
    input                          shift and go to state 9

state 31

    (15) condition -> expression IS_LESS_THAN . expression
    (19) expression -> . expression PLUS term
    (20) expression -> . expression MINUS term
    (21) expression -> . term
    (22) term -> . term TIMES factor
    (23) term -> . term DIVIDE factor
    (24) term -> . factor
    (25) factor -> . NUMBER
    (26) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 23
    LPAREN          shift and go to state 24

    expression                     shift and go to state 45
    term                           shift and go to state 21
    factor                         shift and go to state 22

state 32

    (16) condition -> expression IS_EQUAL_TO . expression
    (19) expression -> . expression PLUS term
    (20) expression -> . expression MINUS term
    (21) expression -> . term
    (22) term -> . term TIMES factor
    (23) term -> . term DIVIDE factor
    (24) term -> . factor
    (25) factor -> . NUMBER
    (26) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 23
    LPAREN          shift and go to state 24

    expression                     shift and go to state 46
    term                           shift and go to state 21
    factor                         shift and go to state 22

state 33

    (17) condition -> expression IS_GREATER_THAN . expression
    (19) expression -> . expression PLUS term
    (20) expression -> . expression MINUS term
    (21) expression -> . term
    (22) term -> . term TIMES factor
    (23) term -> . term DIVIDE factor
    (24) term -> . factor
    (25) factor -> . NUMBER
    (26) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 23
    LPAREN          shift and go to state 24

    expression                     shift and go to state 47
    term                           shift and go to state 21
    factor                         shift and go to state 22

state 34

    (18) condition -> expression IS_NOT_EQUAL_TO . expression
    (19) expression -> . expression PLUS term
    (20) expression -> . expression MINUS term
    (21) expression -> . term
    (22) term -> . term TIMES factor
    (23) term -> . term DIVIDE factor
    (24) term -> . factor
    (25) factor -> . NUMBER
    (26) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 23
    LPAREN          shift and go to state 24

    expression                     shift and go to state 48
    term                           shift and go to state 21
    factor                         shift and go to state 22

state 35

    (19) expression -> expression PLUS . term
    (22) term -> . term TIMES factor
    (23) term -> . term DIVIDE factor
    (24) term -> . factor
    (25) factor -> . NUMBER
    (26) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 23
    LPAREN          shift and go to state 24

    term                           shift and go to state 49
    factor                         shift and go to state 22

state 36

    (20) expression -> expression MINUS . term
    (22) term -> . term TIMES factor
    (23) term -> . term DIVIDE factor
    (24) term -> . factor
    (25) factor -> . NUMBER
    (26) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 23
    LPAREN          shift and go to state 24

    term                           shift and go to state 50
    factor                         shift and go to state 22

state 37

    (22) term -> term TIMES . factor
    (25) factor -> . NUMBER
    (26) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 23
    LPAREN          shift and go to state 24

    factor                         shift and go to state 51

state 38

    (23) term -> term DIVIDE . factor
    (25) factor -> . NUMBER
    (26) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 23
    LPAREN          shift and go to state 24

    factor                         shift and go to state 52

state 39

    (26) factor -> LPAREN expression . RPAREN
    (19) expression -> expression . PLUS term
    (20) expression -> expression . MINUS term

    RPAREN          shift and go to state 53
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36


state 40

    (29) loop -> FOR IDENTIFIER IN . list DO statements
    (31) list -> . LBRACKET expression_list RBRACKET
    (32) list -> . empty
    (40) empty -> .

    LBRACKET        shift and go to state 55
    DO              reduce using rule 40 (empty -> .)

    list                           shift and go to state 54
    empty                          shift and go to state 56

state 41

    (30) loop -> WHILE condition DO . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function
    (8) statement -> . display
    (9) statement -> . input
    (10) statement -> . COMMENT
    (11) assignment -> . LET IDENTIFIER BE EQUAL TO expression
    (12) conditional -> . IF condition THEN statements else_statements_opt
    (29) loop -> . FOR IDENTIFIER IN list DO statements
    (30) loop -> . WHILE condition DO statements
    (35) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (28) display -> . SHOW expression
    (27) input -> . LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    COMMENT         shift and go to state 10
    LET             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    FUNCTION        shift and go to state 15
    SHOW            shift and go to state 16

    statements                     shift and go to state 57
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function                       shift and go to state 7
    display                        shift and go to state 8
    input                          shift and go to state 9

state 42

    (35) function -> FUNCTION IDENTIFIER LPAREN . parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (36) parameters -> . IDENTIFIER
    (37) parameters -> . parameters COMMA IDENTIFIER

    IDENTIFIER      shift and go to state 58

    parameters                     shift and go to state 59

state 43

    (11) assignment -> LET IDENTIFIER BE EQUAL . TO expression
    (27) input -> LET IDENTIFIER BE EQUAL . TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    TO              shift and go to state 60


state 44

    (12) conditional -> IF condition THEN statements . else_statements_opt
    (2) statements -> statements . statement
    (13) else_statements_opt -> . ELSE statements
    (14) else_statements_opt -> . empty
    (4) statement -> . assignment
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function
    (8) statement -> . display
    (9) statement -> . input
    (10) statement -> . COMMENT
    (40) empty -> .
    (11) assignment -> . LET IDENTIFIER BE EQUAL TO expression
    (12) conditional -> . IF condition THEN statements else_statements_opt
    (29) loop -> . FOR IDENTIFIER IN list DO statements
    (30) loop -> . WHILE condition DO statements
    (35) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (28) display -> . SHOW expression
    (27) input -> . LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for SHOW resolved as shift
    ELSE            shift and go to state 62
    COMMENT         shift and go to state 10
    $end            reduce using rule 40 (empty -> .)
    RBRACE          reduce using rule 40 (empty -> .)
    LET             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    FUNCTION        shift and go to state 15
    SHOW            shift and go to state 16

  ! ELSE            [ reduce using rule 40 (empty -> .) ]
  ! COMMENT         [ reduce using rule 40 (empty -> .) ]
  ! LET             [ reduce using rule 40 (empty -> .) ]
  ! IF              [ reduce using rule 40 (empty -> .) ]
  ! FOR             [ reduce using rule 40 (empty -> .) ]
  ! WHILE           [ reduce using rule 40 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 40 (empty -> .) ]
  ! SHOW            [ reduce using rule 40 (empty -> .) ]

    else_statements_opt            shift and go to state 61
    statement                      shift and go to state 17
    empty                          shift and go to state 63
    assignment                     shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function                       shift and go to state 7
    display                        shift and go to state 8
    input                          shift and go to state 9

state 45

    (15) condition -> expression IS_LESS_THAN expression .
    (19) expression -> expression . PLUS term
    (20) expression -> expression . MINUS term

    THEN            reduce using rule 15 (condition -> expression IS_LESS_THAN expression .)
    DO              reduce using rule 15 (condition -> expression IS_LESS_THAN expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36


state 46

    (16) condition -> expression IS_EQUAL_TO expression .
    (19) expression -> expression . PLUS term
    (20) expression -> expression . MINUS term

    THEN            reduce using rule 16 (condition -> expression IS_EQUAL_TO expression .)
    DO              reduce using rule 16 (condition -> expression IS_EQUAL_TO expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36


state 47

    (17) condition -> expression IS_GREATER_THAN expression .
    (19) expression -> expression . PLUS term
    (20) expression -> expression . MINUS term

    THEN            reduce using rule 17 (condition -> expression IS_GREATER_THAN expression .)
    DO              reduce using rule 17 (condition -> expression IS_GREATER_THAN expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36


state 48

    (18) condition -> expression IS_NOT_EQUAL_TO expression .
    (19) expression -> expression . PLUS term
    (20) expression -> expression . MINUS term

    THEN            reduce using rule 18 (condition -> expression IS_NOT_EQUAL_TO expression .)
    DO              reduce using rule 18 (condition -> expression IS_NOT_EQUAL_TO expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36


state 49

    (19) expression -> expression PLUS term .
    (22) term -> term . TIMES factor
    (23) term -> term . DIVIDE factor

    IS_LESS_THAN    reduce using rule 19 (expression -> expression PLUS term .)
    IS_EQUAL_TO     reduce using rule 19 (expression -> expression PLUS term .)
    IS_GREATER_THAN reduce using rule 19 (expression -> expression PLUS term .)
    IS_NOT_EQUAL_TO reduce using rule 19 (expression -> expression PLUS term .)
    PLUS            reduce using rule 19 (expression -> expression PLUS term .)
    MINUS           reduce using rule 19 (expression -> expression PLUS term .)
    COMMENT         reduce using rule 19 (expression -> expression PLUS term .)
    LET             reduce using rule 19 (expression -> expression PLUS term .)
    IF              reduce using rule 19 (expression -> expression PLUS term .)
    FOR             reduce using rule 19 (expression -> expression PLUS term .)
    WHILE           reduce using rule 19 (expression -> expression PLUS term .)
    FUNCTION        reduce using rule 19 (expression -> expression PLUS term .)
    SHOW            reduce using rule 19 (expression -> expression PLUS term .)
    $end            reduce using rule 19 (expression -> expression PLUS term .)
    ELSE            reduce using rule 19 (expression -> expression PLUS term .)
    RBRACE          reduce using rule 19 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 19 (expression -> expression PLUS term .)
    THEN            reduce using rule 19 (expression -> expression PLUS term .)
    DO              reduce using rule 19 (expression -> expression PLUS term .)
    RBRACKET        reduce using rule 19 (expression -> expression PLUS term .)
    COMMA           reduce using rule 19 (expression -> expression PLUS term .)
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38


state 50

    (20) expression -> expression MINUS term .
    (22) term -> term . TIMES factor
    (23) term -> term . DIVIDE factor

    IS_LESS_THAN    reduce using rule 20 (expression -> expression MINUS term .)
    IS_EQUAL_TO     reduce using rule 20 (expression -> expression MINUS term .)
    IS_GREATER_THAN reduce using rule 20 (expression -> expression MINUS term .)
    IS_NOT_EQUAL_TO reduce using rule 20 (expression -> expression MINUS term .)
    PLUS            reduce using rule 20 (expression -> expression MINUS term .)
    MINUS           reduce using rule 20 (expression -> expression MINUS term .)
    COMMENT         reduce using rule 20 (expression -> expression MINUS term .)
    LET             reduce using rule 20 (expression -> expression MINUS term .)
    IF              reduce using rule 20 (expression -> expression MINUS term .)
    FOR             reduce using rule 20 (expression -> expression MINUS term .)
    WHILE           reduce using rule 20 (expression -> expression MINUS term .)
    FUNCTION        reduce using rule 20 (expression -> expression MINUS term .)
    SHOW            reduce using rule 20 (expression -> expression MINUS term .)
    $end            reduce using rule 20 (expression -> expression MINUS term .)
    ELSE            reduce using rule 20 (expression -> expression MINUS term .)
    RBRACE          reduce using rule 20 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 20 (expression -> expression MINUS term .)
    THEN            reduce using rule 20 (expression -> expression MINUS term .)
    DO              reduce using rule 20 (expression -> expression MINUS term .)
    RBRACKET        reduce using rule 20 (expression -> expression MINUS term .)
    COMMA           reduce using rule 20 (expression -> expression MINUS term .)
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38


state 51

    (22) term -> term TIMES factor .

    TIMES           reduce using rule 22 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 22 (term -> term TIMES factor .)
    IS_LESS_THAN    reduce using rule 22 (term -> term TIMES factor .)
    IS_EQUAL_TO     reduce using rule 22 (term -> term TIMES factor .)
    IS_GREATER_THAN reduce using rule 22 (term -> term TIMES factor .)
    IS_NOT_EQUAL_TO reduce using rule 22 (term -> term TIMES factor .)
    PLUS            reduce using rule 22 (term -> term TIMES factor .)
    MINUS           reduce using rule 22 (term -> term TIMES factor .)
    COMMENT         reduce using rule 22 (term -> term TIMES factor .)
    LET             reduce using rule 22 (term -> term TIMES factor .)
    IF              reduce using rule 22 (term -> term TIMES factor .)
    FOR             reduce using rule 22 (term -> term TIMES factor .)
    WHILE           reduce using rule 22 (term -> term TIMES factor .)
    FUNCTION        reduce using rule 22 (term -> term TIMES factor .)
    SHOW            reduce using rule 22 (term -> term TIMES factor .)
    $end            reduce using rule 22 (term -> term TIMES factor .)
    ELSE            reduce using rule 22 (term -> term TIMES factor .)
    RBRACE          reduce using rule 22 (term -> term TIMES factor .)
    RPAREN          reduce using rule 22 (term -> term TIMES factor .)
    THEN            reduce using rule 22 (term -> term TIMES factor .)
    DO              reduce using rule 22 (term -> term TIMES factor .)
    RBRACKET        reduce using rule 22 (term -> term TIMES factor .)
    COMMA           reduce using rule 22 (term -> term TIMES factor .)


state 52

    (23) term -> term DIVIDE factor .

    TIMES           reduce using rule 23 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 23 (term -> term DIVIDE factor .)
    IS_LESS_THAN    reduce using rule 23 (term -> term DIVIDE factor .)
    IS_EQUAL_TO     reduce using rule 23 (term -> term DIVIDE factor .)
    IS_GREATER_THAN reduce using rule 23 (term -> term DIVIDE factor .)
    IS_NOT_EQUAL_TO reduce using rule 23 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 23 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 23 (term -> term DIVIDE factor .)
    COMMENT         reduce using rule 23 (term -> term DIVIDE factor .)
    LET             reduce using rule 23 (term -> term DIVIDE factor .)
    IF              reduce using rule 23 (term -> term DIVIDE factor .)
    FOR             reduce using rule 23 (term -> term DIVIDE factor .)
    WHILE           reduce using rule 23 (term -> term DIVIDE factor .)
    FUNCTION        reduce using rule 23 (term -> term DIVIDE factor .)
    SHOW            reduce using rule 23 (term -> term DIVIDE factor .)
    $end            reduce using rule 23 (term -> term DIVIDE factor .)
    ELSE            reduce using rule 23 (term -> term DIVIDE factor .)
    RBRACE          reduce using rule 23 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 23 (term -> term DIVIDE factor .)
    THEN            reduce using rule 23 (term -> term DIVIDE factor .)
    DO              reduce using rule 23 (term -> term DIVIDE factor .)
    RBRACKET        reduce using rule 23 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 23 (term -> term DIVIDE factor .)


state 53

    (26) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 26 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 26 (factor -> LPAREN expression RPAREN .)
    IS_LESS_THAN    reduce using rule 26 (factor -> LPAREN expression RPAREN .)
    IS_EQUAL_TO     reduce using rule 26 (factor -> LPAREN expression RPAREN .)
    IS_GREATER_THAN reduce using rule 26 (factor -> LPAREN expression RPAREN .)
    IS_NOT_EQUAL_TO reduce using rule 26 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 26 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 26 (factor -> LPAREN expression RPAREN .)
    COMMENT         reduce using rule 26 (factor -> LPAREN expression RPAREN .)
    LET             reduce using rule 26 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 26 (factor -> LPAREN expression RPAREN .)
    FOR             reduce using rule 26 (factor -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 26 (factor -> LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 26 (factor -> LPAREN expression RPAREN .)
    SHOW            reduce using rule 26 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 26 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 26 (factor -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 26 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 26 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 26 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 26 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 26 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 26 (factor -> LPAREN expression RPAREN .)


state 54

    (29) loop -> FOR IDENTIFIER IN list . DO statements

    DO              shift and go to state 64


state 55

    (31) list -> LBRACKET . expression_list RBRACKET
    (33) expression_list -> . expression
    (34) expression_list -> . expression_list COMMA expression
    (19) expression -> . expression PLUS term
    (20) expression -> . expression MINUS term
    (21) expression -> . term
    (22) term -> . term TIMES factor
    (23) term -> . term DIVIDE factor
    (24) term -> . factor
    (25) factor -> . NUMBER
    (26) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 23
    LPAREN          shift and go to state 24

    expression_list                shift and go to state 65
    expression                     shift and go to state 66
    term                           shift and go to state 21
    factor                         shift and go to state 22

state 56

    (32) list -> empty .

    DO              reduce using rule 32 (list -> empty .)


state 57

    (30) loop -> WHILE condition DO statements .
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function
    (8) statement -> . display
    (9) statement -> . input
    (10) statement -> . COMMENT
    (11) assignment -> . LET IDENTIFIER BE EQUAL TO expression
    (12) conditional -> . IF condition THEN statements else_statements_opt
    (29) loop -> . FOR IDENTIFIER IN list DO statements
    (30) loop -> . WHILE condition DO statements
    (35) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (28) display -> . SHOW expression
    (27) input -> . LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for SHOW resolved as shift
    $end            reduce using rule 30 (loop -> WHILE condition DO statements .)
    ELSE            reduce using rule 30 (loop -> WHILE condition DO statements .)
    RBRACE          reduce using rule 30 (loop -> WHILE condition DO statements .)
    COMMENT         shift and go to state 10
    LET             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    FUNCTION        shift and go to state 15
    SHOW            shift and go to state 16

  ! COMMENT         [ reduce using rule 30 (loop -> WHILE condition DO statements .) ]
  ! LET             [ reduce using rule 30 (loop -> WHILE condition DO statements .) ]
  ! IF              [ reduce using rule 30 (loop -> WHILE condition DO statements .) ]
  ! FOR             [ reduce using rule 30 (loop -> WHILE condition DO statements .) ]
  ! WHILE           [ reduce using rule 30 (loop -> WHILE condition DO statements .) ]
  ! FUNCTION        [ reduce using rule 30 (loop -> WHILE condition DO statements .) ]
  ! SHOW            [ reduce using rule 30 (loop -> WHILE condition DO statements .) ]

    statement                      shift and go to state 17
    assignment                     shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function                       shift and go to state 7
    display                        shift and go to state 8
    input                          shift and go to state 9

state 58

    (36) parameters -> IDENTIFIER .

    RPAREN          reduce using rule 36 (parameters -> IDENTIFIER .)
    COMMA           reduce using rule 36 (parameters -> IDENTIFIER .)


state 59

    (35) function -> FUNCTION IDENTIFIER LPAREN parameters . RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (37) parameters -> parameters . COMMA IDENTIFIER

    RPAREN          shift and go to state 67
    COMMA           shift and go to state 68


state 60

    (11) assignment -> LET IDENTIFIER BE EQUAL TO . expression
    (27) input -> LET IDENTIFIER BE EQUAL TO . SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN
    (19) expression -> . expression PLUS term
    (20) expression -> . expression MINUS term
    (21) expression -> . term
    (22) term -> . term TIMES factor
    (23) term -> . term DIVIDE factor
    (24) term -> . factor
    (25) factor -> . NUMBER
    (26) factor -> . LPAREN expression RPAREN

    SHOW            shift and go to state 70
    NUMBER          shift and go to state 23
    LPAREN          shift and go to state 24

    expression                     shift and go to state 69
    term                           shift and go to state 21
    factor                         shift and go to state 22

state 61

    (12) conditional -> IF condition THEN statements else_statements_opt .

    COMMENT         reduce using rule 12 (conditional -> IF condition THEN statements else_statements_opt .)
    LET             reduce using rule 12 (conditional -> IF condition THEN statements else_statements_opt .)
    IF              reduce using rule 12 (conditional -> IF condition THEN statements else_statements_opt .)
    FOR             reduce using rule 12 (conditional -> IF condition THEN statements else_statements_opt .)
    WHILE           reduce using rule 12 (conditional -> IF condition THEN statements else_statements_opt .)
    FUNCTION        reduce using rule 12 (conditional -> IF condition THEN statements else_statements_opt .)
    SHOW            reduce using rule 12 (conditional -> IF condition THEN statements else_statements_opt .)
    $end            reduce using rule 12 (conditional -> IF condition THEN statements else_statements_opt .)
    ELSE            reduce using rule 12 (conditional -> IF condition THEN statements else_statements_opt .)
    RBRACE          reduce using rule 12 (conditional -> IF condition THEN statements else_statements_opt .)


state 62

    (13) else_statements_opt -> ELSE . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function
    (8) statement -> . display
    (9) statement -> . input
    (10) statement -> . COMMENT
    (11) assignment -> . LET IDENTIFIER BE EQUAL TO expression
    (12) conditional -> . IF condition THEN statements else_statements_opt
    (29) loop -> . FOR IDENTIFIER IN list DO statements
    (30) loop -> . WHILE condition DO statements
    (35) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (28) display -> . SHOW expression
    (27) input -> . LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    COMMENT         shift and go to state 10
    LET             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    FUNCTION        shift and go to state 15
    SHOW            shift and go to state 16

    statements                     shift and go to state 71
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function                       shift and go to state 7
    display                        shift and go to state 8
    input                          shift and go to state 9

state 63

    (14) else_statements_opt -> empty .

    ELSE            reduce using rule 14 (else_statements_opt -> empty .)
    COMMENT         reduce using rule 14 (else_statements_opt -> empty .)
    LET             reduce using rule 14 (else_statements_opt -> empty .)
    IF              reduce using rule 14 (else_statements_opt -> empty .)
    FOR             reduce using rule 14 (else_statements_opt -> empty .)
    WHILE           reduce using rule 14 (else_statements_opt -> empty .)
    FUNCTION        reduce using rule 14 (else_statements_opt -> empty .)
    SHOW            reduce using rule 14 (else_statements_opt -> empty .)
    $end            reduce using rule 14 (else_statements_opt -> empty .)
    RBRACE          reduce using rule 14 (else_statements_opt -> empty .)


state 64

    (29) loop -> FOR IDENTIFIER IN list DO . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function
    (8) statement -> . display
    (9) statement -> . input
    (10) statement -> . COMMENT
    (11) assignment -> . LET IDENTIFIER BE EQUAL TO expression
    (12) conditional -> . IF condition THEN statements else_statements_opt
    (29) loop -> . FOR IDENTIFIER IN list DO statements
    (30) loop -> . WHILE condition DO statements
    (35) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (28) display -> . SHOW expression
    (27) input -> . LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    COMMENT         shift and go to state 10
    LET             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    FUNCTION        shift and go to state 15
    SHOW            shift and go to state 16

    statements                     shift and go to state 72
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function                       shift and go to state 7
    display                        shift and go to state 8
    input                          shift and go to state 9

state 65

    (31) list -> LBRACKET expression_list . RBRACKET
    (34) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 73
    COMMA           shift and go to state 74


state 66

    (33) expression_list -> expression .
    (19) expression -> expression . PLUS term
    (20) expression -> expression . MINUS term

    RBRACKET        reduce using rule 33 (expression_list -> expression .)
    COMMA           reduce using rule 33 (expression_list -> expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36


state 67

    (35) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN . LBRACE statements RBRACE return_statement_opt RBRACE

    LBRACE          shift and go to state 75


state 68

    (37) parameters -> parameters COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 76


state 69

    (11) assignment -> LET IDENTIFIER BE EQUAL TO expression .
    (19) expression -> expression . PLUS term
    (20) expression -> expression . MINUS term

    COMMENT         reduce using rule 11 (assignment -> LET IDENTIFIER BE EQUAL TO expression .)
    LET             reduce using rule 11 (assignment -> LET IDENTIFIER BE EQUAL TO expression .)
    IF              reduce using rule 11 (assignment -> LET IDENTIFIER BE EQUAL TO expression .)
    FOR             reduce using rule 11 (assignment -> LET IDENTIFIER BE EQUAL TO expression .)
    WHILE           reduce using rule 11 (assignment -> LET IDENTIFIER BE EQUAL TO expression .)
    FUNCTION        reduce using rule 11 (assignment -> LET IDENTIFIER BE EQUAL TO expression .)
    SHOW            reduce using rule 11 (assignment -> LET IDENTIFIER BE EQUAL TO expression .)
    $end            reduce using rule 11 (assignment -> LET IDENTIFIER BE EQUAL TO expression .)
    ELSE            reduce using rule 11 (assignment -> LET IDENTIFIER BE EQUAL TO expression .)
    RBRACE          reduce using rule 11 (assignment -> LET IDENTIFIER BE EQUAL TO expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36


state 70

    (27) input -> LET IDENTIFIER BE EQUAL TO SHOW . IDENTIFIER LPAREN STRING_LITERAL RPAREN

    IDENTIFIER      shift and go to state 77


state 71

    (13) else_statements_opt -> ELSE statements .
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function
    (8) statement -> . display
    (9) statement -> . input
    (10) statement -> . COMMENT
    (11) assignment -> . LET IDENTIFIER BE EQUAL TO expression
    (12) conditional -> . IF condition THEN statements else_statements_opt
    (29) loop -> . FOR IDENTIFIER IN list DO statements
    (30) loop -> . WHILE condition DO statements
    (35) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (28) display -> . SHOW expression
    (27) input -> . LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for SHOW resolved as shift
    ELSE            reduce using rule 13 (else_statements_opt -> ELSE statements .)
    $end            reduce using rule 13 (else_statements_opt -> ELSE statements .)
    RBRACE          reduce using rule 13 (else_statements_opt -> ELSE statements .)
    COMMENT         shift and go to state 10
    LET             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    FUNCTION        shift and go to state 15
    SHOW            shift and go to state 16

  ! COMMENT         [ reduce using rule 13 (else_statements_opt -> ELSE statements .) ]
  ! LET             [ reduce using rule 13 (else_statements_opt -> ELSE statements .) ]
  ! IF              [ reduce using rule 13 (else_statements_opt -> ELSE statements .) ]
  ! FOR             [ reduce using rule 13 (else_statements_opt -> ELSE statements .) ]
  ! WHILE           [ reduce using rule 13 (else_statements_opt -> ELSE statements .) ]
  ! FUNCTION        [ reduce using rule 13 (else_statements_opt -> ELSE statements .) ]
  ! SHOW            [ reduce using rule 13 (else_statements_opt -> ELSE statements .) ]

    statement                      shift and go to state 17
    assignment                     shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function                       shift and go to state 7
    display                        shift and go to state 8
    input                          shift and go to state 9

state 72

    (29) loop -> FOR IDENTIFIER IN list DO statements .
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function
    (8) statement -> . display
    (9) statement -> . input
    (10) statement -> . COMMENT
    (11) assignment -> . LET IDENTIFIER BE EQUAL TO expression
    (12) conditional -> . IF condition THEN statements else_statements_opt
    (29) loop -> . FOR IDENTIFIER IN list DO statements
    (30) loop -> . WHILE condition DO statements
    (35) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (28) display -> . SHOW expression
    (27) input -> . LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for SHOW resolved as shift
    $end            reduce using rule 29 (loop -> FOR IDENTIFIER IN list DO statements .)
    ELSE            reduce using rule 29 (loop -> FOR IDENTIFIER IN list DO statements .)
    RBRACE          reduce using rule 29 (loop -> FOR IDENTIFIER IN list DO statements .)
    COMMENT         shift and go to state 10
    LET             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    FUNCTION        shift and go to state 15
    SHOW            shift and go to state 16

  ! COMMENT         [ reduce using rule 29 (loop -> FOR IDENTIFIER IN list DO statements .) ]
  ! LET             [ reduce using rule 29 (loop -> FOR IDENTIFIER IN list DO statements .) ]
  ! IF              [ reduce using rule 29 (loop -> FOR IDENTIFIER IN list DO statements .) ]
  ! FOR             [ reduce using rule 29 (loop -> FOR IDENTIFIER IN list DO statements .) ]
  ! WHILE           [ reduce using rule 29 (loop -> FOR IDENTIFIER IN list DO statements .) ]
  ! FUNCTION        [ reduce using rule 29 (loop -> FOR IDENTIFIER IN list DO statements .) ]
  ! SHOW            [ reduce using rule 29 (loop -> FOR IDENTIFIER IN list DO statements .) ]

    statement                      shift and go to state 17
    assignment                     shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function                       shift and go to state 7
    display                        shift and go to state 8
    input                          shift and go to state 9

state 73

    (31) list -> LBRACKET expression_list RBRACKET .

    DO              reduce using rule 31 (list -> LBRACKET expression_list RBRACKET .)


state 74

    (34) expression_list -> expression_list COMMA . expression
    (19) expression -> . expression PLUS term
    (20) expression -> . expression MINUS term
    (21) expression -> . term
    (22) term -> . term TIMES factor
    (23) term -> . term DIVIDE factor
    (24) term -> . factor
    (25) factor -> . NUMBER
    (26) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 23
    LPAREN          shift and go to state 24

    expression                     shift and go to state 78
    term                           shift and go to state 21
    factor                         shift and go to state 22

state 75

    (35) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE . statements RBRACE return_statement_opt RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function
    (8) statement -> . display
    (9) statement -> . input
    (10) statement -> . COMMENT
    (11) assignment -> . LET IDENTIFIER BE EQUAL TO expression
    (12) conditional -> . IF condition THEN statements else_statements_opt
    (29) loop -> . FOR IDENTIFIER IN list DO statements
    (30) loop -> . WHILE condition DO statements
    (35) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (28) display -> . SHOW expression
    (27) input -> . LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    COMMENT         shift and go to state 10
    LET             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    FUNCTION        shift and go to state 15
    SHOW            shift and go to state 16

    statements                     shift and go to state 79
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function                       shift and go to state 7
    display                        shift and go to state 8
    input                          shift and go to state 9

state 76

    (37) parameters -> parameters COMMA IDENTIFIER .

    RPAREN          reduce using rule 37 (parameters -> parameters COMMA IDENTIFIER .)
    COMMA           reduce using rule 37 (parameters -> parameters COMMA IDENTIFIER .)


state 77

    (27) input -> LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER . LPAREN STRING_LITERAL RPAREN

    LPAREN          shift and go to state 80


state 78

    (34) expression_list -> expression_list COMMA expression .
    (19) expression -> expression . PLUS term
    (20) expression -> expression . MINUS term

    RBRACKET        reduce using rule 34 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 34 (expression_list -> expression_list COMMA expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36


state 79

    (35) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements . RBRACE return_statement_opt RBRACE
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . conditional
    (6) statement -> . loop
    (7) statement -> . function
    (8) statement -> . display
    (9) statement -> . input
    (10) statement -> . COMMENT
    (11) assignment -> . LET IDENTIFIER BE EQUAL TO expression
    (12) conditional -> . IF condition THEN statements else_statements_opt
    (29) loop -> . FOR IDENTIFIER IN list DO statements
    (30) loop -> . WHILE condition DO statements
    (35) function -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE
    (28) display -> . SHOW expression
    (27) input -> . LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN

    RBRACE          shift and go to state 81
    COMMENT         shift and go to state 10
    LET             shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14
    FUNCTION        shift and go to state 15
    SHOW            shift and go to state 16

    statement                      shift and go to state 17
    assignment                     shift and go to state 4
    conditional                    shift and go to state 5
    loop                           shift and go to state 6
    function                       shift and go to state 7
    display                        shift and go to state 8
    input                          shift and go to state 9

state 80

    (27) input -> LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN . STRING_LITERAL RPAREN

    STRING_LITERAL  shift and go to state 82


state 81

    (35) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE . return_statement_opt RBRACE
    (38) return_statement_opt -> . RETURN expression
    (39) return_statement_opt -> . empty
    (40) empty -> .

    RETURN          shift and go to state 84
    RBRACE          reduce using rule 40 (empty -> .)

    return_statement_opt           shift and go to state 83
    empty                          shift and go to state 85

state 82

    (27) input -> LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL . RPAREN

    RPAREN          shift and go to state 86


state 83

    (35) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt . RBRACE

    RBRACE          shift and go to state 87


state 84

    (38) return_statement_opt -> RETURN . expression
    (19) expression -> . expression PLUS term
    (20) expression -> . expression MINUS term
    (21) expression -> . term
    (22) term -> . term TIMES factor
    (23) term -> . term DIVIDE factor
    (24) term -> . factor
    (25) factor -> . NUMBER
    (26) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 23
    LPAREN          shift and go to state 24

    expression                     shift and go to state 88
    term                           shift and go to state 21
    factor                         shift and go to state 22

state 85

    (39) return_statement_opt -> empty .

    RBRACE          reduce using rule 39 (return_statement_opt -> empty .)


state 86

    (27) input -> LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .

    COMMENT         reduce using rule 27 (input -> LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    LET             reduce using rule 27 (input -> LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    IF              reduce using rule 27 (input -> LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    FOR             reduce using rule 27 (input -> LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    WHILE           reduce using rule 27 (input -> LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    FUNCTION        reduce using rule 27 (input -> LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    SHOW            reduce using rule 27 (input -> LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    $end            reduce using rule 27 (input -> LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    ELSE            reduce using rule 27 (input -> LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)
    RBRACE          reduce using rule 27 (input -> LET IDENTIFIER BE EQUAL TO SHOW IDENTIFIER LPAREN STRING_LITERAL RPAREN .)


state 87

    (35) function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .

    COMMENT         reduce using rule 35 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    LET             reduce using rule 35 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    IF              reduce using rule 35 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    FOR             reduce using rule 35 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    WHILE           reduce using rule 35 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    FUNCTION        reduce using rule 35 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    SHOW            reduce using rule 35 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    $end            reduce using rule 35 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    ELSE            reduce using rule 35 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)
    RBRACE          reduce using rule 35 (function -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE return_statement_opt RBRACE .)


state 88

    (38) return_statement_opt -> RETURN expression .
    (19) expression -> expression . PLUS term
    (20) expression -> expression . MINUS term

    RBRACE          reduce using rule 38 (return_statement_opt -> RETURN expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 44 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 44 resolved as shift
WARNING: shift/reduce conflict for LET in state 44 resolved as shift
WARNING: shift/reduce conflict for IF in state 44 resolved as shift
WARNING: shift/reduce conflict for FOR in state 44 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 44 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 44 resolved as shift
WARNING: shift/reduce conflict for SHOW in state 44 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 57 resolved as shift
WARNING: shift/reduce conflict for LET in state 57 resolved as shift
WARNING: shift/reduce conflict for IF in state 57 resolved as shift
WARNING: shift/reduce conflict for FOR in state 57 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 57 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 57 resolved as shift
WARNING: shift/reduce conflict for SHOW in state 57 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 71 resolved as shift
WARNING: shift/reduce conflict for LET in state 71 resolved as shift
WARNING: shift/reduce conflict for IF in state 71 resolved as shift
WARNING: shift/reduce conflict for FOR in state 71 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 71 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 71 resolved as shift
WARNING: shift/reduce conflict for SHOW in state 71 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 72 resolved as shift
WARNING: shift/reduce conflict for LET in state 72 resolved as shift
WARNING: shift/reduce conflict for IF in state 72 resolved as shift
WARNING: shift/reduce conflict for FOR in state 72 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 72 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 72 resolved as shift
WARNING: shift/reduce conflict for SHOW in state 72 resolved as shift
